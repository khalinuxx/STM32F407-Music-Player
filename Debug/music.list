
music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800fe20  0800fe20  0001fe20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010348  08010348  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010348  08010348  00020348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010350  08010350  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010350  08010350  00020350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010354  08010354  00020354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08010358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300cc  2**0
                  CONTENTS
 10 .bss          00002418  200000cc  200000cc  000300cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024e4  200024e4  000300cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024ba3  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a7a  00000000  00000000  00054c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b28  00000000  00000000  0005a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  0005c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cd0  00000000  00000000  0005db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028aa1  00000000  00000000  000867e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4e5c  00000000  00000000  000af281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001840dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007208  00000000  00000000  00184130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fe08 	.word	0x0800fe08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	0800fe08 	.word	0x0800fe08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004e6:	f000 f8f9 	bl	80006dc <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <AUDIO_OUT_Init+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f006 f85f 	bl	80065b4 <HAL_I2S_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 8000500:	f000 f946 	bl	8000790 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f000 fa0b 	bl	8000920 <I2S3_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <AUDIO_OUT_Init+0x94>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2094      	movs	r0, #148	; 0x94
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000528:	2be0      	cmp	r3, #224	; 0xe0
 800052a:	d103      	bne.n	8000534 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <AUDIO_OUT_Init+0x98>)
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <AUDIO_OUT_Init+0x94>)
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e001      	b.n	8000538 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <AUDIO_OUT_Init+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	797a      	ldrb	r2, [r7, #5]
 8000546:	88f9      	ldrh	r1, [r7, #6]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2094      	movs	r0, #148	; 0x94
 800054c:	47a0      	blx	r4
  }
  
  return ret;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	200000ec 	.word	0x200000ec
 800055c:	40003c00 	.word	0x40003c00
 8000560:	20000004 	.word	0x20000004
 8000564:	200000e8 	.word	0x200000e8

08000568 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <AUDIO_OUT_Play+0x4c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	b292      	uxth	r2, r2
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	2094      	movs	r0, #148	; 0x94
 8000580:	4798      	blx	r3
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	e00f      	b.n	80005ac <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000592:	d203      	bcs.n	800059c <AUDIO_OUT_Play+0x34>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	b29b      	uxth	r3, r3
 800059a:	e001      	b.n	80005a0 <AUDIO_OUT_Play+0x38>
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	461a      	mov	r2, r3
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <AUDIO_OUT_Play+0x50>)
 80005a6:	f005 fc83 	bl	8005eb0 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005aa:	2300      	movs	r3, #0
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e8 	.word	0x200000e8
 80005b8:	200000ec 	.word	0x200000ec

080005bc <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <AUDIO_OUT_Pause+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2094      	movs	r0, #148	; 0x94
 80005c8:	4798      	blx	r3
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e003      	b.n	80005dc <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <AUDIO_OUT_Pause+0x28>)
 80005d6:	f005 fd13 	bl	8006000 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005da:	2300      	movs	r3, #0
  }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000e8 	.word	0x200000e8
 80005e4:	200000ec 	.word	0x200000ec

080005e8 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <AUDIO_OUT_Resume+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	2094      	movs	r0, #148	; 0x94
 80005f4:	4798      	blx	r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e003      	b.n	8000608 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <AUDIO_OUT_Resume+0x28>)
 8000602:	f005 fd5f 	bl	80060c4 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000606:	2300      	movs	r3, #0
  }
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000e8 	.word	0x200000e8
 8000610:	200000ec 	.word	0x200000ec

08000614 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <AUDIO_OUT_Stop+0x44>)
 800061e:	f005 fde5 	bl	80061ec <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <AUDIO_OUT_Stop+0x48>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	2094      	movs	r0, #148	; 0x94
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e00b      	b.n	8000650 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d107      	bne.n	800064e <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 fd7a 	bl	8002138 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <AUDIO_OUT_Stop+0x4c>)
 800064a:	f002 fd51 	bl	80030f0 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800064e:	2300      	movs	r3, #0
  }
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000ec 	.word	0x200000ec
 800065c:	200000e8 	.word	0x200000e8
 8000660:	40020c00 	.word	0x40020c00

08000664 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <AUDIO_OUT_SetVolume+0x2c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	4611      	mov	r1, r2
 8000678:	2094      	movs	r0, #148	; 0x94
 800067a:	4798      	blx	r3
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000e8 	.word	0x200000e8

08000694 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_I2S_TxCpltCallback+0x20>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006a6:	f001 fcb3 	bl	8002010 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40003c00 	.word	0x40003c00

080006b8 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006ca:	f001 fcb5 	bl	8002038 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40003c00 	.word	0x40003c00

080006dc <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006fa:	e010      	b.n	800071e <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <AUDIO_OUT_ClockConfig+0xa8>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d103      	bne.n	8000714 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 800070c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000718:	3301      	adds	r3, #1
 800071a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800071e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000722:	2b07      	cmp	r3, #7
 8000724:	d9ea      	bls.n	80006fc <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f007 f8cc 	bl	80078c8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	2b00      	cmp	r3, #0
 800073a:	d113      	bne.n	8000764 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <AUDIO_OUT_ClockConfig+0xac>)
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800074c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <AUDIO_OUT_ClockConfig+0xb0>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f006 ffd1 	bl	8007704 <HAL_RCCEx_PeriphCLKConfig>
   // rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000762:	e00b      	b.n	800077c <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000768:	f44f 7381 	mov.w	r3, #258	; 0x102
 800076c:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f006 ffc4 	bl	8007704 <HAL_RCCEx_PeriphCLKConfig>
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	0800fe74 	.word	0x0800fe74
 8000788:	0800fe94 	.word	0x0800fe94
 800078c:	0800feb4 	.word	0x0800feb4

08000790 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a55      	ldr	r2, [pc, #340]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a47      	ldr	r2, [pc, #284]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000800:	2306      	movs	r3, #6
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	483c      	ldr	r0, [pc, #240]	; (80008fc <AUDIO_OUT_MspInit+0x16c>)
 800080c:	f002 f9d8 	bl	8002bc0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000810:	2310      	movs	r3, #16
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4839      	ldr	r0, [pc, #228]	; (8000900 <AUDIO_OUT_MspInit+0x170>)
 800081c:	f002 f9d0 	bl	8002bc0 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <AUDIO_OUT_MspInit+0x16c>)
 8000848:	f002 f9ba 	bl	8002bc0 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a25      	ldr	r2, [pc, #148]	; (8000904 <AUDIO_OUT_MspInit+0x174>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d136      	bne.n	80008e0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800088e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000892:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <AUDIO_OUT_MspInit+0x17c>)
 80008c6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008d6:	f001 fde3 	bl	80024a0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	f001 fd32 	bl	8002344 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210e      	movs	r1, #14
 80008e4:	202f      	movs	r0, #47	; 0x2f
 80008e6:	f001 fd03 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008ea:	202f      	movs	r0, #47	; 0x2f
 80008ec:	f001 fd1c 	bl	8002328 <HAL_NVIC_EnableIRQ>
}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020000 	.word	0x40020000
 8000904:	40003c00 	.word	0x40003c00
 8000908:	20000134 	.word	0x20000134
 800090c:	400260b8 	.word	0x400260b8

08000910 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <I2S3_Init+0x68>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <I2S3_Init+0x6c>)
 800092c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <I2S3_Init+0x68>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <I2S3_Init+0x68>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800093c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <I2S3_Init+0x68>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <I2S3_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <I2S3_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <I2S3_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <I2S3_Init+0x68>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <I2S3_Init+0x68>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <I2S3_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <I2S3_Init+0x68>)
 800096e:	f005 f95f 	bl	8005c30 <HAL_I2S_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800097c:	2300      	movs	r3, #0
  }
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000ec 	.word	0x200000ec
 800098c:	40003c00 	.word	0x40003c00

08000990 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_I2S_ErrorCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009a2:	f7ff ffb5 	bl	8000910 <AUDIO_OUT_Error_CallBack>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40003c00 	.word	0x40003c00

080009b4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <I2Cx_Init+0x58>)
 80009ba:	f004 fdcf 	bl	800555c <HAL_I2C_GetState>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d121      	bne.n	8000a08 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <I2Cx_Init+0x58>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <I2Cx_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <I2Cx_Init+0x58>)
 80009cc:	2243      	movs	r2, #67	; 0x43
 80009ce:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <I2Cx_Init+0x58>)
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <I2Cx_Init+0x60>)
 80009d4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <I2Cx_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <I2Cx_Init+0x58>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <I2Cx_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <I2Cx_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <I2Cx_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <I2Cx_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <I2Cx_Init+0x58>)
 80009fe:	f000 f86b 	bl	8000ad8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <I2Cx_Init+0x58>)
 8000a04:	f004 f916 	bl	8004c34 <HAL_I2C_Init>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000194 	.word	0x20000194
 8000a10:	40005400 	.word	0x40005400
 8000a14:	000186a0 	.word	0x000186a0

08000a18 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	460b      	mov	r3, r1
 8000a24:	717b      	strb	r3, [r7, #5]
 8000a26:	4613      	mov	r3, r2
 8000a28:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a2e:	797b      	ldrb	r3, [r7, #5]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <I2Cx_WriteData+0x48>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	88f9      	ldrh	r1, [r7, #6]
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <I2Cx_WriteData+0x4c>)
 8000a46:	f004 fa69 	bl	8004f1c <HAL_I2C_Mem_Write>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a54:	f000 f834 	bl	8000ac0 <I2Cx_Error>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000194 	.word	0x20000194

08000a68 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	80fb      	strh	r3, [r7, #6]
 8000a74:	4613      	mov	r3, r2
 8000a76:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <I2Cx_ReadData+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	88f9      	ldrh	r1, [r7, #6]
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	f107 030e 	add.w	r3, r7, #14
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <I2Cx_ReadData+0x54>)
 8000a9a:	f004 fb39 	bl	8005110 <HAL_I2C_Mem_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000aa8:	f000 f80a 	bl	8000ac0 <I2Cx_Error>
  }
  return value;
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000194 	.word	0x20000194

08000ac0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <I2Cx_Error+0x14>)
 8000ac6:	f004 f9f9 	bl	8004ebc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000aca:	f7ff ff73 	bl	80009b4 <I2Cx_Init>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000194 	.word	0x20000194

08000ad8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <I2Cx_MspInit+0xa8>)
 8000b36:	f002 f843 	bl	8002bc0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b50:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	201f      	movs	r0, #31
 8000b58:	f001 fbca 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b5c:	201f      	movs	r0, #31
 8000b5e:	f001 fbe3 	bl	8002328 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	2020      	movs	r0, #32
 8000b68:	f001 fbc2 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	f001 fbdb 	bl	8002328 <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bbc:	f002 f800 	bl	8002bc0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bc0:	f7ff fef8 	bl	80009b4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bca:	f002 fa91 	bl	80030f0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f001 fab2 	bl	8002138 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bda:	f002 fa89 	bl	80030f0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f001 faaa 	bl	8002138 <HAL_Delay>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	71bb      	strb	r3, [r7, #6]
 8000c10:	4613      	mov	r3, r2
 8000c12:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	797a      	ldrb	r2, [r7, #5]
 8000c1a:	79b9      	ldrb	r1, [r7, #6]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fefb 	bl	8000a18 <I2Cx_WriteData>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	460a      	mov	r2, r1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	4613      	mov	r3, r2
 8000c38:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	79ba      	ldrb	r2, [r7, #6]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff10 	bl	8000a68 <I2Cx_ReadData>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0d6      	sub	sp, #344	; 0x158
 8000c58:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4945      	ldr	r1, [pc, #276]	; (8000d78 <AUDIO_StorageParse+0x124>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00e fa27 	bl	800f0b8 <f_opendir>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c78:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d16b      	bne.n	8000d58 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c80:	e066      	b.n	8000d50 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00e faad 	bl	800f1ea <f_readdir>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c96:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d15c      	bne.n	8000d58 <AUDIO_StorageParse+0x104>
 8000c9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ca2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca6:	7d9b      	ldrb	r3, [r3, #22]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d055      	beq.n	8000d58 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb4:	7d9b      	ldrb	r3, [r3, #22]
 8000cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb8:	d100      	bne.n	8000cbc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cba:	e049      	b.n	8000d50 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc0:	3316      	adds	r3, #22
 8000cc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000cc8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000ccc:	2b17      	cmp	r3, #23
 8000cce:	d83f      	bhi.n	8000d50 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cd0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d136      	bne.n	8000d50 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000ce2:	4927      	ldr	r1, [pc, #156]	; (8000d80 <AUDIO_StorageParse+0x12c>)
 8000ce4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000ce8:	f00f f869 	bl	800fdbe <strstr>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <AUDIO_StorageParse+0xae>
 8000cf2:	4924      	ldr	r1, [pc, #144]	; (8000d84 <AUDIO_StorageParse+0x130>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f00f f861 	bl	800fdbe <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d026      	beq.n	8000d50 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d04:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4413      	add	r3, r2
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d16:	4413      	add	r3, r2
 8000d18:	3301      	adds	r3, #1
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00f f839 	bl	800fd98 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d28:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4913      	ldr	r1, [pc, #76]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d42:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d46:	3301      	adds	r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d4c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <AUDIO_StorageParse+0x134>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d094      	beq.n	8000c82 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d5a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <AUDIO_StorageParse+0x138>)
 8000d60:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00e fa1a 	bl	800f19e <f_closedir>
  return res;
 8000d6a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20001988 	.word	0x20001988
 8000d7c:	20001348 	.word	0x20001348
 8000d80:	0800fe20 	.word	0x0800fe20
 8000d84:	0800fe24 	.word	0x0800fe24
 8000d88:	200021cc 	.word	0x200021cc
 8000d8c:	200001ea 	.word	0x200001ea

08000d90 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d94:	f7ff ff5e 	bl	8000c54 <AUDIO_StorageParse>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <AUDIO_GetWavObjectNumber+0x14>
 8000d9e:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <AUDIO_GetWavObjectNumber+0x18>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	e7ff      	b.n	8000da4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001ea 	.word	0x200001ea

08000dac <Mount_USB>:

void Mount_USB (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	4905      	ldr	r1, [pc, #20]	; (8000dc8 <Mount_USB+0x1c>)
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <Mount_USB+0x20>)
 8000db6:	f00d fb8b 	bl	800e4d0 <f_mount>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <Mount_USB+0x24>)
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20001988 	.word	0x20001988
 8000dcc:	2000198c 	.word	0x2000198c
 8000dd0:	200001e8 	.word	0x200001e8

08000dd4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	4603      	mov	r3, r0
 8000dde:	81fb      	strh	r3, [r7, #14]
 8000de0:	460b      	mov	r3, r1
 8000de2:	81bb      	strh	r3, [r7, #12]
 8000de4:	4613      	mov	r3, r2
 8000de6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dec:	f7ff feca 	bl	8000b84 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2201      	movs	r2, #1
 8000df6:	2102      	movs	r1, #2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fb01 	bl	8001400 <CODEC_IO_Write>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e08:	89bb      	ldrh	r3, [r7, #12]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d81b      	bhi.n	8000e48 <cs43l22_Init+0x74>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <cs43l22_Init+0x44>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e39 	.word	0x08000e39
 8000e24:	08000e41 	.word	0x08000e41
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e2a:	22fa      	movs	r2, #250	; 0xfa
 8000e2c:	701a      	strb	r2, [r3, #0]
    break;
 8000e2e:	e00f      	b.n	8000e50 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e30:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e32:	22af      	movs	r2, #175	; 0xaf
 8000e34:	701a      	strb	r2, [r3, #0]
    break;
 8000e36:	e00b      	b.n	8000e50 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e38:	4b57      	ldr	r3, [pc, #348]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e3a:	22aa      	movs	r2, #170	; 0xaa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e007      	b.n	8000e50 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e40:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e42:	2205      	movs	r2, #5
 8000e44:	701a      	strb	r2, [r3, #0]
    break;    
 8000e46:	e003      	b.n	8000e50 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e4e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4a50      	ldr	r2, [pc, #320]	; (8000f98 <cs43l22_Init+0x1c4>)
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 facf 	bl	8001400 <CODEC_IO_Write>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2281      	movs	r2, #129	; 0x81
 8000e72:	2105      	movs	r1, #5
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fac3 	bl	8001400 <CODEC_IO_Write>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2204      	movs	r2, #4
 8000e8a:	2106      	movs	r1, #6
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fab7 	bl	8001400 <CODEC_IO_Write>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e9c:	7afa      	ldrb	r2, [r7, #11]
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f964 	bl	8001170 <cs43l22_SetVolume>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	4413      	add	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000eb0:	89bb      	ldrh	r3, [r7, #12]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d023      	beq.n	8000efe <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2206      	movs	r2, #6
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fa9e 	bl	8001400 <CODEC_IO_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2124      	movs	r1, #36	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fa92 	bl	8001400 <CODEC_IO_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	2125      	movs	r1, #37	; 0x25
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa86 	bl	8001400 <CODEC_IO_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2200      	movs	r2, #0
 8000f04:	210a      	movs	r1, #10
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa7a 	bl	8001400 <CODEC_IO_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	210e      	movs	r1, #14
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa6e 	bl	8001400 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2200      	movs	r2, #0
 8000f34:	2127      	movs	r1, #39	; 0x27
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa62 	bl	8001400 <CODEC_IO_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	211f      	movs	r1, #31
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa56 	bl	8001400 <CODEC_IO_Write>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	220a      	movs	r2, #10
 8000f64:	211a      	movs	r1, #26
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fa4a 	bl	8001400 <CODEC_IO_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	211b      	movs	r1, #27
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fa3e 	bl	8001400 <CODEC_IO_Write>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f8e:	697b      	ldr	r3, [r7, #20]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200001ec 	.word	0x200001ec

08000f9c <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fa0:	f7ff fe28 	bl	8000bf4 <AUDIO_IO_DeInit>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fb2:	f7ff fde7 	bl	8000b84 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe34 	bl	8000c2a <AUDIO_IO_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	f023 0307 	bic.w	r3, r3, #7
 8000fcc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <cs43l22_Play+0x70>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d123      	bne.n	800103c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2206      	movs	r2, #6
 8000ffa:	210e      	movs	r1, #14
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f9ff 	bl	8001400 <CODEC_IO_Write>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f919 	bl	8001248 <cs43l22_SetMute>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	229e      	movs	r2, #158	; 0x9e
 8001024:	2102      	movs	r1, #2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f9ea 	bl	8001400 <CODEC_IO_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <cs43l22_Play+0x70>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800103c:	68fb      	ldr	r3, [r7, #12]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000034 	.word	0x20000034

0800104c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f8f2 	bl	8001248 <cs43l22_SetMute>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2201      	movs	r2, #1
 8001072:	2102      	movs	r1, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f9c3 	bl	8001400 <CODEC_IO_Write>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f8ce 	bl	8001248 <cs43l22_SetMute>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e002      	b.n	80010c0 <cs43l22_Resume+0x30>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	3301      	adds	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2bfe      	cmp	r3, #254	; 0xfe
 80010c4:	d9f9      	bls.n	80010ba <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <cs43l22_Resume+0x74>)
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f994 	bl	8001400 <CODEC_IO_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	229e      	movs	r2, #158	; 0x9e
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f988 	bl	8001400 <CODEC_IO_Write>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001ec 	.word	0x200001ec

08001108 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	2101      	movs	r1, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f893 	bl	8001248 <cs43l22_SetMute>
 8001122:	4602      	mov	r2, r0
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2204      	movs	r2, #4
 8001130:	210e      	movs	r1, #14
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f964 	bl	8001400 <CODEC_IO_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	229f      	movs	r2, #159	; 0x9f
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f958 	bl	8001400 <CODEC_IO_Write>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <cs43l22_Stop+0x64>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000034 	.word	0x20000034

08001170 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	4613      	mov	r3, r2
 800117e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d80b      	bhi.n	80011a2 <cs43l22_SetVolume+0x32>
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	4613      	mov	r3, r2
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <cs43l22_SetVolume+0xb8>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	1152      	asrs	r2, r2, #5
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	e000      	b.n	80011a4 <cs43l22_SetVolume+0x34>
 80011a2:	23ff      	movs	r3, #255	; 0xff
 80011a4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	2be6      	cmp	r3, #230	; 0xe6
 80011aa:	d91c      	bls.n	80011e6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	3319      	adds	r3, #25
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	2120      	movs	r1, #32
 80011ba:	f000 f921 	bl	8001400 <CODEC_IO_Write>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2d8      	uxtb	r0, r3
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	3319      	adds	r3, #25
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	461a      	mov	r2, r3
 80011d4:	2121      	movs	r1, #33	; 0x21
 80011d6:	f000 f913 	bl	8001400 <CODEC_IO_Write>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e01b      	b.n	800121e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	3319      	adds	r3, #25
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	2120      	movs	r1, #32
 80011f4:	f000 f904 	bl	8001400 <CODEC_IO_Write>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	b2d8      	uxtb	r0, r3
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	3319      	adds	r3, #25
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	2121      	movs	r1, #33	; 0x21
 8001210:	f000 f8f6 	bl	8001400 <CODEC_IO_Write>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	51eb851f 	.word	0x51eb851f

0800122c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d124      	bne.n	80012a8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f8ca 	bl	8001400 <CODEC_IO_Write>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2201      	movs	r2, #1
 800127c:	2122      	movs	r1, #34	; 0x22
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f8be 	bl	8001400 <CODEC_IO_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2201      	movs	r2, #1
 8001294:	2123      	movs	r1, #35	; 0x23
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f8b2 	bl	8001400 <CODEC_IO_Write>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e025      	b.n	80012f4 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f8a5 	bl	8001400 <CODEC_IO_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2200      	movs	r2, #0
 80012c6:	2123      	movs	r1, #35	; 0x23
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f899 	bl	8001400 <CODEC_IO_Write>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4a08      	ldr	r2, [pc, #32]	; (8001300 <cs43l22_SetMute+0xb8>)
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	2104      	movs	r1, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f88b 	bl	8001400 <CODEC_IO_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001ec 	.word	0x200001ec

08001304 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	460a      	mov	r2, r1
 800130e:	80fb      	strh	r3, [r7, #6]
 8001310:	4613      	mov	r3, r2
 8001312:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	3b01      	subs	r3, #1
 800131c:	2b03      	cmp	r3, #3
 800131e:	d84b      	bhi.n	80013b8 <cs43l22_SetOutputMode+0xb4>
 8001320:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <cs43l22_SetOutputMode+0x24>)
 8001322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001326:	bf00      	nop
 8001328:	08001339 	.word	0x08001339
 800132c:	08001359 	.word	0x08001359
 8001330:	08001379 	.word	0x08001379
 8001334:	08001399 	.word	0x08001399
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	22fa      	movs	r2, #250	; 0xfa
 800133e:	2104      	movs	r1, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f85d 	bl	8001400 <CODEC_IO_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <cs43l22_SetOutputMode+0xe0>)
 8001352:	22fa      	movs	r2, #250	; 0xfa
 8001354:	701a      	strb	r2, [r3, #0]
      break;
 8001356:	e03f      	b.n	80013d8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	22af      	movs	r2, #175	; 0xaf
 800135e:	2104      	movs	r1, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f84d 	bl	8001400 <CODEC_IO_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <cs43l22_SetOutputMode+0xe0>)
 8001372:	22af      	movs	r2, #175	; 0xaf
 8001374:	701a      	strb	r2, [r3, #0]
      break;
 8001376:	e02f      	b.n	80013d8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	22aa      	movs	r2, #170	; 0xaa
 800137e:	2104      	movs	r1, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f83d 	bl	8001400 <CODEC_IO_Write>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <cs43l22_SetOutputMode+0xe0>)
 8001392:	22aa      	movs	r2, #170	; 0xaa
 8001394:	701a      	strb	r2, [r3, #0]
      break;
 8001396:	e01f      	b.n	80013d8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2205      	movs	r2, #5
 800139e:	2104      	movs	r1, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f82d 	bl	8001400 <CODEC_IO_Write>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <cs43l22_SetOutputMode+0xe0>)
 80013b2:	2205      	movs	r2, #5
 80013b4:	701a      	strb	r2, [r3, #0]
      break;    
 80013b6:	e00f      	b.n	80013d8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2205      	movs	r2, #5
 80013be:	2104      	movs	r1, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f81d 	bl	8001400 <CODEC_IO_Write>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <cs43l22_SetOutputMode+0xe0>)
 80013d2:	2205      	movs	r2, #5
 80013d4:	701a      	strb	r2, [r3, #0]
      break;
 80013d6:	bf00      	nop
  }  
  return counter;
 80013d8:	68fb      	ldr	r3, [r7, #12]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001ec 	.word	0x200001ec

080013e8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	460b      	mov	r3, r1
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	4613      	mov	r3, r2
 8001410:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001416:	797a      	ldrb	r2, [r7, #5]
 8001418:	79b9      	ldrb	r1, [r7, #6]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbf0 	bl	8000c02 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b2db      	uxtb	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_EXTI_Callback>:

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10d      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x2c>
	{




		if (AudioState == AUDIO_STATE_PLAY)
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d102      	bne.n	800144e <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 800144a:	220a      	movs	r2, #10
 800144c:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d102      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001458:	220b      	movs	r2, #11
 800145a:	701a      	strb	r2, [r3, #0]
		}
	}


	if (GPIO_Pin == GPIO_PIN_1)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x38>
	{

		AudioState = AUDIO_STATE_VOLUME_UP;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001464:	220c      	movs	r2, #12
 8001466:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_2)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_EXTI_Callback+0x44>
		{

			AudioState = AUDIO_STATE_VOLUME_DOWN;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001470:	220d      	movs	r2, #13
 8001472:	701a      	strb	r2, [r3, #0]
		}
	if (GPIO_Pin == GPIO_PIN_3)
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	2b08      	cmp	r3, #8
 8001478:	d102      	bne.n	8001480 <HAL_GPIO_EXTI_Callback+0x50>
		{

			AudioState = AUDIO_STATE_NEXT;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 800147c:	2205      	movs	r2, #5
 800147e:	701a      	strb	r2, [r3, #0]
		}
	if (GPIO_Pin == GPIO_PIN_5)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	2b20      	cmp	r3, #32
 8001484:	d102      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x5c>
		{

			AudioState = AUDIO_STATE_PREVIOUS;
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_GPIO_EXTI_Callback+0x68>)
 8001488:	2206      	movs	r2, #6
 800148a:	701a      	strb	r2, [r3, #0]
		}
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20001344 	.word	0x20001344

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 fe08 	bl	80020b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a4:	f000 f82e 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 f912 	bl	80016d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014ac:	f000 f894 	bl	80015d8 <MX_I2C1_Init>
  MX_DMA_Init();
 80014b0:	f000 f8ee 	bl	8001690 <MX_DMA_Init>
  MX_I2S3_Init();
 80014b4:	f000 f8be 	bl	8001634 <MX_I2S3_Init>
  MX_FATFS_Init();
 80014b8:	f007 fcf6 	bl	8008ea8 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80014bc:	f00d fff4 	bl	800f4a8 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014c0:	f00e f818 	bl	800f4f4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY)
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <main+0x5c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d1f9      	bne.n	80014c0 <main+0x24>
        {
        	Mount_USB();
 80014cc:	f7ff fc6e 	bl	8000dac <Mount_USB>
        	AUDIO_PLAYER_Start(0);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 fc23 	bl	8001d1c <AUDIO_PLAYER_Start>

        	while (!IsFinished)
 80014d6:	e009      	b.n	80014ec <main+0x50>
        	{
        		AUDIO_PLAYER_Process(TRUE);
 80014d8:	2001      	movs	r0, #1
 80014da:	f000 fc7f 	bl	8001ddc <AUDIO_PLAYER_Process>

        		if (AudioState == AUDIO_STATE_STOP)
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <main+0x60>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b09      	cmp	r3, #9
 80014e4:	d102      	bne.n	80014ec <main+0x50>
        		{
        			IsFinished = 1;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <main+0x64>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
        	while (!IsFinished)
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <main+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f1      	beq.n	80014d8 <main+0x3c>
    MX_USB_HOST_Process();
 80014f4:	e7e4      	b.n	80014c0 <main+0x24>
 80014f6:	bf00      	nop
 80014f8:	200021cc 	.word	0x200021cc
 80014fc:	20001344 	.word	0x20001344
 8001500:	200002ec 	.word	0x200002ec

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00e fb48 	bl	800fba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemClock_Config+0xcc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <SystemClock_Config+0xcc>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SystemClock_Config+0xcc>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <SystemClock_Config+0xd0>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <SystemClock_Config+0xd0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800157c:	2304      	movs	r3, #4
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001580:	2308      	movs	r3, #8
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fbf1 	bl	8006d70 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001594:	f000 f944 	bl	8001820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2103      	movs	r1, #3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fe52 	bl	8007260 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015c2:	f000 f92d 	bl	8001820 <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2C1_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_I2C1_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_I2C1_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_I2C1_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_I2C1_Init+0x50>)
 8001616:	f003 fb0d 	bl	8004c34 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 f8fe 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001f0 	.word	0x200001f0
 800162c:	40005400 	.word	0x40005400
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_I2S3_Init+0x54>)
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <MX_I2S3_Init+0x58>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_I2S3_Init+0x54>)
 8001640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001644:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_I2S3_Init+0x54>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_I2S3_Init+0x54>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <MX_I2S3_Init+0x54>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_I2S3_Init+0x54>)
 800165c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001660:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_I2S3_Init+0x54>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_I2S3_Init+0x54>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_I2S3_Init+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_I2S3_Init+0x54>)
 8001676:	f004 fadb 	bl	8005c30 <HAL_I2S_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001680:	f000 f8ce 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000244 	.word	0x20000244
 800168c:	40003c00 	.word	0x40003c00

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_DMA_Init+0x3c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2010      	movs	r0, #16
 80016b8:	f000 fe1a 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016bc:	2010      	movs	r0, #16
 80016be:	f000 fe33 	bl	8002328 <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <MX_GPIO_Init+0x120>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a40      	ldr	r2, [pc, #256]	; (80017f0 <MX_GPIO_Init+0x120>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <MX_GPIO_Init+0x120>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <MX_GPIO_Init+0x120>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a2b      	ldr	r2, [pc, #172]	; (80017f0 <MX_GPIO_Init+0x120>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0x120>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2101      	movs	r1, #1
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <MX_GPIO_Init+0x124>)
 800175c:	f001 fcc8 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001760:	2301      	movs	r3, #1
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	481f      	ldr	r0, [pc, #124]	; (80017f4 <MX_GPIO_Init+0x124>)
 8001778:	f001 fa22 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800177c:	232f      	movs	r3, #47	; 0x2f
 800177e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001780:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001786:	2302      	movs	r3, #2
 8001788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4819      	ldr	r0, [pc, #100]	; (80017f8 <MX_GPIO_Init+0x128>)
 8001792:	f001 fa15 	bl	8002bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2006      	movs	r0, #6
 800179c:	f000 fda8 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f000 fdc1 	bl	8002328 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2007      	movs	r0, #7
 80017ac:	f000 fda0 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017b0:	2007      	movs	r0, #7
 80017b2:	f000 fdb9 	bl	8002328 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f000 fd98 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017c0:	2008      	movs	r0, #8
 80017c2:	f000 fdb1 	bl	8002328 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2009      	movs	r0, #9
 80017cc:	f000 fd90 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017d0:	2009      	movs	r0, #9
 80017d2:	f000 fda9 	bl	8002328 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2017      	movs	r0, #23
 80017dc:	f000 fd88 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017e0:	2017      	movs	r0, #23
 80017e2:	f000 fda1 	bl	8002328 <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800180e:	f000 fc73 	bl	80020f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 fd35 	bl	80022da <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_I2C_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80018ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <HAL_I2C_MspInit+0x8c>)
 80018d8:	f001 f972 	bl	8002bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_I2C_MspDeInit+0x38>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10e      	bne.n	800193c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_I2C_MspDeInit+0x3c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_I2C_MspDeInit+0x3c>)
 8001924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800192a:	2140      	movs	r1, #64	; 0x40
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <HAL_I2C_MspDeInit+0x40>)
 800192e:	f001 fae3 	bl	8002ef8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_I2C_MspDeInit+0x40>)
 8001938:	f001 fade 	bl	8002ef8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40005400 	.word	0x40005400
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_I2S_MspInit+0x164>)
 800197c:	4293      	cmp	r3, r2
 800197e:	f040 8094 	bne.w	8001aaa <HAL_I2S_MspInit+0x15a>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001982:	2301      	movs	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001986:	23c0      	movs	r3, #192	; 0xc0
 8001988:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800198a:	2302      	movs	r3, #2
 800198c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4618      	mov	r0, r3
 8001994:	f005 feb6 	bl	8007704 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800199e:	f7ff ff3f 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a3c      	ldr	r2, [pc, #240]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_I2S_MspInit+0x168>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f6:	2310      	movs	r3, #16
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a06:	2306      	movs	r3, #6
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	482a      	ldr	r0, [pc, #168]	; (8001abc <HAL_I2S_MspInit+0x16c>)
 8001a12:	f001 f8d5 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001a16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <HAL_I2S_MspInit+0x170>)
 8001a34:	f001 f8c4 	bl	8002bc0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_I2S_MspInit+0x178>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a56:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a5e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a66:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a6e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a7e:	2203      	movs	r2, #3
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001a90:	f000 fc58 	bl	8002344 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001a9a:	f7ff fec1 	bl	8001820 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_I2S_MspInit+0x174>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3738      	adds	r7, #56	; 0x38
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40003c00 	.word	0x40003c00
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	2000028c 	.word	0x2000028c
 8001ac8:	40026088 	.word	0x40026088

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	2019      	movs	r0, #25
 8001ae2:	f000 fc05 	bl	80022f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae6:	2019      	movs	r0, #25
 8001ae8:	f000 fc1e 	bl	8002328 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_InitTick+0xa4>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_InitTick+0xa4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6453      	str	r3, [r2, #68]	; 0x44
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_InitTick+0xa4>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fdc4 	bl	80076a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b18:	f005 fdae 	bl	8007678 <HAL_RCC_GetPCLK2Freq>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_InitTick+0xa8>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_InitTick+0xac>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_InitTick+0xb0>)
 8001b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_InitTick+0xac>)
 8001b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_InitTick+0xac>)
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_InitTick+0xac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_InitTick+0xac>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_InitTick+0xac>)
 8001b52:	f005 ff43 	bl	80079dc <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d104      	bne.n	8001b66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <HAL_InitTick+0xac>)
 8001b5e:	f005 ff97 	bl	8007a90 <HAL_TIM_Base_Start_IT>
 8001b62:	4603      	mov	r3, r0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3730      	adds	r7, #48	; 0x30
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	200002f0 	.word	0x200002f0
 8001b7c:	40010000 	.word	0x40010000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f001 faa2 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be8:	2002      	movs	r0, #2
 8001bea:	f001 fa9b 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bf6:	2004      	movs	r0, #4
 8001bf8:	f001 fa94 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c04:	2008      	movs	r0, #8
 8001c06:	f001 fa8d 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Stream5_IRQHandler+0x10>)
 8001c16:	f000 fd69 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000028c 	.word	0x2000028c

08001c24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c28:	2020      	movs	r0, #32
 8001c2a:	f001 fa7b 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c3a:	f005 ff99 	bl	8007b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200002f0 	.word	0x200002f0

08001c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <OTG_FS_IRQHandler+0x10>)
 8001c4e:	f001 fceb 	bl	8003628 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200021d0 	.word	0x200021d0

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f00d ff44 	bl	800fb18 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20020000 	.word	0x20020000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	20000338 	.word	0x20000338
 8001cc4:	200024e8 	.word	0x200024e8

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <PlayerInit+0x2c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f7fe fbe4 	bl	80004cc <AUDIO_OUT_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <PlayerInit+0x22>
	{
		return 1;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001d0e:	2300      	movs	r3, #0
	}
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000003c 	.word	0x2000003c

08001d1c <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8001d26:	4828      	ldr	r0, [pc, #160]	; (8001dc8 <AUDIO_PLAYER_Start+0xac>)
 8001d28:	f00c ff93 	bl	800ec52 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001d2c:	f7ff f830 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d93f      	bls.n	8001dbc <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <AUDIO_PLAYER_Start+0xb0>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <AUDIO_PLAYER_Start+0xac>)
 8001d54:	f00c fc02 	bl	800e55c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	222c      	movs	r2, #44	; 0x2c
 8001d5e:	491c      	ldr	r1, [pc, #112]	; (8001dd0 <AUDIO_PLAYER_Start+0xb4>)
 8001d60:	4819      	ldr	r0, [pc, #100]	; (8001dc8 <AUDIO_PLAYER_Start+0xac>)
 8001d62:	f00c fdb9 	bl	800e8d8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <AUDIO_PLAYER_Start+0xb4>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffbe 	bl	8001cec <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <AUDIO_PLAYER_Start+0xb8>)
 8001d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <AUDIO_PLAYER_Start+0xac>)
 8001d7e:	f00c ff92 	bl	800eca6 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d8a:	4912      	ldr	r1, [pc, #72]	; (8001dd4 <AUDIO_PLAYER_Start+0xb8>)
 8001d8c:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <AUDIO_PLAYER_Start+0xac>)
 8001d8e:	f00c fda3 	bl	800e8d8 <f_read>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <AUDIO_PLAYER_Start+0xbc>)
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da8:	480a      	ldr	r0, [pc, #40]	; (8001dd4 <AUDIO_PLAYER_Start+0xb8>)
 8001daa:	f7fe fbdd 	bl	8000568 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <AUDIO_PLAYER_Start+0xb8>)
 8001db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001db6:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20001750 	.word	0x20001750
 8001dcc:	20001348 	.word	0x20001348
 8001dd0:	20001724 	.word	0x20001724
 8001dd4:	2000033c 	.word	0x2000033c
 8001dd8:	20001344 	.word	0x20001344

08001ddc <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001dea:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3b03      	subs	r3, #3
 8001df0:	2b0a      	cmp	r3, #10
 8001df2:	f200 80f6 	bhi.w	8001fe2 <AUDIO_PLAYER_Process+0x206>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <AUDIO_PLAYER_Process+0x20>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e29 	.word	0x08001e29
 8001e00:	08001fe3 	.word	0x08001fe3
 8001e04:	08001eef 	.word	0x08001eef
 8001e08:	08001f3d 	.word	0x08001f3d
 8001e0c:	08001fe3 	.word	0x08001fe3
 8001e10:	08001fe3 	.word	0x08001fe3
 8001e14:	08001edd 	.word	0x08001edd
 8001e18:	08001f7f 	.word	0x08001f7f
 8001e1c:	08001f8b 	.word	0x08001f8b
 8001e20:	08001f97 	.word	0x08001f97
 8001e24:	08001fbd 	.word	0x08001fbd
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001e28:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <AUDIO_PLAYER_Process+0x220>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d305      	bcc.n	8001e44 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e38:	2002      	movs	r0, #2
 8001e3a:	f7fe fbeb 	bl	8000614 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001e40:	2205      	movs	r2, #5
 8001e42:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001e44:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d11e      	bne.n	8001e8e <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e58:	4967      	ldr	r1, [pc, #412]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e5a:	4869      	ldr	r0, [pc, #420]	; (8002000 <AUDIO_PLAYER_Process+0x224>)
 8001e5c:	f00c fd3c 	bl	800e8d8 <f_read>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e66:	2002      	movs	r0, #2
 8001e68:	f7fe fbd4 	bl	8000614 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0bc      	b.n	8001fea <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e70:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a5c      	ldr	r2, [pc, #368]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8c:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001e8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f040 80a5 	bne.w	8001fe6 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea4:	4957      	ldr	r1, [pc, #348]	; (8002004 <AUDIO_PLAYER_Process+0x228>)
 8001ea6:	4856      	ldr	r0, [pc, #344]	; (8002000 <AUDIO_PLAYER_Process+0x224>)
 8001ea8:	f00c fd16 	bl	800e8d8 <f_read>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7fe fbae 	bl	8000614 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e096      	b.n	8001fea <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001ebc:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <AUDIO_PLAYER_Process+0x21c>)
 8001ed4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed8:	6053      	str	r3, [r2, #4]
    }
    break;
 8001eda:	e084      	b.n	8001fe6 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001edc:	2002      	movs	r0, #2
 8001ede:	f7fe fb99 	bl	8000614 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001ee2:	4b44      	ldr	r3, [pc, #272]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
    break;
 8001eec:	e07c      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b42      	ldr	r3, [pc, #264]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	461c      	mov	r4, r3
 8001f08:	f7fe ff42 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	db09      	blt.n	8001f26 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e002      	b.n	8001f26 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001f22:	2209      	movs	r2, #9
 8001f24:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f26:	2002      	movs	r0, #2
 8001f28:	f7fe fb74 	bl	8000614 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f2c:	4b36      	ldr	r3, [pc, #216]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fef1 	bl	8001d1c <AUDIO_PLAYER_Start>
    break;    
 8001f3a:	e055      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da07      	bge.n	8001f68 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001f58:	f7fe ff1a 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f66:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7fe fb53 	bl	8000614 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f6e:	4b26      	ldr	r3, [pc, #152]	; (8002008 <AUDIO_PLAYER_Process+0x22c>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fed0 	bl	8001d1c <AUDIO_PLAYER_Start>
    break;   
 8001f7c:	e034      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001f7e:	f7fe fb1d 	bl	80005bc <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
    break;
 8001f88:	e02e      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001f8a:	f7fe fb2d 	bl	80005e8 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001f8e:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001f90:	2203      	movs	r2, #3
 8001f92:	701a      	strb	r2, [r3, #0]
    break;
 8001f94:	e028      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b5a      	cmp	r3, #90	; 0x5a
 8001f9c:	d804      	bhi.n	8001fa8 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 2;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fa6:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fb58 	bl	8000664 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
    break;
 8001fba:	e015      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b09      	cmp	r3, #9
 8001fc2:	d904      	bls.n	8001fce <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 2;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3b02      	subs	r3, #2
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fcc:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <AUDIO_PLAYER_Process+0x230>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fb45 	bl	8000664 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <AUDIO_PLAYER_Process+0x218>)
 8001fdc:	2203      	movs	r2, #3
 8001fde:	701a      	strb	r2, [r3, #0]
    break;
 8001fe0:	e002      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <AUDIO_PLAYER_Process+0x20c>
    break;
 8001fe6:	bf00      	nop
  }
  return audio_error;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20001344 	.word	0x20001344
 8001ff8:	2000033c 	.word	0x2000033c
 8001ffc:	20001724 	.word	0x20001724
 8002000:	20001750 	.word	0x20001750
 8002004:	20000b3c 	.word	0x20000b3c
 8002008:	20001346 	.word	0x20001346
 800200c:	2000003c 	.word	0x2000003c

08002010 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d104      	bne.n	8002026 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800201e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002022:	2202      	movs	r2, #2
 8002024:	701a      	strb	r2, [r3, #0]
  }
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	20001344 	.word	0x20001344
 8002034:	2000033c 	.word	0x2000033c

08002038 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d104      	bne.n	800204e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
  }
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	20001344 	.word	0x20001344
 800205c:	2000033c 	.word	0x2000033c

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002068:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800207c:	4c0b      	ldr	r4, [pc, #44]	; (80020ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800208a:	f7ff fe1d 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f00d fd49 	bl	800fb24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7ff fa03 	bl	800149c <main>
  bx  lr    
 8002096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80020a4:	08010358 	.word	0x08010358
  ldr r2, =_sbss
 80020a8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80020ac:	200024e4 	.word	0x200024e4

080020b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC_IRQHandler>
	...

080020b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_Init+0x40>)
 80020be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_Init+0x40>)
 80020ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x40>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f8fc 	bl	80022da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fcf2 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fba0 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000044 	.word	0x20000044
 800211c:	20001980 	.word	0x20001980

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20001980 	.word	0x20001980

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000044 	.word	0x20000044

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff4c 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002302:	f7ff ff61 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7ff ffb1 	bl	8002274 <NVIC_EncodePriority>
 8002312:	4602      	mov	r2, r0
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff80 	bl	8002220 <__NVIC_SetPriority>
}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff54 	bl	80021e4 <__NVIC_EnableIRQ>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fee6 	bl	8002120 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e099      	b.n	8002494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002380:	e00f      	b.n	80023a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002382:	f7ff fecd 	bl	8002120 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b05      	cmp	r3, #5
 800238e:	d908      	bls.n	80023a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e078      	b.n	8002494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e8      	bne.n	8002382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_DMA_Init+0x158>)
 80023bc:	4013      	ands	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d107      	bne.n	800240c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0307 	bic.w	r3, r3, #7
 8002422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b04      	cmp	r3, #4
 8002434:	d117      	bne.n	8002466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fb3d 	bl	8002ac8 <DMA_CheckFifoParam>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002462:	2301      	movs	r3, #1
 8002464:	e016      	b.n	8002494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 faf4 	bl	8002a5c <DMA_CalcBaseAndBitshift>
 8002474:	4603      	mov	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	f010803f 	.word	0xf010803f

080024a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e050      	b.n	8002554 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	e048      	b.n	8002554 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2221      	movs	r2, #33	; 0x21
 8002500:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 faaa 	bl	8002a5c <DMA_CalcBaseAndBitshift>
 8002508:	4603      	mov	r3, r0
 800250a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	223f      	movs	r2, #63	; 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Start_IT+0x26>
 800257e:	2302      	movs	r3, #2
 8002580:	e040      	b.n	8002604 <HAL_DMA_Start_IT+0xa8>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d12f      	bne.n	80025f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fa28 	bl	8002a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	223f      	movs	r2, #63	; 0x3f
 80025b6:	409a      	lsls	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0216 	orr.w	r2, r2, #22
 80025ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e005      	b.n	8002602 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002602:	7dfb      	ldrb	r3, [r7, #23]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800261a:	f7ff fd81 	bl	8002120 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d008      	beq.n	800263e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e052      	b.n	80026e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0216 	bic.w	r2, r2, #22
 800264c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <HAL_DMA_Abort+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268e:	e013      	b.n	80026b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002690:	f7ff fd46 	bl	8002120 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d90c      	bls.n	80026b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e015      	b.n	80026e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e4      	bne.n	8002690 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	223f      	movs	r2, #63	; 0x3f
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <HAL_DMA_IRQHandler+0x248>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a8e      	ldr	r2, [pc, #568]	; (8002938 <HAL_DMA_IRQHandler+0x24c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2208      	movs	r2, #8
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	2204      	movs	r2, #4
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2204      	movs	r2, #4
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2210      	movs	r2, #16
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d043      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03c      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2210      	movs	r2, #16
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d024      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e01f      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e016      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	2220      	movs	r2, #32
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 808f 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8087 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002882:	2220      	movs	r2, #32
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d136      	bne.n	8002904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0216 	bic.w	r2, r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x1da>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	223f      	movs	r2, #63	; 0x3f
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07e      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
        }
        return;
 8002902:	e079      	b.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01d      	beq.n	800294e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	2b00      	cmp	r3, #0
 8002926:	d031      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e02c      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
 8002932:	bf00      	nop
 8002934:	20000038 	.word	0x20000038
 8002938:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e01e      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0210 	bic.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d032      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2205      	movs	r2, #5
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d307      	bcc.n	80029d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f2      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x2cc>
 80029d2:	e000      	b.n	80029d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e000      	b.n	80029fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80029f8:	bf00      	nop
    }
  }
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d108      	bne.n	8002a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3e:	e007      	b.n	8002a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3b10      	subs	r3, #16
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a76:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d909      	bls.n	8002a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a9c:	e007      	b.n	8002aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	aaaaaaab 	.word	0xaaaaaaab
 8002ac4:	0800feec 	.word	0x0800feec

08002ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d856      	bhi.n	8002b96 <DMA_CheckFifoParam+0xce>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <DMA_CheckFifoParam+0x28>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b13 	.word	0x08002b13
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b97 	.word	0x08002b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d046      	beq.n	8002b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e043      	b.n	8002b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b1a:	d140      	bne.n	8002b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e03d      	b.n	8002b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d121      	bne.n	8002b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d837      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xda>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <DMA_CheckFifoParam+0x70>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b4f 	.word	0x08002b4f
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002b61 	.word	0x08002b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e030      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d025      	beq.n	8002ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e022      	b.n	8002ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6e:	e01c      	b.n	8002baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d903      	bls.n	8002b7e <DMA_CheckFifoParam+0xb6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b7c:	e018      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      break;
 8002b82:	e015      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e00b      	b.n	8002bae <DMA_CheckFifoParam+0xe6>
      break;
 8002b96:	bf00      	nop
 8002b98:	e00a      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e008      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e006      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e16b      	b.n	8002eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 815a 	bne.w	8002eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80b4 	beq.w	8002eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b60      	ldr	r3, [pc, #384]	; (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	4a5f      	ldr	r2, [pc, #380]	; (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a5b      	ldr	r2, [pc, #364]	; (8002ed0 <HAL_GPIO_Init+0x310>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x314>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x318>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d025      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x31c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x320>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_GPIO_Init+0x324>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <HAL_GPIO_Init+0x328>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	; (8002eec <HAL_GPIO_Init+0x32c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <HAL_GPIO_Init+0x330>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x20a>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00e      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	; (8002ed0 <HAL_GPIO_Init+0x310>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e2a:	4a32      	ldr	r2, [pc, #200]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea8:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_GPIO_Init+0x334>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae90 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e0cd      	b.n	80030b0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f14:	2201      	movs	r2, #1
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	f040 80bd 	bne.w	80030aa <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_GPIO_DeInit+0x1d0>)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	089b      	lsrs	r3, r3, #2
 8002f36:	3302      	adds	r3, #2
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	220f      	movs	r2, #15
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a5d      	ldr	r2, [pc, #372]	; (80030cc <HAL_GPIO_DeInit+0x1d4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02b      	beq.n	8002fb2 <HAL_GPIO_DeInit+0xba>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a5c      	ldr	r2, [pc, #368]	; (80030d0 <HAL_GPIO_DeInit+0x1d8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d025      	beq.n	8002fae <HAL_GPIO_DeInit+0xb6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_GPIO_DeInit+0x1dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <HAL_GPIO_DeInit+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_GPIO_DeInit+0x1e0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_DeInit+0xae>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a59      	ldr	r2, [pc, #356]	; (80030dc <HAL_GPIO_DeInit+0x1e4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_DeInit+0xaa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_GPIO_DeInit+0x1e8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_DeInit+0xa6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_GPIO_DeInit+0x1ec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_DeInit+0xa2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_GPIO_DeInit+0x1f0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_DeInit+0x9e>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00e      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002f96:	2308      	movs	r3, #8
 8002f98:	e00c      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	e00a      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	e008      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e004      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e002      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_DeInit+0xbc>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	f002 0203 	and.w	r2, r2, #3
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d132      	bne.n	800302a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	4947      	ldr	r1, [pc, #284]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fd2:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4944      	ldr	r1, [pc, #272]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fe0:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	4940      	ldr	r1, [pc, #256]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	493d      	ldr	r1, [pc, #244]	; (80030ec <HAL_GPIO_DeInit+0x1f4>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800300c:	4a2e      	ldr	r2, [pc, #184]	; (80030c8 <HAL_GPIO_DeInit+0x1d0>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	43da      	mvns	r2, r3
 800301c:	482a      	ldr	r0, [pc, #168]	; (80030c8 <HAL_GPIO_DeInit+0x1d0>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	400a      	ands	r2, r1
 8003024:	3302      	adds	r3, #2
 8003026:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2103      	movs	r1, #3
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	08d2      	lsrs	r2, r2, #3
 8003060:	4019      	ands	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2103      	movs	r1, #3
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	2101      	movs	r1, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2103      	movs	r1, #3
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f af2e 	bls.w	8002f14 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40021400 	.word	0x40021400
 80030e4:	40021800 	.word	0x40021800
 80030e8:	40021c00 	.word	0x40021c00
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f974 	bl	8001430 <HAL_GPIO_EXTI_Callback>
  }
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b08f      	sub	sp, #60	; 0x3c
 8003158:	af0a      	add	r7, sp, #40	; 0x28
 800315a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e054      	b.n	8003210 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f00c f9ef 	bl	800f564 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2203      	movs	r2, #3
 800318a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 ff39 	bl	800801c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	687e      	ldr	r6, [r7, #4]
 80031b2:	466d      	mov	r5, sp
 80031b4:	f106 0410 	add.w	r4, r6, #16
 80031b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c8:	1d33      	adds	r3, r6, #4
 80031ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031cc:	6838      	ldr	r0, [r7, #0]
 80031ce:	f004 feb3 	bl	8007f38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 ff30 	bl	800803e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	687e      	ldr	r6, [r7, #4]
 80031e6:	466d      	mov	r5, sp
 80031e8:	f106 0410 	add.w	r4, r6, #16
 80031ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031fc:	1d33      	adds	r3, r6, #4
 80031fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003200:	6838      	ldr	r0, [r7, #0]
 8003202:	f005 f897 	bl	8008334 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003218 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af04      	add	r7, sp, #16
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	4608      	mov	r0, r1
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	4603      	mov	r3, r0
 8003228:	70fb      	strb	r3, [r7, #3]
 800322a:	460b      	mov	r3, r1
 800322c:	70bb      	strb	r3, [r7, #2]
 800322e:	4613      	mov	r3, r2
 8003230:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_HCD_HC_Init+0x28>
 800323c:	2302      	movs	r3, #2
 800323e:	e076      	b.n	800332e <HAL_HCD_HC_Init+0x116>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	333d      	adds	r3, #61	; 0x3d
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3338      	adds	r3, #56	; 0x38
 8003268:	787a      	ldrb	r2, [r7, #1]
 800326a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3340      	adds	r3, #64	; 0x40
 800327a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800327c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3339      	adds	r3, #57	; 0x39
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	333f      	adds	r3, #63	; 0x3f
 800329e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	78ba      	ldrb	r2, [r7, #2]
 80032a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ac:	b2d0      	uxtb	r0, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	333a      	adds	r3, #58	; 0x3a
 80032ba:	4602      	mov	r2, r0
 80032bc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da09      	bge.n	80032da <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	333b      	adds	r3, #59	; 0x3b
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e008      	b.n	80032ec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	333b      	adds	r3, #59	; 0x3b
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333c      	adds	r3, #60	; 0x3c
 80032fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	787c      	ldrb	r4, [r7, #1]
 8003306:	78ba      	ldrb	r2, [r7, #2]
 8003308:	78f9      	ldrb	r1, [r7, #3]
 800330a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4623      	mov	r3, r4
 800331c:	f005 f984 	bl	8008628 <USB_HC_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}

08003336 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_HCD_HC_Halt+0x1e>
 8003350:	2302      	movs	r3, #2
 8003352:	e00f      	b.n	8003374 <HAL_HCD_HC_Halt+0x3e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f005 fbc0 	bl	8008aea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	70fb      	strb	r3, [r7, #3]
 800338e:	460b      	mov	r3, r1
 8003390:	70bb      	strb	r3, [r7, #2]
 8003392:	4613      	mov	r3, r2
 8003394:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333b      	adds	r3, #59	; 0x3b
 80033a4:	78ba      	ldrb	r2, [r7, #2]
 80033a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	333f      	adds	r3, #63	; 0x3f
 80033b6:	787a      	ldrb	r2, [r7, #1]
 80033b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033ba:	7c3b      	ldrb	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d112      	bne.n	80033e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3342      	adds	r3, #66	; 0x42
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	333d      	adds	r3, #61	; 0x3d
 80033e0:	7f3a      	ldrb	r2, [r7, #28]
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e008      	b.n	80033f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3342      	adds	r3, #66	; 0x42
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	f200 80c6 	bhi.w	800358c <HAL_HCD_HC_SubmitRequest+0x210>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	08003419 	.word	0x08003419
 800340c:	08003579 	.word	0x08003579
 8003410:	0800347d 	.word	0x0800347d
 8003414:	080034fb 	.word	0x080034fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003418:	7c3b      	ldrb	r3, [r7, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	f040 80b8 	bne.w	8003590 <HAL_HCD_HC_SubmitRequest+0x214>
 8003420:	78bb      	ldrb	r3, [r7, #2]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 80b4 	bne.w	8003590 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003428:	8b3b      	ldrh	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3355      	adds	r3, #85	; 0x55
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3355      	adds	r3, #85	; 0x55
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3342      	adds	r3, #66	; 0x42
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003466:	e093      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3342      	adds	r3, #66	; 0x42
 8003476:	2202      	movs	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
      break;
 800347a:	e089      	b.n	8003590 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800347c:	78bb      	ldrb	r3, [r7, #2]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3355      	adds	r3, #85	; 0x55
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3342      	adds	r3, #66	; 0x42
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034a8:	e073      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3342      	adds	r3, #66	; 0x42
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
      break;
 80034bc:	e069      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3354      	adds	r3, #84	; 0x54
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	3342      	adds	r3, #66	; 0x42
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
      break;
 80034e4:	e055      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3342      	adds	r3, #66	; 0x42
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
      break;
 80034f8:	e04b      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034fa:	78bb      	ldrb	r3, [r7, #2]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11d      	bne.n	800353c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3355      	adds	r3, #85	; 0x55
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3342      	adds	r3, #66	; 0x42
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003526:	e034      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3342      	adds	r3, #66	; 0x42
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	e02a      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3354      	adds	r3, #84	; 0x54
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3342      	adds	r3, #66	; 0x42
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
      break;
 8003562:	e016      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3342      	adds	r3, #66	; 0x42
 8003572:	2202      	movs	r2, #2
 8003574:	701a      	strb	r2, [r3, #0]
      break;
 8003576:	e00c      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3342      	adds	r3, #66	; 0x42
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	e002      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003590:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3344      	adds	r3, #68	; 0x44
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	8b3a      	ldrh	r2, [r7, #24]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	202c      	movs	r0, #44	; 0x2c
 80035ac:	fb00 f303 	mul.w	r3, r0, r3
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	; 0x4c
 80035b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3360      	adds	r3, #96	; 0x60
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3350      	adds	r3, #80	; 0x50
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3339      	adds	r3, #57	; 0x39
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3361      	adds	r3, #97	; 0x61
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	78fb      	ldrb	r3, [r7, #3]
 8003604:	222c      	movs	r2, #44	; 0x2c
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	3338      	adds	r3, #56	; 0x38
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	18d1      	adds	r1, r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	f005 f914 	bl	8008844 <USB_HC_StartXfer>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop

08003628 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fe37 	bl	80082b2 <USB_GetMode>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 80f6 	bne.w	8003838 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f004 fe1b 	bl	800828c <USB_ReadInterrupts>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80ec 	beq.w	8003836 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fe12 	bl	800828c <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003672:	d104      	bne.n	800367e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800367c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f004 fe02 	bl	800828c <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003692:	d104      	bne.n	800369e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800369c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 fdf2 	bl	800828c <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b2:	d104      	bne.n	80036be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fde2 	bl	800828c <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d103      	bne.n	80036da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2202      	movs	r2, #2
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fdd4 	bl	800828c <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ee:	d11c      	bne.n	800372a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800370a:	2110      	movs	r1, #16
 800370c:	6938      	ldr	r0, [r7, #16]
 800370e:	f004 fce3 	bl	80080d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003712:	6938      	ldr	r0, [r7, #16]
 8003714:	f004 fd04 	bl	8008120 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f004 febc 	bl	800849c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f00b ff9b 	bl	800f660 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fdac 	bl	800828c <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373e:	d102      	bne.n	8003746 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 fa03 	bl	8004b4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fd9e 	bl	800828c <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b08      	cmp	r3, #8
 8003758:	d106      	bne.n	8003768 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f00b ff64 	bl	800f628 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2208      	movs	r2, #8
 8003766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f004 fd8d 	bl	800828c <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d101      	bne.n	8003780 <HAL_HCD_IRQHandler+0x158>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_HCD_IRQHandler+0x15a>
 8003780:	2300      	movs	r3, #0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699a      	ldr	r2, [r3, #24]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0210 	bic.w	r2, r2, #16
 8003794:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f001 f906 	bl	80049a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0210 	orr.w	r2, r2, #16
 80037aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f004 fd6b 	bl	800828c <USB_ReadInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037c0:	d13a      	bne.n	8003838 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 f97e 	bl	8008ac8 <USB_HC_ReadInterrupt>
 80037cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e025      	b.n	8003820 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d018      	beq.n	800381a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fe:	d106      	bne.n	800380e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8ab 	bl	8003962 <HCD_HC_IN_IRQHandler>
 800380c:	e005      	b.n	800381a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fcc6 	bl	80041a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3d4      	bcc.n	80037d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003832:	615a      	str	r2, [r3, #20]
 8003834:	e000      	b.n	8003838 <HAL_HCD_IRQHandler+0x210>
      return;
 8003836:	bf00      	nop
    }
  }
}
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_HCD_Start+0x16>
 8003850:	2302      	movs	r3, #2
 8003852:	e013      	b.n	800387c <HAL_HCD_Start+0x3e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f004 fe7e 	bl	8008564 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f004 fbc4 	bl	8007ffa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_HCD_Stop+0x16>
 8003896:	2302      	movs	r3, #2
 8003898:	e00d      	b.n	80038b6 <HAL_HCD_Stop+0x32>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f005 fa78 	bl	8008d9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 fe20 	bl	8008510 <USB_ResetPort>
 80038d0:	4603      	mov	r3, r0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	781b      	ldrb	r3, [r3, #0]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	212c      	movs	r1, #44	; 0x2c
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	4413      	add	r3, r2
 800391a:	3350      	adds	r3, #80	; 0x50
 800391c:	681b      	ldr	r3, [r3, #0]
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fe64 	bl	8008604 <USB_GetCurrentFrame>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fe3f 	bl	80085d6 <USB_GetHostSpeed>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d119      	bne.n	80039c6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	461a      	mov	r2, r3
 80039a0:	2304      	movs	r3, #4
 80039a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e101      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039dc:	d12b      	bne.n	8003a36 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	461a      	mov	r2, r3
 80039ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3361      	adds	r3, #97	; 0x61
 8003a00:	2207      	movs	r2, #7
 8003a02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f005 f85b 	bl	8008aea <USB_HC_Halt>
 8003a34:	e0c9      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d109      	bne.n	8003a60 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	e0b4      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d133      	bne.n	8003ade <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	0151      	lsls	r1, r2, #5
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	440a      	add	r2, r1
 8003a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3361      	adds	r3, #97	; 0x61
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2308      	movs	r3, #8
 8003aca:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f005 f807 	bl	8008aea <USB_HC_Halt>
 8003adc:	e075      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af4:	d134      	bne.n	8003b60 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3361      	adds	r3, #97	; 0x61
 8003b24:	2208      	movs	r2, #8
 8003b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b34:	461a      	mov	r2, r3
 8003b36:	2310      	movs	r3, #16
 8003b38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b46:	461a      	mov	r2, r3
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 ffc6 	bl	8008aea <USB_HC_Halt>
 8003b5e:	e034      	b.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d129      	bne.n	8003bca <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3361      	adds	r3, #97	; 0x61
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 ff99 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d122      	bne.n	8003c28 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f004 ff6c 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c24:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c26:	e2ba      	b.n	800419e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	f040 811b 	bne.w	8003e76 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d019      	beq.n	8003c7c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3348      	adds	r3, #72	; 0x48
 8003c56:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	440b      	add	r3, r1
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	202c      	movs	r0, #44	; 0x2c
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	440b      	add	r3, r1
 8003c78:	3350      	adds	r3, #80	; 0x50
 8003c7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3361      	adds	r3, #97	; 0x61
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	335c      	adds	r3, #92	; 0x5c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	2301      	movs	r3, #1
 8003cb0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	212c      	movs	r1, #44	; 0x2c
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	333f      	adds	r3, #63	; 0x3f
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	333f      	adds	r3, #63	; 0x3f
 8003cd4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d121      	bne.n	8003d1e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f004 fef0 	bl	8008aea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	461a      	mov	r2, r3
 8003d18:	2310      	movs	r3, #16
 8003d1a:	6093      	str	r3, [r2, #8]
 8003d1c:	e066      	b.n	8003dec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	333f      	adds	r3, #63	; 0x3f
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d127      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d50:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3360      	adds	r3, #96	; 0x60
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	b2d9      	uxtb	r1, r3
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	202c      	movs	r0, #44	; 0x2c
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3360      	adds	r3, #96	; 0x60
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f00b fc7e 	bl	800f67c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d80:	e034      	b.n	8003dec <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	333f      	adds	r3, #63	; 0x3f
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d12a      	bne.n	8003dec <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3360      	adds	r3, #96	; 0x60
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3354      	adds	r3, #84	; 0x54
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f083 0301 	eor.w	r3, r3, #1
 8003dbc:	b2d8      	uxtb	r0, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3354      	adds	r3, #84	; 0x54
 8003dcc:	4602      	mov	r2, r0
 8003dce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	b2d9      	uxtb	r1, r3
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	202c      	movs	r0, #44	; 0x2c
 8003dda:	fb00 f303 	mul.w	r3, r0, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3360      	adds	r3, #96	; 0x60
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f00b fc48 	bl	800f67c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d12b      	bne.n	8003e4c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3348      	adds	r3, #72	; 0x48
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	202c      	movs	r0, #44	; 0x2c
 8003e0a:	fb00 f202 	mul.w	r2, r0, r2
 8003e0e:	440a      	add	r2, r1
 8003e10:	3240      	adds	r2, #64	; 0x40
 8003e12:	8812      	ldrh	r2, [r2, #0]
 8003e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 81be 	beq.w	800419e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3354      	adds	r3, #84	; 0x54
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f083 0301 	eor.w	r3, r3, #1
 8003e36:	b2d8      	uxtb	r0, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3354      	adds	r3, #84	; 0x54
 8003e46:	4602      	mov	r2, r0
 8003e48:	701a      	strb	r2, [r3, #0]
}
 8003e4a:	e1a8      	b.n	800419e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3354      	adds	r3, #84	; 0x54
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2d8      	uxtb	r0, r3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3354      	adds	r3, #84	; 0x54
 8003e70:	4602      	mov	r2, r0
 8003e72:	701a      	strb	r2, [r3, #0]
}
 8003e74:	e193      	b.n	800419e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	f040 8106 	bne.w	800409a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3361      	adds	r3, #97	; 0x61
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d109      	bne.n	8003ed6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3360      	adds	r3, #96	; 0x60
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e0c9      	b.n	800406a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3361      	adds	r3, #97	; 0x61
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d109      	bne.n	8003efe <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3360      	adds	r3, #96	; 0x60
 8003ef8:	2205      	movs	r2, #5
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e0b5      	b.n	800406a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3361      	adds	r3, #97	; 0x61
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d009      	beq.n	8003f26 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3361      	adds	r3, #97	; 0x61
 8003f20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d150      	bne.n	8003fc8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	202c      	movs	r0, #44	; 0x2c
 8003f3e:	fb00 f303 	mul.w	r3, r0, r3
 8003f42:	440b      	add	r3, r1
 8003f44:	335c      	adds	r3, #92	; 0x5c
 8003f46:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	335c      	adds	r3, #92	; 0x5c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d912      	bls.n	8003f82 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	335c      	adds	r3, #92	; 0x5c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3360      	adds	r3, #96	; 0x60
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f80:	e073      	b.n	800406a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	3360      	adds	r3, #96	; 0x60
 8003f90:	2202      	movs	r2, #2
 8003f92:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003faa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fc6:	e050      	b.n	800406a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3361      	adds	r3, #97	; 0x61
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d122      	bne.n	8004022 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3360      	adds	r3, #96	; 0x60
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004004:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800400c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401a:	461a      	mov	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e023      	b.n	800406a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3361      	adds	r3, #97	; 0x61
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b07      	cmp	r3, #7
 8004034:	d119      	bne.n	800406a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	335c      	adds	r3, #92	; 0x5c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	202c      	movs	r0, #44	; 0x2c
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	440b      	add	r3, r1
 8004054:	335c      	adds	r3, #92	; 0x5c
 8004056:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3360      	adds	r3, #96	; 0x60
 8004066:	2204      	movs	r2, #4
 8004068:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	2302      	movs	r3, #2
 800407a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	b2d9      	uxtb	r1, r3
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	202c      	movs	r0, #44	; 0x2c
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	4413      	add	r3, r2
 800408c:	3360      	adds	r3, #96	; 0x60
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f00b faf2 	bl	800f67c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004098:	e081      	b.n	800419e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d176      	bne.n	800419e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	333f      	adds	r3, #63	; 0x3f
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d121      	bne.n	8004108 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	335c      	adds	r3, #92	; 0x5c
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f004 fcf2 	bl	8008aea <USB_HC_Halt>
 8004106:	e041      	b.n	800418c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	333f      	adds	r3, #63	; 0x3f
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	212c      	movs	r1, #44	; 0x2c
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	4413      	add	r3, r2
 8004128:	333f      	adds	r3, #63	; 0x3f
 800412a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800412c:	2b02      	cmp	r3, #2
 800412e:	d12d      	bne.n	800418c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	335c      	adds	r3, #92	; 0x5c
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d120      	bne.n	800418c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3361      	adds	r3, #97	; 0x61
 8004158:	2203      	movs	r2, #3
 800415a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	440a      	add	r2, r1
 8004172:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004176:	f043 0302 	orr.w	r3, r3, #2
 800417a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f004 fcaf 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	461a      	mov	r2, r3
 800419a:	2310      	movs	r3, #16
 800419c:	6093      	str	r3, [r2, #8]
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b088      	sub	sp, #32
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d119      	bne.n	800420a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	2304      	movs	r3, #4
 80041e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004202:	f043 0302 	orr.w	r3, r3, #2
 8004206:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004208:	e3ca      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d13e      	bne.n	800429e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	2320      	movs	r3, #32
 8004230:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	333d      	adds	r3, #61	; 0x3d
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	f040 83ac 	bne.w	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	333d      	adds	r3, #61	; 0x3d
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3360      	adds	r3, #96	; 0x60
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	440a      	add	r2, r1
 8004282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fc27 	bl	8008aea <USB_HC_Halt>
}
 800429c:	e380      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b4:	d122      	bne.n	80042fc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 fc02 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	461a      	mov	r2, r3
 80042f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f8:	6093      	str	r3, [r2, #8]
}
 80042fa:	e351      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d150      	bne.n	80043b4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	335c      	adds	r3, #92	; 0x5c
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d111      	bne.n	800435e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	333d      	adds	r3, #61	; 0x3d
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	461a      	mov	r2, r3
 800435a:	2340      	movs	r3, #64	; 0x40
 800435c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	440a      	add	r2, r1
 8004374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f004 fbae 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	2301      	movs	r3, #1
 800439e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3361      	adds	r3, #97	; 0x61
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
}
 80043b2:	e2f5      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d13c      	bne.n	8004444 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	3361      	adds	r3, #97	; 0x61
 80043d8:	2204      	movs	r2, #4
 80043da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	333d      	adds	r3, #61	; 0x3d
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	212c      	movs	r1, #44	; 0x2c
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	335c      	adds	r3, #92	; 0x5c
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	440a      	add	r2, r1
 8004416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f004 fb5d 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	461a      	mov	r2, r3
 800443e:	2340      	movs	r3, #64	; 0x40
 8004440:	6093      	str	r3, [r2, #8]
}
 8004442:	e2ad      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d12a      	bne.n	80044b0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	461a      	mov	r2, r3
 8004468:	2308      	movs	r3, #8
 800446a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	440a      	add	r2, r1
 8004482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004486:	f043 0302 	orr.w	r3, r3, #2
 800448a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f004 fb27 	bl	8008aea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3361      	adds	r3, #97	; 0x61
 80044aa:	2205      	movs	r2, #5
 80044ac:	701a      	strb	r2, [r3, #0]
}
 80044ae:	e277      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d150      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	335c      	adds	r3, #92	; 0x5c
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	212c      	movs	r1, #44	; 0x2c
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	3361      	adds	r3, #97	; 0x61
 80044e6:	2203      	movs	r2, #3
 80044e8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	333d      	adds	r3, #61	; 0x3d
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d112      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	333c      	adds	r3, #60	; 0x3c
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	333d      	adds	r3, #61	; 0x3d
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	440a      	add	r2, r1
 800453a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f004 facb 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004560:	461a      	mov	r2, r3
 8004562:	2310      	movs	r3, #16
 8004564:	6093      	str	r3, [r2, #8]
}
 8004566:	e21b      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457a:	2b80      	cmp	r3, #128	; 0x80
 800457c:	d174      	bne.n	8004668 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d121      	bne.n	80045ca <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3361      	adds	r3, #97	; 0x61
 8004594:	2206      	movs	r2, #6
 8004596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 fa91 	bl	8008aea <USB_HC_Halt>
 80045c8:	e044      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	335c      	adds	r3, #92	; 0x5c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	202c      	movs	r0, #44	; 0x2c
 80045e2:	fb00 f303 	mul.w	r3, r0, r3
 80045e6:	440b      	add	r3, r1
 80045e8:	335c      	adds	r3, #92	; 0x5c
 80045ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	335c      	adds	r3, #92	; 0x5c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d920      	bls.n	8004642 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	335c      	adds	r3, #92	; 0x5c
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3360      	adds	r3, #96	; 0x60
 8004620:	2204      	movs	r2, #4
 8004622:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	b2d9      	uxtb	r1, r3
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	202c      	movs	r0, #44	; 0x2c
 800462e:	fb00 f303 	mul.w	r3, r0, r3
 8004632:	4413      	add	r3, r2
 8004634:	3360      	adds	r3, #96	; 0x60
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f00b f81e 	bl	800f67c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004640:	e008      	b.n	8004654 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	3360      	adds	r3, #96	; 0x60
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	461a      	mov	r2, r3
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	6093      	str	r3, [r2, #8]
}
 8004666:	e19b      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467e:	d134      	bne.n	80046ea <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	440a      	add	r2, r1
 8004696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469a:	f043 0302 	orr.w	r3, r3, #2
 800469e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 fa1d 	bl	8008aea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	2310      	movs	r3, #16
 80046c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	461a      	mov	r2, r3
 80046d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3361      	adds	r3, #97	; 0x61
 80046e4:	2208      	movs	r2, #8
 80046e6:	701a      	strb	r2, [r3, #0]
}
 80046e8:	e15a      	b.n	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f040 814f 	bne.w	80049a0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4413      	add	r3, r2
 800470a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	440a      	add	r2, r1
 8004718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471c:	f023 0302 	bic.w	r3, r3, #2
 8004720:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3361      	adds	r3, #97	; 0x61
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d17d      	bne.n	8004832 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	212c      	movs	r1, #44	; 0x2c
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	4413      	add	r3, r2
 8004742:	3360      	adds	r3, #96	; 0x60
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	333f      	adds	r3, #63	; 0x3f
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d00a      	beq.n	8004772 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	333f      	adds	r3, #63	; 0x3f
 800476a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800476c:	2b03      	cmp	r3, #3
 800476e:	f040 8100 	bne.w	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d113      	bne.n	80047a2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3355      	adds	r3, #85	; 0x55
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2d8      	uxtb	r0, r3
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3355      	adds	r3, #85	; 0x55
 800479e:	4602      	mov	r2, r0
 80047a0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	f040 80e3 	bne.w	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	334c      	adds	r3, #76	; 0x4c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80d8 	beq.w	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	212c      	movs	r1, #44	; 0x2c
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	334c      	adds	r3, #76	; 0x4c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	202c      	movs	r0, #44	; 0x2c
 80047d8:	fb00 f202 	mul.w	r2, r0, r2
 80047dc:	440a      	add	r2, r1
 80047de:	3240      	adds	r2, #64	; 0x40
 80047e0:	8812      	ldrh	r2, [r2, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	3b01      	subs	r3, #1
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	202c      	movs	r0, #44	; 0x2c
 80047ec:	fb00 f202 	mul.w	r2, r0, r2
 80047f0:	440a      	add	r2, r1
 80047f2:	3240      	adds	r2, #64	; 0x40
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80b5 	beq.w	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	212c      	movs	r1, #44	; 0x2c
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	3355      	adds	r3, #85	; 0x55
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2d8      	uxtb	r0, r3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3355      	adds	r3, #85	; 0x55
 800482c:	4602      	mov	r2, r0
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e09f      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3361      	adds	r3, #97	; 0x61
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d109      	bne.n	800485a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3360      	adds	r3, #96	; 0x60
 8004854:	2202      	movs	r2, #2
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e08b      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3361      	adds	r3, #97	; 0x61
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d109      	bne.n	8004882 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	3360      	adds	r3, #96	; 0x60
 800487c:	2202      	movs	r2, #2
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e077      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	212c      	movs	r1, #44	; 0x2c
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	4413      	add	r3, r2
 800488e:	3361      	adds	r3, #97	; 0x61
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d109      	bne.n	80048aa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3360      	adds	r3, #96	; 0x60
 80048a4:	2205      	movs	r2, #5
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e063      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3361      	adds	r3, #97	; 0x61
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b06      	cmp	r3, #6
 80048bc:	d009      	beq.n	80048d2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	3361      	adds	r3, #97	; 0x61
 80048cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d14f      	bne.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	212c      	movs	r1, #44	; 0x2c
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	335c      	adds	r3, #92	; 0x5c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	202c      	movs	r0, #44	; 0x2c
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	440b      	add	r3, r1
 80048f0:	335c      	adds	r3, #92	; 0x5c
 80048f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	335c      	adds	r3, #92	; 0x5c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d912      	bls.n	800492e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	335c      	adds	r3, #92	; 0x5c
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3360      	adds	r3, #96	; 0x60
 8004928:	2204      	movs	r2, #4
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e021      	b.n	8004972 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	212c      	movs	r1, #44	; 0x2c
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	4413      	add	r3, r2
 800493a:	3360      	adds	r3, #96	; 0x60
 800493c:	2202      	movs	r2, #2
 800493e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004956:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800495e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	461a      	mov	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	461a      	mov	r2, r3
 8004980:	2302      	movs	r3, #2
 8004982:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	b2d9      	uxtb	r1, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	202c      	movs	r0, #44	; 0x2c
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	4413      	add	r3, r2
 8004994:	3360      	adds	r3, #96	; 0x60
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f00a fe6e 	bl	800f67c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049a0:	bf00      	nop
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	0c5b      	lsrs	r3, r3, #17
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d004      	beq.n	80049ee <HCD_RXQLVL_IRQHandler+0x46>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	f000 80a9 	beq.w	8004b3e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049ec:	e0aa      	b.n	8004b44 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80a6 	beq.w	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3344      	adds	r3, #68	; 0x44
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 809b 	beq.w	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3350      	adds	r3, #80	; 0x50
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	441a      	add	r2, r3
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	202c      	movs	r0, #44	; 0x2c
 8004a26:	fb00 f303 	mul.w	r3, r0, r3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	334c      	adds	r3, #76	; 0x4c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d87a      	bhi.n	8004b2a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3344      	adds	r3, #68	; 0x44
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f003 fbc5 	bl	80081dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3344      	adds	r3, #68	; 0x44
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	441a      	add	r2, r3
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	202c      	movs	r0, #44	; 0x2c
 8004a6c:	fb00 f303 	mul.w	r3, r0, r3
 8004a70:	440b      	add	r3, r1
 8004a72:	3344      	adds	r3, #68	; 0x44
 8004a74:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3350      	adds	r3, #80	; 0x50
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	441a      	add	r2, r3
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	202c      	movs	r0, #44	; 0x2c
 8004a90:	fb00 f303 	mul.w	r3, r0, r3
 8004a94:	440b      	add	r3, r1
 8004a96:	3350      	adds	r3, #80	; 0x50
 8004a98:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	0cdb      	lsrs	r3, r3, #19
 8004aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3340      	adds	r3, #64	; 0x40
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d13c      	bne.n	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d039      	beq.n	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ae4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aec:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afa:	461a      	mov	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3354      	adds	r3, #84	; 0x54
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f083 0301 	eor.w	r3, r3, #1
 8004b14:	b2d8      	uxtb	r0, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	3354      	adds	r3, #84	; 0x54
 8004b24:	4602      	mov	r2, r0
 8004b26:	701a      	strb	r2, [r3, #0]
      break;
 8004b28:	e00b      	b.n	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	3360      	adds	r3, #96	; 0x60
 8004b38:	2204      	movs	r2, #4
 8004b3a:	701a      	strb	r2, [r3, #0]
      break;
 8004b3c:	e001      	b.n	8004b42 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b42:	bf00      	nop
  }
}
 8004b44:	bf00      	nop
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d10b      	bne.n	8004b9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d102      	bne.n	8004b94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f00a fd58 	bl	800f644 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d132      	bne.n	8004c0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f043 0308 	orr.w	r3, r3, #8
 8004bac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d126      	bne.n	8004c06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d113      	bne.n	8004be8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bca:	d106      	bne.n	8004bda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fc62 	bl	800849c <USB_InitFSLSPClkSel>
 8004bd8:	e011      	b.n	8004bfe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fc5b 	bl	800849c <USB_InitFSLSPClkSel>
 8004be6:	e00a      	b.n	8004bfe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004bfc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f00a fd4a 	bl	800f698 <HAL_HCD_PortEnabled_Callback>
 8004c04:	e002      	b.n	8004c0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f00a fd54 	bl	800f6b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d103      	bne.n	8004c1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c24:	461a      	mov	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6013      	str	r3, [r2, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e12b      	b.n	8004e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fe0e 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	; 0x24
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c98:	f002 fcda 	bl	8007650 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4a81      	ldr	r2, [pc, #516]	; (8004ea8 <HAL_I2C_Init+0x274>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d807      	bhi.n	8004cb8 <HAL_I2C_Init+0x84>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a80      	ldr	r2, [pc, #512]	; (8004eac <HAL_I2C_Init+0x278>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bf94      	ite	ls
 8004cb0:	2301      	movls	r3, #1
 8004cb2:	2300      	movhi	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e006      	b.n	8004cc6 <HAL_I2C_Init+0x92>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a7d      	ldr	r2, [pc, #500]	; (8004eb0 <HAL_I2C_Init+0x27c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bf94      	ite	ls
 8004cc0:	2301      	movls	r3, #1
 8004cc2:	2300      	movhi	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0e7      	b.n	8004e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a78      	ldr	r2, [pc, #480]	; (8004eb4 <HAL_I2C_Init+0x280>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0c9b      	lsrs	r3, r3, #18
 8004cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a6a      	ldr	r2, [pc, #424]	; (8004ea8 <HAL_I2C_Init+0x274>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d802      	bhi.n	8004d08 <HAL_I2C_Init+0xd4>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	3301      	adds	r3, #1
 8004d06:	e009      	b.n	8004d1c <HAL_I2C_Init+0xe8>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	4a69      	ldr	r2, [pc, #420]	; (8004eb8 <HAL_I2C_Init+0x284>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	495c      	ldr	r1, [pc, #368]	; (8004ea8 <HAL_I2C_Init+0x274>)
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d819      	bhi.n	8004d70 <HAL_I2C_Init+0x13c>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e59      	subs	r1, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d50:	400b      	ands	r3, r1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_I2C_Init+0x138>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1e59      	subs	r1, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d64:	3301      	adds	r3, #1
 8004d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6a:	e051      	b.n	8004e10 <HAL_I2C_Init+0x1dc>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	e04f      	b.n	8004e10 <HAL_I2C_Init+0x1dc>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d111      	bne.n	8004d9c <HAL_I2C_Init+0x168>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1e58      	subs	r0, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	440b      	add	r3, r1
 8004d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e012      	b.n	8004dc2 <HAL_I2C_Init+0x18e>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	0099      	lsls	r1, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <HAL_I2C_Init+0x196>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e022      	b.n	8004e10 <HAL_I2C_Init+0x1dc>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <HAL_I2C_Init+0x1bc>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1e58      	subs	r0, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	440b      	add	r3, r1
 8004de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de4:	3301      	adds	r3, #1
 8004de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dee:	e00f      	b.n	8004e10 <HAL_I2C_Init+0x1dc>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1e58      	subs	r0, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	0099      	lsls	r1, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e06:	3301      	adds	r3, #1
 8004e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	6809      	ldr	r1, [r1, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6911      	ldr	r1, [r2, #16]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	4311      	orrs	r1, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	000186a0 	.word	0x000186a0
 8004eac:	001e847f 	.word	0x001e847f
 8004eb0:	003d08ff 	.word	0x003d08ff
 8004eb4:	431bde83 	.word	0x431bde83
 8004eb8:	10624dd3 	.word	0x10624dd3

08004ebc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e021      	b.n	8004f12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2224      	movs	r2, #36	; 0x24
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fd10 	bl	800190c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	4608      	mov	r0, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	817b      	strh	r3, [r7, #10]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	813b      	strh	r3, [r7, #8]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f36:	f7fd f8f3 	bl	8002120 <HAL_GetTick>
 8004f3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	f040 80d9 	bne.w	80050fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	2319      	movs	r3, #25
 8004f50:	2201      	movs	r2, #1
 8004f52:	496d      	ldr	r1, [pc, #436]	; (8005108 <HAL_I2C_Mem_Write+0x1ec>)
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fc8d 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f60:	2302      	movs	r3, #2
 8004f62:	e0cc      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_I2C_Mem_Write+0x56>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0c5      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d007      	beq.n	8004f98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2240      	movs	r2, #64	; 0x40
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a4d      	ldr	r2, [pc, #308]	; (800510c <HAL_I2C_Mem_Write+0x1f0>)
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fda:	88f8      	ldrh	r0, [r7, #6]
 8004fdc:	893a      	ldrh	r2, [r7, #8]
 8004fde:	8979      	ldrh	r1, [r7, #10]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4603      	mov	r3, r0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fac4 	bl	8005578 <I2C_RequestMemoryWrite>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d052      	beq.n	800509c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e081      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fd0e 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2b04      	cmp	r3, #4
 8005010:	d107      	bne.n	8005022 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06b      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d11b      	bne.n	800509c <HAL_I2C_Mem_Write+0x180>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	d017      	beq.n	800509c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1aa      	bne.n	8004ffa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fcfa 	bl	8005aa2 <I2C_WaitOnBTFFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d107      	bne.n	80050cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e016      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	00100002 	.word	0x00100002
 800510c:	ffff0000 	.word	0xffff0000

08005110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08c      	sub	sp, #48	; 0x30
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	4608      	mov	r0, r1
 800511a:	4611      	mov	r1, r2
 800511c:	461a      	mov	r2, r3
 800511e:	4603      	mov	r3, r0
 8005120:	817b      	strh	r3, [r7, #10]
 8005122:	460b      	mov	r3, r1
 8005124:	813b      	strh	r3, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800512a:	f7fc fff9 	bl	8002120 <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b20      	cmp	r3, #32
 800513a:	f040 8208 	bne.w	800554e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2319      	movs	r3, #25
 8005144:	2201      	movs	r2, #1
 8005146:	497b      	ldr	r1, [pc, #492]	; (8005334 <HAL_I2C_Mem_Read+0x224>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fb93 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	e1fb      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_I2C_Mem_Read+0x56>
 8005162:	2302      	movs	r3, #2
 8005164:	e1f4      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d007      	beq.n	800518c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2222      	movs	r2, #34	; 0x22
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2240      	movs	r2, #64	; 0x40
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a5b      	ldr	r2, [pc, #364]	; (8005338 <HAL_I2C_Mem_Read+0x228>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ce:	88f8      	ldrh	r0, [r7, #6]
 80051d0:	893a      	ldrh	r2, [r7, #8]
 80051d2:	8979      	ldrh	r1, [r7, #10]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fa60 	bl	80056a4 <I2C_RequestMemoryRead>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1b0      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d113      	bne.n	800521e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f6:	2300      	movs	r3, #0
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e184      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	2b01      	cmp	r3, #1
 8005224:	d11b      	bne.n	800525e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e164      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	2b02      	cmp	r3, #2
 8005264:	d11b      	bne.n	800529e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	e144      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052b4:	e138      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	f200 80f1 	bhi.w	80054a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d123      	bne.n	8005310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fc29 	bl	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e139      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800530e:	e10b      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005314:	2b02      	cmp	r3, #2
 8005316:	d14e      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	2200      	movs	r2, #0
 8005320:	4906      	ldr	r1, [pc, #24]	; (800533c <HAL_I2C_Mem_Read+0x22c>)
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 faa6 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e10e      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
 8005332:	bf00      	nop
 8005334:	00100002 	.word	0x00100002
 8005338:	ffff0000 	.word	0xffff0000
 800533c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800534e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053b4:	e0b8      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2200      	movs	r2, #0
 80053be:	4966      	ldr	r1, [pc, #408]	; (8005558 <HAL_I2C_Mem_Read+0x448>)
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa57 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0bf      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	2200      	movs	r2, #0
 800541a:	494f      	ldr	r1, [pc, #316]	; (8005558 <HAL_I2C_Mem_Read+0x448>)
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fa29 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e091      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054a0:	e042      	b.n	8005528 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fb3c 	bl	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e04c      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d118      	bne.n	8005528 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	f47f aec2 	bne.w	80052b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3728      	adds	r7, #40	; 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00010004 	.word	0x00010004

0800555c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	b2db      	uxtb	r3, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	461a      	mov	r2, r3
 8005586:	4603      	mov	r3, r0
 8005588:	817b      	strh	r3, [r7, #10]
 800558a:	460b      	mov	r3, r1
 800558c:	813b      	strh	r3, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f960 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c8:	d103      	bne.n	80055d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e05f      	b.n	8005696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d6:	897b      	ldrh	r3, [r7, #10]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	461a      	mov	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	492d      	ldr	r1, [pc, #180]	; (80056a0 <I2C_RequestMemoryWrite+0x128>)
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f998 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e04c      	b.n	8005696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	6a39      	ldr	r1, [r7, #32]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fa02 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b04      	cmp	r3, #4
 8005628:	d107      	bne.n	800563a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e02b      	b.n	8005696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005644:	893b      	ldrh	r3, [r7, #8]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]
 800564e:	e021      	b.n	8005694 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005650:	893b      	ldrh	r3, [r7, #8]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	b2da      	uxtb	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005660:	6a39      	ldr	r1, [r7, #32]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 f9dc 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b04      	cmp	r3, #4
 8005674:	d107      	bne.n	8005686 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e005      	b.n	8005696 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800568a:	893b      	ldrh	r3, [r7, #8]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	00010002 	.word	0x00010002

080056a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	817b      	strh	r3, [r7, #10]
 80056b6:	460b      	mov	r3, r1
 80056b8:	813b      	strh	r3, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f8c2 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d103      	bne.n	800570e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e0aa      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005712:	897b      	ldrh	r3, [r7, #10]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	4952      	ldr	r1, [pc, #328]	; (8005870 <I2C_RequestMemoryRead+0x1cc>)
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f8fa 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e097      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	6a39      	ldr	r1, [r7, #32]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f964 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b04      	cmp	r3, #4
 8005764:	d107      	bne.n	8005776 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e076      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d105      	bne.n	800578c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]
 800578a:	e021      	b.n	80057d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800578c:	893b      	ldrh	r3, [r7, #8]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b29b      	uxth	r3, r3
 8005792:	b2da      	uxtb	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	6a39      	ldr	r1, [r7, #32]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f93e 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d107      	bne.n	80057c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e050      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c6:	893b      	ldrh	r3, [r7, #8]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	6a39      	ldr	r1, [r7, #32]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f923 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d107      	bne.n	80057f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e035      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	2200      	movs	r2, #0
 8005814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f82b 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00d      	beq.n	8005840 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005832:	d103      	bne.n	800583c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e013      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005840:	897b      	ldrh	r3, [r7, #10]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	6a3a      	ldr	r2, [r7, #32]
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <I2C_RequestMemoryRead+0x1cc>)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f863 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	00010002 	.word	0x00010002

08005874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005884:	e025      	b.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d021      	beq.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fc fc47 	bl	8002120 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d116      	bne.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e023      	b.n	800591a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d10d      	bne.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	e00c      	b.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	43da      	mvns	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	429a      	cmp	r2, r3
 8005916:	d0b6      	beq.n	8005886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005930:	e051      	b.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005940:	d123      	bne.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800595a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e046      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d021      	beq.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005992:	f7fc fbc5 	bl	8002120 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d116      	bne.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e020      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10c      	bne.n	80059fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	43da      	mvns	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	e00b      	b.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	43da      	mvns	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d18d      	bne.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a2c:	e02d      	b.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8ce 	bl	8005bd0 <I2C_IsAcknowledgeFailed>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e02d      	b.n	8005a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d021      	beq.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fc fb6b 	bl	8002120 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d116      	bne.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e007      	b.n	8005a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d1ca      	bne.n	8005a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aae:	e02d      	b.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f88d 	bl	8005bd0 <I2C_IsAcknowledgeFailed>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e02d      	b.n	8005b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d021      	beq.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac8:	f7fc fb2a 	bl	8002120 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d302      	bcc.n	8005ade <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e007      	b.n	8005b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d1ca      	bne.n	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b30:	e042      	b.n	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d119      	bne.n	8005b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0210 	mvn.w	r2, #16
 8005b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e029      	b.n	8005bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fc fad4 	bl	8002120 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d116      	bne.n	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e007      	b.n	8005bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d1b5      	bne.n	8005b32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be6:	d11b      	bne.n	8005c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e128      	b.n	8005e94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a90      	ldr	r2, [pc, #576]	; (8005e9c <HAL_I2S_Init+0x26c>)
 8005c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fe77 	bl	8001950 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c78:	f023 030f 	bic.w	r3, r3, #15
 8005c7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2202      	movs	r2, #2
 8005c84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d060      	beq.n	8005d50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005c96:	2310      	movs	r3, #16
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e001      	b.n	8005ca0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d802      	bhi.n	8005cae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005cae:	2001      	movs	r0, #1
 8005cb0:	f001 fe36 	bl	8007920 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbe:	d125      	bne.n	8005d0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	461a      	mov	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	3305      	adds	r3, #5
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	e01f      	b.n	8005d2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	3305      	adds	r3, #5
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	e00e      	b.n	8005d2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	3305      	adds	r3, #5
 8005d28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4a5c      	ldr	r2, [pc, #368]	; (8005ea0 <HAL_I2S_Init+0x270>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e003      	b.n	8005d58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d50:	2302      	movs	r3, #2
 8005d52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d902      	bls.n	8005d64 <HAL_I2S_Init+0x134>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2bff      	cmp	r3, #255	; 0xff
 8005d62:	d907      	bls.n	8005d74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f043 0210 	orr.w	r2, r3, #16
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e08f      	b.n	8005e94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	ea42 0103 	orr.w	r1, r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d92:	f023 030f 	bic.w	r3, r3, #15
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6851      	ldr	r1, [r2, #4]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	4311      	orrs	r1, r2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68d2      	ldr	r2, [r2, #12]
 8005da4:	4311      	orrs	r1, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6992      	ldr	r2, [r2, #24]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d161      	bne.n	8005e84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a38      	ldr	r2, [pc, #224]	; (8005ea4 <HAL_I2S_Init+0x274>)
 8005dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a37      	ldr	r2, [pc, #220]	; (8005ea8 <HAL_I2S_Init+0x278>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2S_Init+0x1a4>
 8005dd0:	4b36      	ldr	r3, [pc, #216]	; (8005eac <HAL_I2S_Init+0x27c>)
 8005dd2:	e001      	b.n	8005dd8 <HAL_I2S_Init+0x1a8>
 8005dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	4932      	ldr	r1, [pc, #200]	; (8005ea8 <HAL_I2S_Init+0x278>)
 8005de0:	428a      	cmp	r2, r1
 8005de2:	d101      	bne.n	8005de8 <HAL_I2S_Init+0x1b8>
 8005de4:	4a31      	ldr	r2, [pc, #196]	; (8005eac <HAL_I2S_Init+0x27c>)
 8005de6:	e001      	b.n	8005dec <HAL_I2S_Init+0x1bc>
 8005de8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005dec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005df0:	f023 030f 	bic.w	r3, r3, #15
 8005df4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <HAL_I2S_Init+0x278>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d101      	bne.n	8005e04 <HAL_I2S_Init+0x1d4>
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <HAL_I2S_Init+0x27c>)
 8005e02:	e001      	b.n	8005e08 <HAL_I2S_Init+0x1d8>
 8005e04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e08:	2202      	movs	r2, #2
 8005e0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <HAL_I2S_Init+0x278>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_I2S_Init+0x1ea>
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <HAL_I2S_Init+0x27c>)
 8005e18:	e001      	b.n	8005e1e <HAL_I2S_Init+0x1ee>
 8005e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2a:	d003      	beq.n	8005e34 <HAL_I2S_Init+0x204>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e001      	b.n	8005e40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	897b      	ldrh	r3, [r7, #10]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a0d      	ldr	r2, [pc, #52]	; (8005ea8 <HAL_I2S_Init+0x278>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d101      	bne.n	8005e7c <HAL_I2S_Init+0x24c>
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <HAL_I2S_Init+0x27c>)
 8005e7a:	e001      	b.n	8005e80 <HAL_I2S_Init+0x250>
 8005e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e80:	897a      	ldrh	r2, [r7, #10]
 8005e82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	08006735 	.word	0x08006735
 8005ea0:	cccccccd 	.word	0xcccccccd
 8005ea4:	080068bd 	.word	0x080068bd
 8005ea8:	40003800 	.word	0x40003800
 8005eac:	40003400 	.word	0x40003400

08005eb0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_I2S_Transmit_DMA+0x1a>
 8005ec4:	88fb      	ldrh	r3, [r7, #6]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e08e      	b.n	8005fec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_I2S_Transmit_DMA+0x2e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e086      	b.n	8005fec <HAL_I2S_Transmit_DMA+0x13c>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d005      	beq.n	8005efe <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e076      	b.n	8005fec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2203      	movs	r2, #3
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d002      	beq.n	8005f2a <HAL_I2S_Transmit_DMA+0x7a>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d10a      	bne.n	8005f40 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f3e:	e005      	b.n	8005f4c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	4a28      	ldr	r2, [pc, #160]	; (8005ff4 <HAL_I2S_Transmit_DMA+0x144>)
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <HAL_I2S_Transmit_DMA+0x148>)
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <HAL_I2S_Transmit_DMA+0x14c>)
 8005f62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f6c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f74:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f7c:	f7fc faee 	bl	800255c <HAL_DMA_Start_IT>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00f      	beq.n	8005fa6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	f043 0208 	orr.w	r2, r3, #8
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e022      	b.n	8005fec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69da      	ldr	r2, [r3, #28]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fc2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d107      	bne.n	8005fe2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0202 	orr.w	r2, r2, #2
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	08006613 	.word	0x08006613
 8005ff8:	080065d1 	.word	0x080065d1
 8005ffc:	0800662f 	.word	0x0800662f

08006000 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_I2S_DMAPause+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e04a      	b.n	80060ae <HAL_I2S_DMAPause+0xae>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b03      	cmp	r3, #3
 800602a:	d108      	bne.n	800603e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0202 	bic.w	r2, r2, #2
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	e032      	b.n	80060a4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b04      	cmp	r3, #4
 8006048:	d108      	bne.n	800605c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	e023      	b.n	80060a4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b05      	cmp	r3, #5
 8006066:	d11d      	bne.n	80060a4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0203 	bic.w	r2, r2, #3
 8006076:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <HAL_I2S_DMAPause+0xbc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_I2S_DMAPause+0x86>
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_I2S_DMAPause+0xc0>)
 8006084:	e001      	b.n	800608a <HAL_I2S_DMAPause+0x8a>
 8006086:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	490a      	ldr	r1, [pc, #40]	; (80060bc <HAL_I2S_DMAPause+0xbc>)
 8006092:	428b      	cmp	r3, r1
 8006094:	d101      	bne.n	800609a <HAL_I2S_DMAPause+0x9a>
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <HAL_I2S_DMAPause+0xc0>)
 8006098:	e001      	b.n	800609e <HAL_I2S_DMAPause+0x9e>
 800609a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609e:	f022 0203 	bic.w	r2, r2, #3
 80060a2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40003800 	.word	0x40003800
 80060c0:	40003400 	.word	0x40003400

080060c4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_I2S_DMAResume+0x18>
 80060d8:	2302      	movs	r3, #2
 80060da:	e07d      	b.n	80061d8 <HAL_I2S_DMAResume+0x114>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d108      	bne.n	8006102 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0202 	orr.w	r2, r2, #2
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e056      	b.n	80061b0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b04      	cmp	r3, #4
 800610c:	d108      	bne.n	8006120 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	e047      	b.n	80061b0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b05      	cmp	r3, #5
 800612a:	d141      	bne.n	80061b0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0203 	orr.w	r2, r2, #3
 800613a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <HAL_I2S_DMAResume+0x120>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <HAL_I2S_DMAResume+0x86>
 8006146:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_I2S_DMAResume+0x124>)
 8006148:	e001      	b.n	800614e <HAL_I2S_DMAResume+0x8a>
 800614a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4923      	ldr	r1, [pc, #140]	; (80061e4 <HAL_I2S_DMAResume+0x120>)
 8006156:	428b      	cmp	r3, r1
 8006158:	d101      	bne.n	800615e <HAL_I2S_DMAResume+0x9a>
 800615a:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <HAL_I2S_DMAResume+0x124>)
 800615c:	e001      	b.n	8006162 <HAL_I2S_DMAResume+0x9e>
 800615e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006162:	f042 0203 	orr.w	r2, r2, #3
 8006166:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <HAL_I2S_DMAResume+0x120>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <HAL_I2S_DMAResume+0xb2>
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_I2S_DMAResume+0x124>)
 8006174:	e001      	b.n	800617a <HAL_I2S_DMAResume+0xb6>
 8006176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006180:	2b00      	cmp	r3, #0
 8006182:	d115      	bne.n	80061b0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <HAL_I2S_DMAResume+0x120>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <HAL_I2S_DMAResume+0xce>
 800618e:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <HAL_I2S_DMAResume+0x124>)
 8006190:	e001      	b.n	8006196 <HAL_I2S_DMAResume+0xd2>
 8006192:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4911      	ldr	r1, [pc, #68]	; (80061e4 <HAL_I2S_DMAResume+0x120>)
 800619e:	428b      	cmp	r3, r1
 80061a0:	d101      	bne.n	80061a6 <HAL_I2S_DMAResume+0xe2>
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_I2S_DMAResume+0x124>)
 80061a4:	e001      	b.n	80061aa <HAL_I2S_DMAResume+0xe6>
 80061a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ae:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061cc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	40003800 	.word	0x40003800
 80061e8:	40003400 	.word	0x40003400

080061ec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006200:	d004      	beq.n	800620c <HAL_I2S_DMAStop+0x20>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 80d1 	bne.w	80063ae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00f      	beq.n	8006234 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	4618      	mov	r0, r3
 800621a:	f7fc f9f7 	bl	800260c <HAL_DMA_Abort>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	f043 0208 	orr.w	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006234:	2364      	movs	r3, #100	; 0x64
 8006236:	2201      	movs	r2, #1
 8006238:	2102      	movs	r1, #2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fb04 	bl	8006848 <I2S_WaitFlagStateUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f043 0201 	orr.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800625e:	2364      	movs	r3, #100	; 0x64
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 faef 	bl	8006848 <I2S_WaitFlagStateUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00b      	beq.n	8006288 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006274:	f043 0201 	orr.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0202 	bic.w	r2, r2, #2
 80062b4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b05      	cmp	r3, #5
 80062c0:	f040 8165 	bne.w	800658e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00f      	beq.n	80062ec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fc f99b 	bl	800260c <HAL_DMA_Abort>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f043 0208 	orr.w	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a8a      	ldr	r2, [pc, #552]	; (800651c <HAL_I2S_DMAStop+0x330>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_I2S_DMAStop+0x10e>
 80062f6:	4b8a      	ldr	r3, [pc, #552]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80062f8:	e001      	b.n	80062fe <HAL_I2S_DMAStop+0x112>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4985      	ldr	r1, [pc, #532]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006306:	428b      	cmp	r3, r1
 8006308:	d101      	bne.n	800630e <HAL_I2S_DMAStop+0x122>
 800630a:	4b85      	ldr	r3, [pc, #532]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 800630c:	e001      	b.n	8006312 <HAL_I2S_DMAStop+0x126>
 800630e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006316:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7e      	ldr	r2, [pc, #504]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <HAL_I2S_DMAStop+0x13e>
 8006326:	4b7e      	ldr	r3, [pc, #504]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 8006328:	e001      	b.n	800632e <HAL_I2S_DMAStop+0x142>
 800632a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a79      	ldr	r2, [pc, #484]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_I2S_DMAStop+0x154>
 800633c:	4b78      	ldr	r3, [pc, #480]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 800633e:	e001      	b.n	8006344 <HAL_I2S_DMAStop+0x158>
 8006340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a73      	ldr	r2, [pc, #460]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <HAL_I2S_DMAStop+0x16c>
 8006354:	4b72      	ldr	r3, [pc, #456]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 8006356:	e001      	b.n	800635c <HAL_I2S_DMAStop+0x170>
 8006358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	496e      	ldr	r1, [pc, #440]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006364:	428b      	cmp	r3, r1
 8006366:	d101      	bne.n	800636c <HAL_I2S_DMAStop+0x180>
 8006368:	4b6d      	ldr	r3, [pc, #436]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 800636a:	e001      	b.n	8006370 <HAL_I2S_DMAStop+0x184>
 800636c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006396:	e0fa      	b.n	800658e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5f      	ldr	r2, [pc, #380]	; (800651c <HAL_I2S_DMAStop+0x330>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d101      	bne.n	80063a6 <HAL_I2S_DMAStop+0x1ba>
 80063a2:	4b5f      	ldr	r3, [pc, #380]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80063a4:	e001      	b.n	80063aa <HAL_I2S_DMAStop+0x1be>
 80063a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063aa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80063ac:	e0ef      	b.n	800658e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b6:	d005      	beq.n	80063c4 <HAL_I2S_DMAStop+0x1d8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c0:	f040 80e5 	bne.w	800658e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00f      	beq.n	80063ec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fc f91b 	bl	800260c <HAL_DMA_Abort>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e0:	f043 0208 	orr.w	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b05      	cmp	r3, #5
 80063f6:	f040 809a 	bne.w	800652e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00f      	beq.n	8006422 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	4618      	mov	r0, r3
 8006408:	f7fc f900 	bl	800260c <HAL_DMA_Abort>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f043 0208 	orr.w	r2, r3, #8
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006422:	f7fb fe7d 	bl	8002120 <HAL_GetTick>
 8006426:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006428:	e012      	b.n	8006450 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800642a:	f7fb fe79 	bl	8002120 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b64      	cmp	r3, #100	; 0x64
 8006436:	d90b      	bls.n	8006450 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a31      	ldr	r2, [pc, #196]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <HAL_I2S_DMAStop+0x272>
 800645a:	4b31      	ldr	r3, [pc, #196]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 800645c:	e001      	b.n	8006462 <HAL_I2S_DMAStop+0x276>
 800645e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d1de      	bne.n	800642a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800646c:	e012      	b.n	8006494 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800646e:	f7fb fe57 	bl	8002120 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b64      	cmp	r3, #100	; 0x64
 800647a:	d90b      	bls.n	8006494 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a20      	ldr	r2, [pc, #128]	; (800651c <HAL_I2S_DMAStop+0x330>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_I2S_DMAStop+0x2b6>
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80064a0:	e001      	b.n	80064a6 <HAL_I2S_DMAStop+0x2ba>
 80064a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b80      	cmp	r3, #128	; 0x80
 80064ae:	d0de      	beq.n	800646e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a19      	ldr	r2, [pc, #100]	; (800651c <HAL_I2S_DMAStop+0x330>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d101      	bne.n	80064be <HAL_I2S_DMAStop+0x2d2>
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80064bc:	e001      	b.n	80064c2 <HAL_I2S_DMAStop+0x2d6>
 80064be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4914      	ldr	r1, [pc, #80]	; (800651c <HAL_I2S_DMAStop+0x330>)
 80064ca:	428b      	cmp	r3, r1
 80064cc:	d101      	bne.n	80064d2 <HAL_I2S_DMAStop+0x2e6>
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80064d0:	e001      	b.n	80064d6 <HAL_I2S_DMAStop+0x2ea>
 80064d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064da:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a0d      	ldr	r2, [pc, #52]	; (800651c <HAL_I2S_DMAStop+0x330>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_I2S_DMAStop+0x302>
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 80064ec:	e001      	b.n	80064f2 <HAL_I2S_DMAStop+0x306>
 80064ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_I2S_DMAStop+0x330>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d101      	bne.n	8006506 <HAL_I2S_DMAStop+0x31a>
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 8006504:	e001      	b.n	800650a <HAL_I2S_DMAStop+0x31e>
 8006506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4902      	ldr	r1, [pc, #8]	; (800651c <HAL_I2S_DMAStop+0x330>)
 8006512:	428b      	cmp	r3, r1
 8006514:	d106      	bne.n	8006524 <HAL_I2S_DMAStop+0x338>
 8006516:	4b02      	ldr	r3, [pc, #8]	; (8006520 <HAL_I2S_DMAStop+0x334>)
 8006518:	e006      	b.n	8006528 <HAL_I2S_DMAStop+0x33c>
 800651a:	bf00      	nop
 800651c:	40003800 	.word	0x40003800
 8006520:	40003400 	.word	0x40003400
 8006524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006528:	f022 0202 	bic.w	r2, r2, #2
 800652c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 0201 	bic.w	r2, r2, #1
 8006562:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656c:	d10c      	bne.n	8006588 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e002      	b.n	800658e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006596:	7ffb      	ldrb	r3, [r7, #31]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c2:	b2db      	uxtb	r3, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10e      	bne.n	8006604 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0202 	bic.w	r2, r2, #2
 80065f4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7fa f845 	bl	8000694 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7fa f849 	bl	80006b8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0203 	bic.w	r2, r2, #3
 800664a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f043 0208 	orr.w	r2, r3, #8
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7fa f98f 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	881a      	ldrh	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7f9 ffe3 	bl	8000694 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	b292      	uxth	r2, r2
 80066ea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	1c9a      	adds	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10e      	bne.n	800672c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800671c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff ff3a 	bl	80065a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b04      	cmp	r3, #4
 800674e:	d13a      	bne.n	80067c6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d109      	bne.n	800676e <I2S_IRQHandler+0x3a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d102      	bne.n	800676e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff ffb4 	bl	80066d6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d126      	bne.n	80067c6 <I2S_IRQHandler+0x92>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b20      	cmp	r3, #32
 8006784:	d11f      	bne.n	80067c6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006794:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	f043 0202 	orr.w	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fa f8e5 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d136      	bne.n	8006840 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d109      	bne.n	80067f0 <I2S_IRQHandler+0xbc>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b80      	cmp	r3, #128	; 0x80
 80067e8:	d102      	bne.n	80067f0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ff45 	bl	800667a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d122      	bne.n	8006840 <I2S_IRQHandler+0x10c>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b20      	cmp	r3, #32
 8006806:	d11b      	bne.n	8006840 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006816:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa f8a8 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006858:	f7fb fc62 	bl	8002120 <HAL_GetTick>
 800685c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800685e:	e018      	b.n	8006892 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d014      	beq.n	8006892 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006868:	f7fb fc5a 	bl	8002120 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d902      	bls.n	800687e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e00f      	b.n	80068b2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d1d7      	bne.n	8006860 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a92      	ldr	r2, [pc, #584]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80068d6:	4b92      	ldr	r3, [pc, #584]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068d8:	e001      	b.n	80068de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80068da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a8b      	ldr	r2, [pc, #556]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d101      	bne.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068f4:	4b8a      	ldr	r3, [pc, #552]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068f6:	e001      	b.n	80068fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80068f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006908:	d004      	beq.n	8006914 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8099 	bne.w	8006a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d107      	bne.n	800692e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f925 	bl	8006b78 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d107      	bne.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9c8 	bl	8006cd8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d13a      	bne.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d035      	beq.n	80069c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a6e      	ldr	r2, [pc, #440]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006966:	4b6e      	ldr	r3, [pc, #440]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006968:	e001      	b.n	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800696a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4969      	ldr	r1, [pc, #420]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006976:	428b      	cmp	r3, r1
 8006978:	d101      	bne.n	800697e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800697a:	4b69      	ldr	r3, [pc, #420]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800697c:	e001      	b.n	8006982 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800697e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006986:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006996:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f043 0202 	orr.w	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7f9 ffe4 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	f040 80c3 	bne.w	8006b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80bd 	beq.w	8006b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a49      	ldr	r2, [pc, #292]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80069fa:	4b49      	ldr	r3, [pc, #292]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069fc:	e001      	b.n	8006a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80069fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4944      	ldr	r1, [pc, #272]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a0a:	428b      	cmp	r3, r1
 8006a0c:	d101      	bne.n	8006a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a0e:	4b44      	ldr	r3, [pc, #272]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a10:	e001      	b.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	f043 0204 	orr.w	r2, r3, #4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7f9 ffa6 	bl	8000990 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a44:	e089      	b.n	8006b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d107      	bne.n	8006a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8be 	bl	8006bdc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d107      	bne.n	8006a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f8fd 	bl	8006c74 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d12f      	bne.n	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02a      	beq.n	8006ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d101      	bne.n	8006aac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006aaa:	e001      	b.n	8006ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4919      	ldr	r1, [pc, #100]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	d101      	bne.n	8006ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006abc:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006abe:	e001      	b.n	8006ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ac8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f043 0202 	orr.w	r2, r3, #2
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7f9 ff56 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d136      	bne.n	8006b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d031      	beq.n	8006b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b02:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b04:	e001      	b.n	8006b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4902      	ldr	r1, [pc, #8]	; (8006b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b12:	428b      	cmp	r3, r1
 8006b14:	d106      	bne.n	8006b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006b16:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b18:	e006      	b.n	8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006b1a:	bf00      	nop
 8006b1c:	40003800 	.word	0x40003800
 8006b20:	40003400 	.word	0x40003400
 8006b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b2c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4a:	f043 0204 	orr.w	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7f9 ff1c 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b58:	e000      	b.n	8006b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b5a:	bf00      	nop
}
 8006b5c:	bf00      	nop
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	1c99      	adds	r1, r3, #2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6251      	str	r1, [r2, #36]	; 0x24
 8006b8a:	881a      	ldrh	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d113      	bne.n	8006bd2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff ffc9 	bl	8006b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c99      	adds	r1, r3, #2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6251      	str	r1, [r2, #36]	; 0x24
 8006bee:	8819      	ldrh	r1, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <I2SEx_TxISR_I2SExt+0x90>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d101      	bne.n	8006bfe <I2SEx_TxISR_I2SExt+0x22>
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <I2SEx_TxISR_I2SExt+0x94>)
 8006bfc:	e001      	b.n	8006c02 <I2SEx_TxISR_I2SExt+0x26>
 8006bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c02:	460a      	mov	r2, r1
 8006c04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d121      	bne.n	8006c62 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a12      	ldr	r2, [pc, #72]	; (8006c6c <I2SEx_TxISR_I2SExt+0x90>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d101      	bne.n	8006c2c <I2SEx_TxISR_I2SExt+0x50>
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <I2SEx_TxISR_I2SExt+0x94>)
 8006c2a:	e001      	b.n	8006c30 <I2SEx_TxISR_I2SExt+0x54>
 8006c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	490d      	ldr	r1, [pc, #52]	; (8006c6c <I2SEx_TxISR_I2SExt+0x90>)
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	d101      	bne.n	8006c40 <I2SEx_TxISR_I2SExt+0x64>
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <I2SEx_TxISR_I2SExt+0x94>)
 8006c3e:	e001      	b.n	8006c44 <I2SEx_TxISR_I2SExt+0x68>
 8006c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c48:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff81 	bl	8006b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40003800 	.word	0x40003800
 8006c70:	40003400 	.word	0x40003400

08006c74 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68d8      	ldr	r0, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	1c99      	adds	r1, r3, #2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c8c:	b282      	uxth	r2, r0
 8006c8e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d113      	bne.n	8006cd0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cb6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ff4a 	bl	8006b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <I2SEx_RxISR_I2SExt+0x90>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <I2SEx_RxISR_I2SExt+0x16>
 8006cea:	4b20      	ldr	r3, [pc, #128]	; (8006d6c <I2SEx_RxISR_I2SExt+0x94>)
 8006cec:	e001      	b.n	8006cf2 <I2SEx_RxISR_I2SExt+0x1a>
 8006cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cf2:	68d8      	ldr	r0, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	1c99      	adds	r1, r3, #2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cfe:	b282      	uxth	r2, r0
 8006d00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d121      	bne.n	8006d5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <I2SEx_RxISR_I2SExt+0x90>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d101      	bne.n	8006d28 <I2SEx_RxISR_I2SExt+0x50>
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <I2SEx_RxISR_I2SExt+0x94>)
 8006d26:	e001      	b.n	8006d2c <I2SEx_RxISR_I2SExt+0x54>
 8006d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	490d      	ldr	r1, [pc, #52]	; (8006d68 <I2SEx_RxISR_I2SExt+0x90>)
 8006d34:	428b      	cmp	r3, r1
 8006d36:	d101      	bne.n	8006d3c <I2SEx_RxISR_I2SExt+0x64>
 8006d38:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <I2SEx_RxISR_I2SExt+0x94>)
 8006d3a:	e001      	b.n	8006d40 <I2SEx_RxISR_I2SExt+0x68>
 8006d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d106      	bne.n	8006d5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff03 	bl	8006b64 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40003800 	.word	0x40003800
 8006d6c:	40003400 	.word	0x40003400

08006d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e267      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d075      	beq.n	8006e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d8e:	4b88      	ldr	r3, [pc, #544]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d00c      	beq.n	8006db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d9a:	4b85      	ldr	r3, [pc, #532]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d112      	bne.n	8006dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da6:	4b82      	ldr	r3, [pc, #520]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db4:	4b7e      	ldr	r3, [pc, #504]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d05b      	beq.n	8006e78 <HAL_RCC_OscConfig+0x108>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d157      	bne.n	8006e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e242      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd4:	d106      	bne.n	8006de4 <HAL_RCC_OscConfig+0x74>
 8006dd6:	4b76      	ldr	r3, [pc, #472]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a75      	ldr	r2, [pc, #468]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e01d      	b.n	8006e20 <HAL_RCC_OscConfig+0xb0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dec:	d10c      	bne.n	8006e08 <HAL_RCC_OscConfig+0x98>
 8006dee:	4b70      	ldr	r3, [pc, #448]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a6f      	ldr	r2, [pc, #444]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b6d      	ldr	r3, [pc, #436]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6c      	ldr	r2, [pc, #432]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	e00b      	b.n	8006e20 <HAL_RCC_OscConfig+0xb0>
 8006e08:	4b69      	ldr	r3, [pc, #420]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a68      	ldr	r2, [pc, #416]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	4b66      	ldr	r3, [pc, #408]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a65      	ldr	r2, [pc, #404]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d013      	beq.n	8006e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e28:	f7fb f97a 	bl	8002120 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e30:	f7fb f976 	bl	8002120 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b64      	cmp	r3, #100	; 0x64
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e207      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e42:	4b5b      	ldr	r3, [pc, #364]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0xc0>
 8006e4e:	e014      	b.n	8006e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e50:	f7fb f966 	bl	8002120 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e58:	f7fb f962 	bl	8002120 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b64      	cmp	r3, #100	; 0x64
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e1f3      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e6a:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0xe8>
 8006e76:	e000      	b.n	8006e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d063      	beq.n	8006f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e86:	4b4a      	ldr	r3, [pc, #296]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 030c 	and.w	r3, r3, #12
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e92:	4b47      	ldr	r3, [pc, #284]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d11c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e9e:	4b44      	ldr	r3, [pc, #272]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x152>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d001      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e1c7      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec2:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4937      	ldr	r1, [pc, #220]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ed6:	e03a      	b.n	8006f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d020      	beq.n	8006f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ee0:	4b34      	ldr	r3, [pc, #208]	; (8006fb4 <HAL_RCC_OscConfig+0x244>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee6:	f7fb f91b 	bl	8002120 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eee:	f7fb f917 	bl	8002120 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e1a8      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f00:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0c:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4925      	ldr	r1, [pc, #148]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]
 8006f20:	e015      	b.n	8006f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_RCC_OscConfig+0x244>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fb f8fa 	bl	8002120 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f30:	f7fb f8f6 	bl	8002120 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e187      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d036      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <HAL_RCC_OscConfig+0x248>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f68:	f7fb f8da 	bl	8002120 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f70:	f7fb f8d6 	bl	8002120 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e167      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <HAL_RCC_OscConfig+0x240>)
 8006f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0x200>
 8006f8e:	e01b      	b.n	8006fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <HAL_RCC_OscConfig+0x248>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f96:	f7fb f8c3 	bl	8002120 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f9c:	e00e      	b.n	8006fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f9e:	f7fb f8bf 	bl	8002120 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d907      	bls.n	8006fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e150      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	42470000 	.word	0x42470000
 8006fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fbc:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1ea      	bne.n	8006f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8097 	beq.w	8007104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fda:	4b81      	ldr	r3, [pc, #516]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60bb      	str	r3, [r7, #8]
 8006fea:	4b7d      	ldr	r3, [pc, #500]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a7c      	ldr	r2, [pc, #496]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8006ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff6:	4b7a      	ldr	r3, [pc, #488]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007006:	4b77      	ldr	r3, [pc, #476]	; (80071e4 <HAL_RCC_OscConfig+0x474>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d118      	bne.n	8007044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007012:	4b74      	ldr	r3, [pc, #464]	; (80071e4 <HAL_RCC_OscConfig+0x474>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a73      	ldr	r2, [pc, #460]	; (80071e4 <HAL_RCC_OscConfig+0x474>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800701e:	f7fb f87f 	bl	8002120 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007026:	f7fb f87b 	bl	8002120 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e10c      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007038:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <HAL_RCC_OscConfig+0x474>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d106      	bne.n	800705a <HAL_RCC_OscConfig+0x2ea>
 800704c:	4b64      	ldr	r3, [pc, #400]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	4a63      	ldr	r2, [pc, #396]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	6713      	str	r3, [r2, #112]	; 0x70
 8007058:	e01c      	b.n	8007094 <HAL_RCC_OscConfig+0x324>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b05      	cmp	r3, #5
 8007060:	d10c      	bne.n	800707c <HAL_RCC_OscConfig+0x30c>
 8007062:	4b5f      	ldr	r3, [pc, #380]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a5e      	ldr	r2, [pc, #376]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007068:	f043 0304 	orr.w	r3, r3, #4
 800706c:	6713      	str	r3, [r2, #112]	; 0x70
 800706e:	4b5c      	ldr	r3, [pc, #368]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	4a5b      	ldr	r2, [pc, #364]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007074:	f043 0301 	orr.w	r3, r3, #1
 8007078:	6713      	str	r3, [r2, #112]	; 0x70
 800707a:	e00b      	b.n	8007094 <HAL_RCC_OscConfig+0x324>
 800707c:	4b58      	ldr	r3, [pc, #352]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	4a57      	ldr	r2, [pc, #348]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007082:	f023 0301 	bic.w	r3, r3, #1
 8007086:	6713      	str	r3, [r2, #112]	; 0x70
 8007088:	4b55      	ldr	r3, [pc, #340]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 800708a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708c:	4a54      	ldr	r2, [pc, #336]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 800708e:	f023 0304 	bic.w	r3, r3, #4
 8007092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fb f840 	bl	8002120 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a4:	f7fb f83c 	bl	8002120 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e0cb      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ba:	4b49      	ldr	r3, [pc, #292]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0ee      	beq.n	80070a4 <HAL_RCC_OscConfig+0x334>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c8:	f7fb f82a 	bl	8002120 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d0:	f7fb f826 	bl	8002120 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	; 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e0b5      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e6:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1ee      	bne.n	80070d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d105      	bne.n	8007104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f8:	4b39      	ldr	r3, [pc, #228]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 80070fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80a1 	beq.w	8007250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800710e:	4b34      	ldr	r3, [pc, #208]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
 8007116:	2b08      	cmp	r3, #8
 8007118:	d05c      	beq.n	80071d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d141      	bne.n	80071a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007122:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <HAL_RCC_OscConfig+0x478>)
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007128:	f7fa fffa 	bl	8002120 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007130:	f7fa fff6 	bl	8002120 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e087      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f0      	bne.n	8007130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69da      	ldr	r2, [r3, #28]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	019b      	lsls	r3, r3, #6
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	085b      	lsrs	r3, r3, #1
 8007166:	3b01      	subs	r3, #1
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	491b      	ldr	r1, [pc, #108]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 8007174:	4313      	orrs	r3, r2
 8007176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007178:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <HAL_RCC_OscConfig+0x478>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717e:	f7fa ffcf 	bl	8002120 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007184:	e008      	b.n	8007198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007186:	f7fa ffcb 	bl	8002120 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e05c      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0f0      	beq.n	8007186 <HAL_RCC_OscConfig+0x416>
 80071a4:	e054      	b.n	8007250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a6:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <HAL_RCC_OscConfig+0x478>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7fa ffb8 	bl	8002120 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071b4:	f7fa ffb4 	bl	8002120 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e045      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCC_OscConfig+0x470>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0x444>
 80071d2:	e03d      	b.n	8007250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d107      	bne.n	80071ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e038      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
 80071e0:	40023800 	.word	0x40023800
 80071e4:	40007000 	.word	0x40007000
 80071e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <HAL_RCC_OscConfig+0x4ec>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d028      	beq.n	800724c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007204:	429a      	cmp	r2, r3
 8007206:	d121      	bne.n	800724c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d11a      	bne.n	800724c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800721c:	4013      	ands	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007224:	4293      	cmp	r3, r2
 8007226:	d111      	bne.n	800724c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	3b01      	subs	r3, #1
 8007236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007238:	429a      	cmp	r2, r3
 800723a:	d107      	bne.n	800724c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007248:	429a      	cmp	r2, r3
 800724a:	d001      	beq.n	8007250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e000      	b.n	8007252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800

08007260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0cc      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007274:	4b68      	ldr	r3, [pc, #416]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d90c      	bls.n	800729c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007282:	4b65      	ldr	r3, [pc, #404]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b63      	ldr	r3, [pc, #396]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e0b8      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d020      	beq.n	80072ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b4:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	4a58      	ldr	r2, [pc, #352]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072cc:	4b53      	ldr	r3, [pc, #332]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4a52      	ldr	r2, [pc, #328]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d8:	4b50      	ldr	r3, [pc, #320]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	494d      	ldr	r1, [pc, #308]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d044      	beq.n	8007380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d107      	bne.n	800730e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fe:	4b47      	ldr	r3, [pc, #284]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d119      	bne.n	800733e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e07f      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d003      	beq.n	800731e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800731a:	2b03      	cmp	r3, #3
 800731c:	d107      	bne.n	800732e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731e:	4b3f      	ldr	r3, [pc, #252]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e06f      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732e:	4b3b      	ldr	r3, [pc, #236]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e067      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f023 0203 	bic.w	r2, r3, #3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	4934      	ldr	r1, [pc, #208]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	4313      	orrs	r3, r2
 800734e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007350:	f7fa fee6 	bl	8002120 <HAL_GetTick>
 8007354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007356:	e00a      	b.n	800736e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007358:	f7fa fee2 	bl	8002120 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	; 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e04f      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736e:	4b2b      	ldr	r3, [pc, #172]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 020c 	and.w	r2, r3, #12
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	429a      	cmp	r2, r3
 800737e:	d1eb      	bne.n	8007358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007380:	4b25      	ldr	r3, [pc, #148]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d20c      	bcs.n	80073a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738e:	4b22      	ldr	r3, [pc, #136]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007396:	4b20      	ldr	r3, [pc, #128]	; (8007418 <HAL_RCC_ClockConfig+0x1b8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d001      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e032      	b.n	800740e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d008      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b4:	4b19      	ldr	r3, [pc, #100]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4916      	ldr	r1, [pc, #88]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	490e      	ldr	r1, [pc, #56]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073e6:	f000 f821 	bl	800742c <HAL_RCC_GetSysClockFreq>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	091b      	lsrs	r3, r3, #4
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	490a      	ldr	r1, [pc, #40]	; (8007420 <HAL_RCC_ClockConfig+0x1c0>)
 80073f8:	5ccb      	ldrb	r3, [r1, r3]
 80073fa:	fa22 f303 	lsr.w	r3, r2, r3
 80073fe:	4a09      	ldr	r2, [pc, #36]	; (8007424 <HAL_RCC_ClockConfig+0x1c4>)
 8007400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <HAL_RCC_ClockConfig+0x1c8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f7fa fb60 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40023c00 	.word	0x40023c00
 800741c:	40023800 	.word	0x40023800
 8007420:	0800fed4 	.word	0x0800fed4
 8007424:	20000038 	.word	0x20000038
 8007428:	20000040 	.word	0x20000040

0800742c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800742c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007430:	b094      	sub	sp, #80	; 0x50
 8007432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	647b      	str	r3, [r7, #68]	; 0x44
 8007438:	2300      	movs	r3, #0
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743c:	2300      	movs	r3, #0
 800743e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007444:	4b79      	ldr	r3, [pc, #484]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 030c 	and.w	r3, r3, #12
 800744c:	2b08      	cmp	r3, #8
 800744e:	d00d      	beq.n	800746c <HAL_RCC_GetSysClockFreq+0x40>
 8007450:	2b08      	cmp	r3, #8
 8007452:	f200 80e1 	bhi.w	8007618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_RCC_GetSysClockFreq+0x34>
 800745a:	2b04      	cmp	r3, #4
 800745c:	d003      	beq.n	8007466 <HAL_RCC_GetSysClockFreq+0x3a>
 800745e:	e0db      	b.n	8007618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007460:	4b73      	ldr	r3, [pc, #460]	; (8007630 <HAL_RCC_GetSysClockFreq+0x204>)
 8007462:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007464:	e0db      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007466:	4b73      	ldr	r3, [pc, #460]	; (8007634 <HAL_RCC_GetSysClockFreq+0x208>)
 8007468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800746a:	e0d8      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800746c:	4b6f      	ldr	r3, [pc, #444]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007474:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007476:	4b6d      	ldr	r3, [pc, #436]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d063      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007482:	4b6a      	ldr	r3, [pc, #424]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	2200      	movs	r2, #0
 800748a:	63bb      	str	r3, [r7, #56]	; 0x38
 800748c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007494:	633b      	str	r3, [r7, #48]	; 0x30
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
 800749a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	f04f 0000 	mov.w	r0, #0
 80074a6:	f04f 0100 	mov.w	r1, #0
 80074aa:	0159      	lsls	r1, r3, #5
 80074ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074b0:	0150      	lsls	r0, r2, #5
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4621      	mov	r1, r4
 80074b8:	1a51      	subs	r1, r2, r1
 80074ba:	6139      	str	r1, [r7, #16]
 80074bc:	4629      	mov	r1, r5
 80074be:	eb63 0301 	sbc.w	r3, r3, r1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d0:	4659      	mov	r1, fp
 80074d2:	018b      	lsls	r3, r1, #6
 80074d4:	4651      	mov	r1, sl
 80074d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074da:	4651      	mov	r1, sl
 80074dc:	018a      	lsls	r2, r1, #6
 80074de:	4651      	mov	r1, sl
 80074e0:	ebb2 0801 	subs.w	r8, r2, r1
 80074e4:	4659      	mov	r1, fp
 80074e6:	eb63 0901 	sbc.w	r9, r3, r1
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074fe:	4690      	mov	r8, r2
 8007500:	4699      	mov	r9, r3
 8007502:	4623      	mov	r3, r4
 8007504:	eb18 0303 	adds.w	r3, r8, r3
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	462b      	mov	r3, r5
 800750c:	eb49 0303 	adc.w	r3, r9, r3
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800751e:	4629      	mov	r1, r5
 8007520:	024b      	lsls	r3, r1, #9
 8007522:	4621      	mov	r1, r4
 8007524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007528:	4621      	mov	r1, r4
 800752a:	024a      	lsls	r2, r1, #9
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007532:	2200      	movs	r2, #0
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800753c:	f7f8 fe44 	bl	80001c8 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4613      	mov	r3, r2
 8007546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007548:	e058      	b.n	80075fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800754a:	4b38      	ldr	r3, [pc, #224]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	099b      	lsrs	r3, r3, #6
 8007550:	2200      	movs	r2, #0
 8007552:	4618      	mov	r0, r3
 8007554:	4611      	mov	r1, r2
 8007556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800755a:	623b      	str	r3, [r7, #32]
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
 8007560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	f04f 0000 	mov.w	r0, #0
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	0159      	lsls	r1, r3, #5
 8007572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007576:	0150      	lsls	r0, r2, #5
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4641      	mov	r1, r8
 800757e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb63 0b01 	sbc.w	fp, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800759c:	ebb2 040a 	subs.w	r4, r2, sl
 80075a0:	eb63 050b 	sbc.w	r5, r3, fp
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	00eb      	lsls	r3, r5, #3
 80075ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075b2:	00e2      	lsls	r2, r4, #3
 80075b4:	4614      	mov	r4, r2
 80075b6:	461d      	mov	r5, r3
 80075b8:	4643      	mov	r3, r8
 80075ba:	18e3      	adds	r3, r4, r3
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	464b      	mov	r3, r9
 80075c0:	eb45 0303 	adc.w	r3, r5, r3
 80075c4:	607b      	str	r3, [r7, #4]
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075d2:	4629      	mov	r1, r5
 80075d4:	028b      	lsls	r3, r1, #10
 80075d6:	4621      	mov	r1, r4
 80075d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075dc:	4621      	mov	r1, r4
 80075de:	028a      	lsls	r2, r1, #10
 80075e0:	4610      	mov	r0, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e6:	2200      	movs	r2, #0
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	61fa      	str	r2, [r7, #28]
 80075ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f0:	f7f8 fdea 	bl	80001c8 <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4613      	mov	r3, r2
 80075fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075fc:	4b0b      	ldr	r3, [pc, #44]	; (800762c <HAL_RCC_GetSysClockFreq+0x200>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	3301      	adds	r3, #1
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800760c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800760e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007616:	e002      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCC_GetSysClockFreq+0x204>)
 800761a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800761c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800761e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007620:	4618      	mov	r0, r3
 8007622:	3750      	adds	r7, #80	; 0x50
 8007624:	46bd      	mov	sp, r7
 8007626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800762a:	bf00      	nop
 800762c:	40023800 	.word	0x40023800
 8007630:	00f42400 	.word	0x00f42400
 8007634:	007a1200 	.word	0x007a1200

08007638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800763c:	4b03      	ldr	r3, [pc, #12]	; (800764c <HAL_RCC_GetHCLKFreq+0x14>)
 800763e:	681b      	ldr	r3, [r3, #0]
}
 8007640:	4618      	mov	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000038 	.word	0x20000038

08007650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007654:	f7ff fff0 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	0a9b      	lsrs	r3, r3, #10
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	4903      	ldr	r1, [pc, #12]	; (8007674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800766c:	4618      	mov	r0, r3
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40023800 	.word	0x40023800
 8007674:	0800fee4 	.word	0x0800fee4

08007678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800767c:	f7ff ffdc 	bl	8007638 <HAL_RCC_GetHCLKFreq>
 8007680:	4602      	mov	r2, r0
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	0b5b      	lsrs	r3, r3, #13
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	4903      	ldr	r1, [pc, #12]	; (800769c <HAL_RCC_GetPCLK2Freq+0x24>)
 800768e:	5ccb      	ldrb	r3, [r1, r3]
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40023800 	.word	0x40023800
 800769c:	0800fee4 	.word	0x0800fee4

080076a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220f      	movs	r2, #15
 80076ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_RCC_GetClockConfig+0x5c>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0203 	and.w	r2, r3, #3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076bc:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <HAL_RCC_GetClockConfig+0x5c>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <HAL_RCC_GetClockConfig+0x5c>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <HAL_RCC_GetClockConfig+0x5c>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	08db      	lsrs	r3, r3, #3
 80076da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <HAL_RCC_GetClockConfig+0x60>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0207 	and.w	r2, r3, #7
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	601a      	str	r2, [r3, #0]
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40023800 	.word	0x40023800
 8007700:	40023c00 	.word	0x40023c00

08007704 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007728:	2b00      	cmp	r3, #0
 800772a:	d035      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800772c:	4b62      	ldr	r3, [pc, #392]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007732:	f7fa fcf5 	bl	8002120 <HAL_GetTick>
 8007736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007738:	e008      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800773a:	f7fa fcf1 	bl	8002120 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d901      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e0b0      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800774c:	4b5b      	ldr	r3, [pc, #364]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f0      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	019a      	lsls	r2, r3, #6
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	071b      	lsls	r3, r3, #28
 8007764:	4955      	ldr	r1, [pc, #340]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007766:	4313      	orrs	r3, r2
 8007768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800776c:	4b52      	ldr	r3, [pc, #328]	; (80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800776e:	2201      	movs	r2, #1
 8007770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007772:	f7fa fcd5 	bl	8002120 <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007778:	e008      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800777a:	f7fa fcd1 	bl	8002120 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e090      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800778c:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8083 	beq.w	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	4b44      	ldr	r3, [pc, #272]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	4a43      	ldr	r2, [pc, #268]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	6413      	str	r3, [r2, #64]	; 0x40
 80077b6:	4b41      	ldr	r3, [pc, #260]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077c2:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a3e      	ldr	r2, [pc, #248]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077ce:	f7fa fca7 	bl	8002120 <HAL_GetTick>
 80077d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077d4:	e008      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077d6:	f7fa fca3 	bl	8002120 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e062      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077e8:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0f0      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077f4:	4b31      	ldr	r3, [pc, #196]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	d028      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007812:	4b2a      	ldr	r3, [pc, #168]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800781a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800781c:	4b29      	ldr	r3, [pc, #164]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800781e:	2201      	movs	r2, #1
 8007820:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007822:	4b28      	ldr	r3, [pc, #160]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007828:	4a24      	ldr	r2, [pc, #144]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800782e:	4b23      	ldr	r3, [pc, #140]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d114      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800783a:	f7fa fc71 	bl	8002120 <HAL_GetTick>
 800783e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007840:	e00a      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fa fc6d 	bl	8002120 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e02a      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007858:	4b18      	ldr	r3, [pc, #96]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0ee      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007870:	d10d      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007886:	490d      	ldr	r1, [pc, #52]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]
 800788c:	e005      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800788e:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007894:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007898:	6093      	str	r3, [r2, #8]
 800789a:	4b08      	ldr	r3, [pc, #32]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800789c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078a6:	4905      	ldr	r1, [pc, #20]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	42470068 	.word	0x42470068
 80078bc:	40023800 	.word	0x40023800
 80078c0:	40007000 	.word	0x40007000
 80078c4:	42470e40 	.word	0x42470e40

080078c8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2203      	movs	r2, #3
 80078d4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80078d6:	4b11      	ldr	r3, [pc, #68]	; (800791c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80078d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078dc:	099b      	lsrs	r3, r3, #6
 80078de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80078e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ec:	0f1b      	lsrs	r3, r3, #28
 80078ee:	f003 0207 	and.w	r2, r3, #7
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80078fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007900:	4b06      	ldr	r3, [pc, #24]	; (800791c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007910:	bf00      	nop
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	40023800 	.word	0x40023800

08007920 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d13e      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d12f      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007956:	617b      	str	r3, [r7, #20]
          break;
 8007958:	e02f      	b.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800795a:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007966:	d108      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007968:	4b18      	ldr	r3, [pc, #96]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007972:	fbb2 f3f3 	udiv	r3, r2, r3
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	e007      	b.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800797a:	4b14      	ldr	r3, [pc, #80]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800798a:	4b10      	ldr	r3, [pc, #64]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800798c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007990:	099b      	lsrs	r3, r3, #6
 8007992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	fb02 f303 	mul.w	r3, r2, r3
 800799c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80079a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a4:	0f1b      	lsrs	r3, r3, #28
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	617b      	str	r3, [r7, #20]
          break;
 80079b2:	e002      	b.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
          break;
 80079b8:	bf00      	nop
        }
      }
      break;
 80079ba:	bf00      	nop
    }
  }
  return frequency;
 80079bc:	697b      	ldr	r3, [r7, #20]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800
 80079d0:	00bb8000 	.word	0x00bb8000
 80079d4:	007a1200 	.word	0x007a1200
 80079d8:	00f42400 	.word	0x00f42400

080079dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e041      	b.n	8007a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f839 	bl	8007a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f000 f9d8 	bl	8007dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d001      	beq.n	8007aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e04e      	b.n	8007b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0201 	orr.w	r2, r2, #1
 8007abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a23      	ldr	r2, [pc, #140]	; (8007b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d022      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d01d      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	; (8007b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d018      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00e      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d009      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d004      	beq.n	8007b10 <HAL_TIM_Base_Start_IT+0x80>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	; (8007b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d111      	bne.n	8007b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b06      	cmp	r3, #6
 8007b20:	d010      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f042 0201 	orr.w	r2, r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b32:	e007      	b.n	8007b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40000400 	.word	0x40000400
 8007b5c:	40000800 	.word	0x40000800
 8007b60:	40000c00 	.word	0x40000c00
 8007b64:	40010400 	.word	0x40010400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	40001800 	.word	0x40001800

08007b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d122      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d11b      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f06f 0202 	mvn.w	r2, #2
 8007b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f8ee 	bl	8007d94 <HAL_TIM_IC_CaptureCallback>
 8007bb8:	e005      	b.n	8007bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8e0 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f8f1 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d122      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d11b      	bne.n	8007c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0204 	mvn.w	r2, #4
 8007bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8c4 	bl	8007d94 <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8b6 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8c7 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	d122      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d11b      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0208 	mvn.w	r2, #8
 8007c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2204      	movs	r2, #4
 8007c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f89a 	bl	8007d94 <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f88c 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f89d 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d122      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0310 	and.w	r3, r3, #16
 8007c8c:	2b10      	cmp	r3, #16
 8007c8e:	d11b      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0210 	mvn.w	r2, #16
 8007c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f870 	bl	8007d94 <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f862 	bl	8007d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f873 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0201 	mvn.w	r2, #1
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 fd84 	bl	80017fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfe:	2b80      	cmp	r3, #128	; 0x80
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f902 	bl	8007f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d10e      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d107      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f838 	bl	8007dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d10e      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d107      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0220 	mvn.w	r2, #32
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8cc 	bl	8007f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a40      	ldr	r2, [pc, #256]	; (8007ee4 <TIM_Base_SetConfig+0x114>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d013      	beq.n	8007e10 <TIM_Base_SetConfig+0x40>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dee:	d00f      	beq.n	8007e10 <TIM_Base_SetConfig+0x40>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a3d      	ldr	r2, [pc, #244]	; (8007ee8 <TIM_Base_SetConfig+0x118>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00b      	beq.n	8007e10 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a3c      	ldr	r2, [pc, #240]	; (8007eec <TIM_Base_SetConfig+0x11c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d007      	beq.n	8007e10 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <TIM_Base_SetConfig+0x120>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3a      	ldr	r2, [pc, #232]	; (8007ef4 <TIM_Base_SetConfig+0x124>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d108      	bne.n	8007e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a2f      	ldr	r2, [pc, #188]	; (8007ee4 <TIM_Base_SetConfig+0x114>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02b      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e30:	d027      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2c      	ldr	r2, [pc, #176]	; (8007ee8 <TIM_Base_SetConfig+0x118>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d023      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2b      	ldr	r2, [pc, #172]	; (8007eec <TIM_Base_SetConfig+0x11c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01f      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <TIM_Base_SetConfig+0x120>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d01b      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a29      	ldr	r2, [pc, #164]	; (8007ef4 <TIM_Base_SetConfig+0x124>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d017      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a28      	ldr	r2, [pc, #160]	; (8007ef8 <TIM_Base_SetConfig+0x128>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a27      	ldr	r2, [pc, #156]	; (8007efc <TIM_Base_SetConfig+0x12c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00f      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <TIM_Base_SetConfig+0x130>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00b      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a25      	ldr	r2, [pc, #148]	; (8007f04 <TIM_Base_SetConfig+0x134>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d007      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a24      	ldr	r2, [pc, #144]	; (8007f08 <TIM_Base_SetConfig+0x138>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d003      	beq.n	8007e82 <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a23      	ldr	r2, [pc, #140]	; (8007f0c <TIM_Base_SetConfig+0x13c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d108      	bne.n	8007e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a0a      	ldr	r2, [pc, #40]	; (8007ee4 <TIM_Base_SetConfig+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_Base_SetConfig+0xf8>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <TIM_Base_SetConfig+0x124>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d103      	bne.n	8007ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	615a      	str	r2, [r3, #20]
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40010400 	.word	0x40010400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800
 8007f04:	40001800 	.word	0x40001800
 8007f08:	40001c00 	.word	0x40001c00
 8007f0c:	40002000 	.word	0x40002000

08007f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f38:	b084      	sub	sp, #16
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	f107 001c 	add.w	r0, r7, #28
 8007f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d122      	bne.n	8007f96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d105      	bne.n	8007f8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9a0 	bl	80082d0 <USB_CoreReset>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
 8007f94:	e01a      	b.n	8007fcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f994 	bl	80082d0 <USB_CoreReset>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8007fbe:	e005      	b.n	8007fcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d10b      	bne.n	8007fea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f043 0206 	orr.w	r2, r3, #6
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f043 0220 	orr.w	r2, r3, #32
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff6:	b004      	add	sp, #16
 8007ff8:	4770      	bx	lr

08007ffa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f043 0201 	orr.w	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f023 0201 	bic.w	r2, r3, #1
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d115      	bne.n	800808c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800806c:	2001      	movs	r0, #1
 800806e:	f7fa f863 	bl	8002138 <HAL_Delay>
      ms++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f91a 	bl	80082b2 <USB_GetMode>
 800807e:	4603      	mov	r3, r0
 8008080:	2b01      	cmp	r3, #1
 8008082:	d01e      	beq.n	80080c2 <USB_SetCurrentMode+0x84>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b31      	cmp	r3, #49	; 0x31
 8008088:	d9f0      	bls.n	800806c <USB_SetCurrentMode+0x2e>
 800808a:	e01a      	b.n	80080c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d115      	bne.n	80080be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800809e:	2001      	movs	r0, #1
 80080a0:	f7fa f84a 	bl	8002138 <HAL_Delay>
      ms++;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	3301      	adds	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f901 	bl	80082b2 <USB_GetMode>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <USB_SetCurrentMode+0x84>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b31      	cmp	r3, #49	; 0x31
 80080ba:	d9f0      	bls.n	800809e <USB_SetCurrentMode+0x60>
 80080bc:	e001      	b.n	80080c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e005      	b.n	80080ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b32      	cmp	r3, #50	; 0x32
 80080c6:	d101      	bne.n	80080cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	019b      	lsls	r3, r3, #6
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	4a08      	ldr	r2, [pc, #32]	; (800811c <USB_FlushTxFifo+0x44>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d901      	bls.n	8008102 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e006      	b.n	8008110 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b20      	cmp	r3, #32
 800810c:	d0f1      	beq.n	80080f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	00030d40 	.word	0x00030d40

08008120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2210      	movs	r2, #16
 8008130:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3301      	adds	r3, #1
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	4a08      	ldr	r2, [pc, #32]	; (800815c <USB_FlushRxFifo+0x3c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d901      	bls.n	8008142 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e006      	b.n	8008150 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f003 0310 	and.w	r3, r3, #16
 800814a:	2b10      	cmp	r3, #16
 800814c:	d0f1      	beq.n	8008132 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	00030d40 	.word	0x00030d40

08008160 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4611      	mov	r1, r2
 800816c:	461a      	mov	r2, r3
 800816e:	460b      	mov	r3, r1
 8008170:	71fb      	strb	r3, [r7, #7]
 8008172:	4613      	mov	r3, r2
 8008174:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800817e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d123      	bne.n	80081ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008186:	88bb      	ldrh	r3, [r7, #4]
 8008188:	3303      	adds	r3, #3
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	e018      	b.n	80081c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	031a      	lsls	r2, r3, #12
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	4413      	add	r3, r2
 800819c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a0:	461a      	mov	r2, r3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	3301      	adds	r3, #1
 80081ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	3301      	adds	r3, #1
 80081b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	3301      	adds	r3, #1
 80081be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d3e2      	bcc.n	8008194 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3724      	adds	r7, #36	; 0x24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081dc:	b480      	push	{r7}
 80081de:	b08b      	sub	sp, #44	; 0x2c
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	089b      	lsrs	r3, r3, #2
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	f003 0303 	and.w	r3, r3, #3
 8008200:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008202:	2300      	movs	r3, #0
 8008204:	623b      	str	r3, [r7, #32]
 8008206:	e014      	b.n	8008232 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	601a      	str	r2, [r3, #0]
    pDest++;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	3301      	adds	r3, #1
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	3301      	adds	r3, #1
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	3301      	adds	r3, #1
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	3301      	adds	r3, #1
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	3301      	adds	r3, #1
 8008230:	623b      	str	r3, [r7, #32]
 8008232:	6a3a      	ldr	r2, [r7, #32]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	429a      	cmp	r2, r3
 8008238:	d3e6      	bcc.n	8008208 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800823a:	8bfb      	ldrh	r3, [r7, #30]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01e      	beq.n	800827e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824a:	461a      	mov	r2, r3
 800824c:	f107 0310 	add.w	r3, r7, #16
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	fa22 f303 	lsr.w	r3, r2, r3
 8008260:	b2da      	uxtb	r2, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	701a      	strb	r2, [r3, #0]
      i++;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	3301      	adds	r3, #1
 800826a:	623b      	str	r3, [r7, #32]
      pDest++;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	3301      	adds	r3, #1
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008272:	8bfb      	ldrh	r3, [r7, #30]
 8008274:	3b01      	subs	r3, #1
 8008276:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008278:	8bfb      	ldrh	r3, [r7, #30]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1ea      	bne.n	8008254 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008280:	4618      	mov	r0, r3
 8008282:	372c      	adds	r7, #44	; 0x2c
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4013      	ands	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0301 	and.w	r3, r3, #1
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3301      	adds	r3, #1
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	4a13      	ldr	r2, [pc, #76]	; (8008330 <USB_CoreReset+0x60>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d901      	bls.n	80082ec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e01a      	b.n	8008322 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	daf3      	bge.n	80082dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	f043 0201 	orr.w	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3301      	adds	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	4a09      	ldr	r2, [pc, #36]	; (8008330 <USB_CoreReset+0x60>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d901      	bls.n	8008314 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e006      	b.n	8008322 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b01      	cmp	r3, #1
 800831e:	d0f1      	beq.n	8008304 <USB_CoreReset+0x34>

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	00030d40 	.word	0x00030d40

08008334 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008334:	b084      	sub	sp, #16
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	f107 001c 	add.w	r0, r7, #28
 8008342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008350:	461a      	mov	r2, r3
 8008352:	2300      	movs	r3, #0
 8008354:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	2b01      	cmp	r3, #1
 800838a:	d10a      	bne.n	80083a2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800839a:	f043 0304 	orr.w	r3, r3, #4
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e014      	b.n	80083cc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083b0:	f023 0304 	bic.w	r3, r3, #4
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e009      	b.n	80083cc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083c6:	f023 0304 	bic.w	r3, r3, #4
 80083ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80083cc:	2110      	movs	r1, #16
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fe82 	bl	80080d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fea3 	bl	8008120 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	e015      	b.n	800840c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ec:	461a      	mov	r2, r3
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3301      	adds	r3, #1
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d3e5      	bcc.n	80083e0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f04f 32ff 	mov.w	r2, #4294967295
 8008420:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008434:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a13      	ldr	r2, [pc, #76]	; (8008488 <USB_HostInit+0x154>)
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a13      	ldr	r2, [pc, #76]	; (800848c <USB_HostInit+0x158>)
 8008440:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008444:	e009      	b.n	800845a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2280      	movs	r2, #128	; 0x80
 800844a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a10      	ldr	r2, [pc, #64]	; (8008490 <USB_HostInit+0x15c>)
 8008450:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a0f      	ldr	r2, [pc, #60]	; (8008494 <USB_HostInit+0x160>)
 8008456:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f043 0210 	orr.w	r2, r3, #16
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <USB_HostInit+0x164>)
 8008472:	4313      	orrs	r3, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008484:	b004      	add	sp, #16
 8008486:	4770      	bx	lr
 8008488:	01000200 	.word	0x01000200
 800848c:	00e00300 	.word	0x00e00300
 8008490:	00600080 	.word	0x00600080
 8008494:	004000e0 	.word	0x004000e0
 8008498:	a3200008 	.word	0xa3200008

0800849c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	78fb      	ldrb	r3, [r7, #3]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d107      	bne.n	80084ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e4:	461a      	mov	r2, r3
 80084e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80084ea:	6053      	str	r3, [r2, #4]
 80084ec:	e009      	b.n	8008502 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d106      	bne.n	8008502 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084fa:	461a      	mov	r2, r3
 80084fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8008500:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008530:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800853a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800853e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008540:	2064      	movs	r0, #100	; 0x64
 8008542:	f7f9 fdf9 	bl	8002138 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800854e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008552:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008554:	200a      	movs	r0, #10
 8008556:	f7f9 fdef 	bl	8002138 <HAL_Delay>

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008588:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <USB_DriveVbus+0x44>
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d106      	bne.n	80085a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b2:	d109      	bne.n	80085c8 <USB_DriveVbus+0x64>
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	0c5b      	lsrs	r3, r3, #17
 80085f4:	f003 0303 	and.w	r3, r3, #3
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	b29b      	uxth	r3, r3
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	4608      	mov	r0, r1
 8008632:	4611      	mov	r1, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4603      	mov	r3, r0
 8008638:	70fb      	strb	r3, [r7, #3]
 800863a:	460b      	mov	r3, r1
 800863c:	70bb      	strb	r3, [r7, #2]
 800863e:	4613      	mov	r3, r2
 8008640:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008656:	461a      	mov	r2, r3
 8008658:	f04f 33ff 	mov.w	r3, #4294967295
 800865c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800865e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008662:	2b03      	cmp	r3, #3
 8008664:	d87e      	bhi.n	8008764 <USB_HC_Init+0x13c>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <USB_HC_Init+0x44>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	0800867d 	.word	0x0800867d
 8008670:	08008727 	.word	0x08008727
 8008674:	0800867d 	.word	0x0800867d
 8008678:	080086e9 	.word	0x080086e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008688:	461a      	mov	r2, r3
 800868a:	f240 439d 	movw	r3, #1181	; 0x49d
 800868e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008694:	2b00      	cmp	r3, #0
 8008696:	da10      	bge.n	80086ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80086b8:	e057      	b.n	800876a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d051      	beq.n	800876a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	015a      	lsls	r2, r3, #5
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086e4:	60d3      	str	r3, [r2, #12]
      break;
 80086e6:	e040      	b.n	800876a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f4:	461a      	mov	r2, r3
 80086f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80086fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da34      	bge.n	800876e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	4413      	add	r3, r2
 800870c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	0151      	lsls	r1, r2, #5
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	440a      	add	r2, r1
 800871a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800871e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008722:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008724:	e023      	b.n	800876e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	461a      	mov	r2, r3
 8008734:	f240 2325 	movw	r3, #549	; 0x225
 8008738:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800873a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da17      	bge.n	8008772 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	440a      	add	r2, r1
 8008758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008760:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008762:	e006      	b.n	8008772 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	77fb      	strb	r3, [r7, #31]
      break;
 8008768:	e004      	b.n	8008774 <USB_HC_Init+0x14c>
      break;
 800876a:	bf00      	nop
 800876c:	e002      	b.n	8008774 <USB_HC_Init+0x14c>
      break;
 800876e:	bf00      	nop
 8008770:	e000      	b.n	8008774 <USB_HC_Init+0x14c>
      break;
 8008772:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	2101      	movs	r1, #1
 8008784:	fa01 f303 	lsl.w	r3, r1, r3
 8008788:	6939      	ldr	r1, [r7, #16]
 800878a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800878e:	4313      	orrs	r3, r2
 8008790:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800879e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da03      	bge.n	80087ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80087a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	e001      	b.n	80087b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff ff0f 	bl	80085d6 <USB_GetHostSpeed>
 80087b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80087ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d106      	bne.n	80087d0 <USB_HC_Init+0x1a8>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d003      	beq.n	80087d0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80087c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e001      	b.n	80087d4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087d4:	787b      	ldrb	r3, [r7, #1]
 80087d6:	059b      	lsls	r3, r3, #22
 80087d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087dc:	78bb      	ldrb	r3, [r7, #2]
 80087de:	02db      	lsls	r3, r3, #11
 80087e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087ea:	049b      	lsls	r3, r3, #18
 80087ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80087f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80087f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	0159      	lsls	r1, r3, #5
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	440b      	add	r3, r1
 8008806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008810:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008812:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008816:	2b03      	cmp	r3, #3
 8008818:	d10f      	bne.n	800883a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	0151      	lsls	r1, r2, #5
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	440a      	add	r2, r1
 8008830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008838:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800883a:	7ffb      	ldrb	r3, [r7, #31]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08c      	sub	sp, #48	; 0x30
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800885c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008860:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886a:	2b00      	cmp	r3, #0
 800886c:	d02d      	beq.n	80088ca <USB_HC_StartXfer+0x86>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	791b      	ldrb	r3, [r3, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d129      	bne.n	80088ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d117      	bne.n	80088ac <USB_HC_StartXfer+0x68>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	79db      	ldrb	r3, [r3, #7]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <USB_HC_StartXfer+0x48>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	79db      	ldrb	r3, [r3, #7]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d10f      	bne.n	80088ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	6a3a      	ldr	r2, [r7, #32]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10b      	bne.n	80088ca <USB_HC_StartXfer+0x86>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	795b      	ldrb	r3, [r3, #5]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d107      	bne.n	80088ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	4619      	mov	r1, r3
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fa2f 	bl	8008d24 <USB_DoPing>
      return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e0f8      	b.n	8008abc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d018      	beq.n	8008904 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	8912      	ldrh	r2, [r2, #8]
 80088da:	4413      	add	r3, r2
 80088dc:	3b01      	subs	r3, #1
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	8912      	ldrh	r2, [r2, #8]
 80088e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80088e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088ea:	8b7b      	ldrh	r3, [r7, #26]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d90b      	bls.n	8008908 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80088f0:	8b7b      	ldrh	r3, [r7, #26]
 80088f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	8912      	ldrh	r2, [r2, #8]
 80088fa:	fb03 f202 	mul.w	r2, r3, r2
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	611a      	str	r2, [r3, #16]
 8008902:	e001      	b.n	8008908 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008904:	2301      	movs	r3, #1
 8008906:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	78db      	ldrb	r3, [r3, #3]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d007      	beq.n	8008920 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008910:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	8912      	ldrh	r2, [r2, #8]
 8008916:	fb03 f202 	mul.w	r2, r3, r2
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	611a      	str	r2, [r3, #16]
 800891e:	e003      	b.n	8008928 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008932:	04d9      	lsls	r1, r3, #19
 8008934:	4b63      	ldr	r3, [pc, #396]	; (8008ac4 <USB_HC_StartXfer+0x280>)
 8008936:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008938:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	7a9b      	ldrb	r3, [r3, #10]
 800893e:	075b      	lsls	r3, r3, #29
 8008940:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008944:	69f9      	ldr	r1, [r7, #28]
 8008946:	0148      	lsls	r0, r1, #5
 8008948:	6a39      	ldr	r1, [r7, #32]
 800894a:	4401      	add	r1, r0
 800894c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008950:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008952:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	68d9      	ldr	r1, [r3, #12]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	4413      	add	r3, r2
 8008966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896a:	460a      	mov	r2, r1
 800896c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	bf0c      	ite	eq
 800897e:	2301      	moveq	r3, #1
 8008980:	2300      	movne	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	6a3a      	ldr	r2, [r7, #32]
 800899a:	440a      	add	r2, r1
 800899c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	7e7b      	ldrb	r3, [r7, #25]
 80089b6:	075b      	lsls	r3, r3, #29
 80089b8:	69f9      	ldr	r1, [r7, #28]
 80089ba:	0148      	lsls	r0, r1, #5
 80089bc:	6a39      	ldr	r1, [r7, #32]
 80089be:	4401      	add	r1, r0
 80089c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80089c4:	4313      	orrs	r3, r2
 80089c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	78db      	ldrb	r3, [r3, #3]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	e003      	b.n	80089fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a00:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0e:	461a      	mov	r2, r3
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e04e      	b.n	8008abc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	78db      	ldrb	r3, [r3, #3]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d149      	bne.n	8008aba <USB_HC_StartXfer+0x276>
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d045      	beq.n	8008aba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	79db      	ldrb	r3, [r3, #7]
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d830      	bhi.n	8008a98 <USB_HC_StartXfer+0x254>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USB_HC_StartXfer+0x1f8>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a71 	.word	0x08008a71
 8008a44:	08008a4d 	.word	0x08008a4d
 8008a48:	08008a71 	.word	0x08008a71
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	3303      	adds	r3, #3
 8008a52:	089b      	lsrs	r3, r3, #2
 8008a54:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a56:	8afa      	ldrh	r2, [r7, #22]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d91c      	bls.n	8008a9c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f043 0220 	orr.w	r2, r3, #32
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a6e:	e015      	b.n	8008a9c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	3303      	adds	r3, #3
 8008a76:	089b      	lsrs	r3, r3, #2
 8008a78:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a7a:	8afa      	ldrh	r2, [r7, #22]
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d90a      	bls.n	8008aa0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a96:	e003      	b.n	8008aa0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008a98:	bf00      	nop
 8008a9a:	e002      	b.n	8008aa2 <USB_HC_StartXfer+0x25e>
        break;
 8008a9c:	bf00      	nop
 8008a9e:	e000      	b.n	8008aa2 <USB_HC_StartXfer+0x25e>
        break;
 8008aa0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	68d9      	ldr	r1, [r3, #12]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	785a      	ldrb	r2, [r3, #1]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	9000      	str	r0, [sp, #0]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7ff fb53 	bl	8008160 <USB_WritePacket>
  }

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3728      	adds	r7, #40	; 0x28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	1ff80000 	.word	0x1ff80000

08008ac8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	b29b      	uxth	r3, r3
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b089      	sub	sp, #36	; 0x24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	0c9b      	lsrs	r3, r3, #18
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	0fdb      	lsrs	r3, r3, #31
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d104      	bne.n	8008b44 <USB_HC_Halt+0x5a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e0e8      	b.n	8008d16 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <USB_HC_Halt+0x66>
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d173      	bne.n	8008c38 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	0151      	lsls	r1, r2, #5
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	440a      	add	r2, r1
 8008b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b6e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f040 80cb 	bne.w	8008d14 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d143      	bne.n	8008c12 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ba8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	0151      	lsls	r1, r2, #5
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	440a      	add	r2, r1
 8008be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008be8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	3301      	adds	r3, #1
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bf6:	d81d      	bhi.n	8008c34 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c0e:	d0ec      	beq.n	8008bea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c10:	e080      	b.n	8008d14 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c32:	e06f      	b.n	8008d14 <USB_HC_Halt+0x22a>
            break;
 8008c34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c36:	e06d      	b.n	8008d14 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d143      	bne.n	8008cf0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	0151      	lsls	r1, r2, #5
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	440a      	add	r2, r1
 8008c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cc6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd4:	d81d      	bhi.n	8008d12 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cec:	d0ec      	beq.n	8008cc8 <USB_HC_Halt+0x1de>
 8008cee:	e011      	b.n	8008d14 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	e000      	b.n	8008d14 <USB_HC_Halt+0x22a>
          break;
 8008d12:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3724      	adds	r7, #36	; 0x24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	04da      	lsls	r2, r3, #19
 8008d40:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <USB_DoPing+0x74>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d82:	461a      	mov	r2, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	1ff80000 	.word	0x1ff80000

08008d9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff f935 	bl	800801c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008db2:	2110      	movs	r1, #16
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff f98f 	bl	80080d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f9b0 	bl	8008120 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	e01f      	b.n	8008e06 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ddc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008de4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	3301      	adds	r3, #1
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b0f      	cmp	r3, #15
 8008e0a:	d9dc      	bls.n	8008dc6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	e034      	b.n	8008e7c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e46:	461a      	mov	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e58:	d80c      	bhi.n	8008e74 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e70:	d0ec      	beq.n	8008e4c <USB_StopHost+0xb0>
 8008e72:	e000      	b.n	8008e76 <USB_StopHost+0xda>
        break;
 8008e74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	d9c7      	bls.n	8008e12 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295
 8008e96:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff f8ae 	bl	8007ffa <USB_EnableGlobalInt>

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008eac:	4904      	ldr	r1, [pc, #16]	; (8008ec0 <MX_FATFS_Init+0x18>)
 8008eae:	4805      	ldr	r0, [pc, #20]	; (8008ec4 <MX_FATFS_Init+0x1c>)
 8008eb0:	f006 fa24 	bl	800f2fc <FATFS_LinkDriver>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4b03      	ldr	r3, [pc, #12]	; (8008ec8 <MX_FATFS_Init+0x20>)
 8008eba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20001988 	.word	0x20001988
 8008ec4:	0800fef4 	.word	0x0800fef4
 8008ec8:	20001984 	.word	0x20001984

08008ecc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008ed0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	4619      	mov	r1, r3
 8008f06:	4808      	ldr	r0, [pc, #32]	; (8008f28 <USBH_status+0x34>)
 8008f08:	f000 fe1a 	bl	8009b40 <USBH_MSC_UnitIsReady>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <USBH_status+0x24>
  {
    res = RES_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	e001      	b.n	8008f1c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001df4 	.word	0x20001df4

08008f2c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b094      	sub	sp, #80	; 0x50
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008f42:	7bf9      	ldrb	r1, [r7, #15]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4813      	ldr	r0, [pc, #76]	; (8008f9c <USBH_read+0x70>)
 8008f4e:	f000 fe41 	bl	8009bd4 <USBH_MSC_Read>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <USBH_read+0x34>
  {
    res = RES_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f5e:	e017      	b.n	8008f90 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008f60:	f107 0210 	add.w	r2, r7, #16
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	4619      	mov	r1, r3
 8008f68:	480c      	ldr	r0, [pc, #48]	; (8008f9c <USBH_read+0x70>)
 8008f6a:	f000 fe0f 	bl	8009b8c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008f6e:	7f7b      	ldrb	r3, [r7, #29]
 8008f70:	2b3a      	cmp	r3, #58	; 0x3a
 8008f72:	d005      	beq.n	8008f80 <USBH_read+0x54>
 8008f74:	2b3a      	cmp	r3, #58	; 0x3a
 8008f76:	dc07      	bgt.n	8008f88 <USBH_read+0x5c>
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	d001      	beq.n	8008f80 <USBH_read+0x54>
 8008f7c:	2b28      	cmp	r3, #40	; 0x28
 8008f7e:	d103      	bne.n	8008f88 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008f80:	2303      	movs	r3, #3
 8008f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008f86:	e003      	b.n	8008f90 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008f8e:	bf00      	nop
    }
  }

  return res;
 8008f90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3748      	adds	r7, #72	; 0x48
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20001df4 	.word	0x20001df4

08008fa0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b094      	sub	sp, #80	; 0x50
 8008fa4:	af02      	add	r7, sp, #8
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008fb6:	7bf9      	ldrb	r1, [r7, #15]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	4817      	ldr	r0, [pc, #92]	; (8009020 <USBH_write+0x80>)
 8008fc2:	f000 fe70 	bl	8009ca6 <USBH_MSC_Write>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d103      	bne.n	8008fd4 <USBH_write+0x34>
  {
    res = RES_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fd2:	e01f      	b.n	8009014 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008fd4:	f107 0210 	add.w	r2, r7, #16
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4810      	ldr	r0, [pc, #64]	; (8009020 <USBH_write+0x80>)
 8008fde:	f000 fdd5 	bl	8009b8c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008fe2:	7f7b      	ldrb	r3, [r7, #29]
 8008fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8008fe6:	d00d      	beq.n	8009004 <USBH_write+0x64>
 8008fe8:	2b3a      	cmp	r3, #58	; 0x3a
 8008fea:	dc0f      	bgt.n	800900c <USBH_write+0x6c>
 8008fec:	2b28      	cmp	r3, #40	; 0x28
 8008fee:	d009      	beq.n	8009004 <USBH_write+0x64>
 8008ff0:	2b28      	cmp	r3, #40	; 0x28
 8008ff2:	dc0b      	bgt.n	800900c <USBH_write+0x6c>
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d005      	beq.n	8009004 <USBH_write+0x64>
 8008ff8:	2b27      	cmp	r3, #39	; 0x27
 8008ffa:	d107      	bne.n	800900c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009002:	e007      	b.n	8009014 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009004:	2303      	movs	r3, #3
 8009006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800900a:	e003      	b.n	8009014 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009012:	bf00      	nop
    }
  }

  return res;
 8009014:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009018:	4618      	mov	r0, r3
 800901a:	3748      	adds	r7, #72	; 0x48
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20001df4 	.word	0x20001df4

08009024 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b090      	sub	sp, #64	; 0x40
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	603a      	str	r2, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
 8009030:	460b      	mov	r3, r1
 8009032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800903a:	79bb      	ldrb	r3, [r7, #6]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d852      	bhi.n	80090e6 <USBH_ioctl+0xc2>
 8009040:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <USBH_ioctl+0x24>)
 8009042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009046:	bf00      	nop
 8009048:	08009059 	.word	0x08009059
 800904c:	08009061 	.word	0x08009061
 8009050:	0800908b 	.word	0x0800908b
 8009054:	080090b7 	.word	0x080090b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800905e:	e045      	b.n	80090ec <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009060:	f107 0208 	add.w	r2, r7, #8
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	4619      	mov	r1, r3
 8009068:	4823      	ldr	r0, [pc, #140]	; (80090f8 <USBH_ioctl+0xd4>)
 800906a:	f000 fd8f 	bl	8009b8c <USBH_MSC_GetLUNInfo>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009080:	e034      	b.n	80090ec <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009088:	e030      	b.n	80090ec <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800908a:	f107 0208 	add.w	r2, r7, #8
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	4619      	mov	r1, r3
 8009092:	4819      	ldr	r0, [pc, #100]	; (80090f8 <USBH_ioctl+0xd4>)
 8009094:	f000 fd7a 	bl	8009b8c <USBH_MSC_GetLUNInfo>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d107      	bne.n	80090ae <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800909e:	8a3b      	ldrh	r3, [r7, #16]
 80090a0:	461a      	mov	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80090ac:	e01e      	b.n	80090ec <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80090b4:	e01a      	b.n	80090ec <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80090b6:	f107 0208 	add.w	r2, r7, #8
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	4619      	mov	r1, r3
 80090be:	480e      	ldr	r0, [pc, #56]	; (80090f8 <USBH_ioctl+0xd4>)
 80090c0:	f000 fd64 	bl	8009b8c <USBH_MSC_GetLUNInfo>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80090ca:	8a3b      	ldrh	r3, [r7, #16]
 80090cc:	0a5b      	lsrs	r3, r3, #9
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80090dc:	e006      	b.n	80090ec <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80090e4:	e002      	b.n	80090ec <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80090e6:	2304      	movs	r3, #4
 80090e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80090ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3740      	adds	r7, #64	; 0x40
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20001df4 	.word	0x20001df4

080090fc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b089      	sub	sp, #36	; 0x24
 8009100:	af04      	add	r7, sp, #16
 8009102:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800910a:	7919      	ldrb	r1, [r3, #4]
 800910c:	2350      	movs	r3, #80	; 0x50
 800910e:	2206      	movs	r2, #6
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fc53 	bl	800a9bc <USBH_FindInterface>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	d002      	beq.n	8009126 <USBH_MSC_InterfaceInit+0x2a>
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d901      	bls.n	800912a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	e0ef      	b.n	800930a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fc28 	bl	800a984 <USBH_SelectInterface>
 8009134:	4603      	mov	r3, r0
 8009136:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009138:	7bbb      	ldrb	r3, [r7, #14]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800913e:	2302      	movs	r3, #2
 8009140:	e0e3      	b.n	800930a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009148:	f44f 7080 	mov.w	r0, #256	; 0x100
 800914c:	f006 fd0e 	bl	800fb6c <malloc>
 8009150:	4603      	mov	r3, r0
 8009152:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009164:	2302      	movs	r3, #2
 8009166:	e0d0      	b.n	800930a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800916c:	2100      	movs	r1, #0
 800916e:	68b8      	ldr	r0, [r7, #8]
 8009170:	f006 fd1a 	bl	800fba8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	211a      	movs	r1, #26
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	b25b      	sxtb	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	da16      	bge.n	80091ba <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	211a      	movs	r1, #26
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	4413      	add	r3, r2
 8009198:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800919c:	781a      	ldrb	r2, [r3, #0]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	211a      	movs	r1, #26
 80091a8:	fb01 f303 	mul.w	r3, r1, r3
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091b2:	881a      	ldrh	r2, [r3, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	815a      	strh	r2, [r3, #10]
 80091b8:	e015      	b.n	80091e6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	211a      	movs	r1, #26
 80091c0:	fb01 f303 	mul.w	r3, r1, r3
 80091c4:	4413      	add	r3, r2
 80091c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	211a      	movs	r1, #26
 80091d6:	fb01 f303 	mul.w	r3, r1, r3
 80091da:	4413      	add	r3, r2
 80091dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091e0:	881a      	ldrh	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	211a      	movs	r1, #26
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	4413      	add	r3, r2
 80091f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da16      	bge.n	800922c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	211a      	movs	r1, #26
 8009204:	fb01 f303 	mul.w	r3, r1, r3
 8009208:	4413      	add	r3, r2
 800920a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800920e:	781a      	ldrb	r2, [r3, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	211a      	movs	r1, #26
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009224:	881a      	ldrh	r2, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	815a      	strh	r2, [r3, #10]
 800922a:	e015      	b.n	8009258 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	211a      	movs	r1, #26
 8009232:	fb01 f303 	mul.w	r3, r1, r3
 8009236:	4413      	add	r3, r2
 8009238:	f203 3356 	addw	r3, r3, #854	; 0x356
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	211a      	movs	r1, #26
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	4413      	add	r3, r2
 800924e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	799b      	ldrb	r3, [r3, #6]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 fdc4 	bl	800bdfe <USBH_AllocPipe>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	79db      	ldrb	r3, [r3, #7]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f002 fdba 	bl	800bdfe <USBH_AllocPipe>
 800928a:	4603      	mov	r3, r0
 800928c:	461a      	mov	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fdac 	bl	8009df0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	7959      	ldrb	r1, [r3, #5]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	7998      	ldrb	r0, [r3, #6]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	8912      	ldrh	r2, [r2, #8]
 80092b0:	9202      	str	r2, [sp, #8]
 80092b2:	2202      	movs	r2, #2
 80092b4:	9201      	str	r2, [sp, #4]
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	4623      	mov	r3, r4
 80092ba:	4602      	mov	r2, r0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f002 fd6f 	bl	800bda0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	7919      	ldrb	r1, [r3, #4]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	79d8      	ldrb	r0, [r3, #7]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	8952      	ldrh	r2, [r2, #10]
 80092da:	9202      	str	r2, [sp, #8]
 80092dc:	2202      	movs	r2, #2
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4623      	mov	r3, r4
 80092e4:	4602      	mov	r2, r0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f002 fd5a 	bl	800bda0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f006 fb5b 	bl	800f9b0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	795b      	ldrb	r3, [r3, #5]
 80092fe:	2200      	movs	r2, #0
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f006 fb54 	bl	800f9b0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bd90      	pop	{r4, r7, pc}

08009312 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	795b      	ldrb	r3, [r3, #5]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00e      	beq.n	800934a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	795b      	ldrb	r3, [r3, #5]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f002 fd53 	bl	800bdde <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	795b      	ldrb	r3, [r3, #5]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f002 fd7e 	bl	800be40 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	791b      	ldrb	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	791b      	ldrb	r3, [r3, #4]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f002 fd40 	bl	800bdde <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	791b      	ldrb	r3, [r3, #4]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f002 fd6b 	bl	800be40 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	4618      	mov	r0, r3
 8009386:	f006 fbf9 	bl	800fb7c <free>
    phost->pActiveClass->pData = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009390:	2200      	movs	r2, #0
 8009392:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	7b9b      	ldrb	r3, [r3, #14]
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d041      	beq.n	8009440 <USBH_MSC_ClassRequest+0xa2>
 80093bc:	2b03      	cmp	r3, #3
 80093be:	dc4b      	bgt.n	8009458 <USBH_MSC_ClassRequest+0xba>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <USBH_MSC_ClassRequest+0x2a>
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d147      	bne.n	8009458 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fcf0 	bl	8009db2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d104      	bne.n	80093e6 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2200      	movs	r2, #0
 80093e0:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d137      	bne.n	800945c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d804      	bhi.n	80093fe <USBH_MSC_ClassRequest+0x60>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	e000      	b.n	8009400 <USBH_MSC_ClassRequest+0x62>
 80093fe:	2202      	movs	r2, #2
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]
 8009408:	e014      	b.n	8009434 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	2134      	movs	r1, #52	; 0x34
 8009410:	fb01 f303 	mul.w	r3, r1, r3
 8009414:	4413      	add	r3, r2
 8009416:	3392      	adds	r3, #146	; 0x92
 8009418:	2202      	movs	r2, #2
 800941a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	2134      	movs	r1, #52	; 0x34
 8009422:	fb01 f303 	mul.w	r3, r1, r3
 8009426:	4413      	add	r3, r2
 8009428:	33c1      	adds	r3, #193	; 0xc1
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	3301      	adds	r3, #1
 8009432:	73bb      	strb	r3, [r7, #14]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	7bba      	ldrb	r2, [r7, #14]
 800943a:	429a      	cmp	r2, r3
 800943c:	d3e5      	bcc.n	800940a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800943e:	e00d      	b.n	800945c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009440:	2100      	movs	r1, #0
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 f87b 	bl	800b53e <USBH_ClrFeature>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d108      	bne.n	8009460 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	7bda      	ldrb	r2, [r3, #15]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009456:	e003      	b.n	8009460 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009458:	bf00      	nop
 800945a:	e002      	b.n	8009462 <USBH_MSC_ClassRequest+0xc4>
      break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009460:	bf00      	nop
  }

  return status;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009486:	2301      	movs	r3, #1
 8009488:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	7b1b      	ldrb	r3, [r3, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <USBH_MSC_Process+0x2e>
 8009492:	2b01      	cmp	r3, #1
 8009494:	f000 8271 	beq.w	800997a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009498:	e272      	b.n	8009980 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	429a      	cmp	r2, r3
 80094a8:	f080 824f 	bcs.w	800994a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094b2:	4619      	mov	r1, r3
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	2334      	movs	r3, #52	; 0x34
 80094b8:	fb01 f303 	mul.w	r3, r1, r3
 80094bc:	4413      	add	r3, r2
 80094be:	3391      	adds	r3, #145	; 0x91
 80094c0:	2201      	movs	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ca:	4619      	mov	r1, r3
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	2334      	movs	r3, #52	; 0x34
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	4413      	add	r3, r2
 80094d6:	3390      	adds	r3, #144	; 0x90
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	2b08      	cmp	r3, #8
 80094dc:	f200 8243 	bhi.w	8009966 <USBH_MSC_Process+0x4fa>
 80094e0:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <USBH_MSC_Process+0x7c>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	08009967 	.word	0x08009967
 80094f0:	080095d5 	.word	0x080095d5
 80094f4:	08009759 	.word	0x08009759
 80094f8:	08009533 	.word	0x08009533
 80094fc:	08009825 	.word	0x08009825
 8009500:	08009967 	.word	0x08009967
 8009504:	08009967 	.word	0x08009967
 8009508:	08009939 	.word	0x08009939
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009512:	4619      	mov	r1, r3
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	2334      	movs	r3, #52	; 0x34
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	4413      	add	r3, r2
 800951e:	3390      	adds	r3, #144	; 0x90
 8009520:	2204      	movs	r2, #4
 8009522:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009530:	e222      	b.n	8009978 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009538:	b2d9      	uxtb	r1, r3
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009540:	461a      	mov	r2, r3
 8009542:	2334      	movs	r3, #52	; 0x34
 8009544:	fb02 f303 	mul.w	r3, r2, r3
 8009548:	3398      	adds	r3, #152	; 0x98
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4413      	add	r3, r2
 800954e:	3307      	adds	r3, #7
 8009550:	461a      	mov	r2, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 ff6a 	bl	800a42c <USBH_MSC_SCSI_Inquiry>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10b      	bne.n	800957a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009568:	4619      	mov	r1, r3
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	2334      	movs	r3, #52	; 0x34
 800956e:	fb01 f303 	mul.w	r3, r1, r3
 8009572:	4413      	add	r3, r2
 8009574:	3390      	adds	r3, #144	; 0x90
 8009576:	2202      	movs	r2, #2
 8009578:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d10c      	bne.n	800959a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009586:	4619      	mov	r1, r3
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	2334      	movs	r3, #52	; 0x34
 800958c:	fb01 f303 	mul.w	r3, r1, r3
 8009590:	4413      	add	r3, r2
 8009592:	3390      	adds	r3, #144	; 0x90
 8009594:	2205      	movs	r2, #5
 8009596:	701a      	strb	r2, [r3, #0]
            break;
 8009598:	e1e7      	b.n	800996a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b04      	cmp	r3, #4
 800959e:	f040 81e4 	bne.w	800996a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095a8:	4619      	mov	r1, r3
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	2334      	movs	r3, #52	; 0x34
 80095ae:	fb01 f303 	mul.w	r3, r1, r3
 80095b2:	4413      	add	r3, r2
 80095b4:	3390      	adds	r3, #144	; 0x90
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095c0:	4619      	mov	r1, r3
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	2334      	movs	r3, #52	; 0x34
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	3391      	adds	r3, #145	; 0x91
 80095ce:	2202      	movs	r2, #2
 80095d0:	701a      	strb	r2, [r3, #0]
            break;
 80095d2:	e1ca      	b.n	800996a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fe66 	bl	800a2b0 <USBH_MSC_SCSI_TestUnitReady>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d149      	bne.n	8009682 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f4:	4619      	mov	r1, r3
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	2334      	movs	r3, #52	; 0x34
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	4413      	add	r3, r2
 8009600:	3392      	adds	r3, #146	; 0x92
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00c      	beq.n	8009622 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960e:	4619      	mov	r1, r3
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	2334      	movs	r3, #52	; 0x34
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	4413      	add	r3, r2
 800961a:	33c1      	adds	r3, #193	; 0xc1
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	e00b      	b.n	800963a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009628:	4619      	mov	r1, r3
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2334      	movs	r3, #52	; 0x34
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	33c1      	adds	r3, #193	; 0xc1
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009640:	4619      	mov	r1, r3
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	2334      	movs	r3, #52	; 0x34
 8009646:	fb01 f303 	mul.w	r3, r1, r3
 800964a:	4413      	add	r3, r2
 800964c:	3390      	adds	r3, #144	; 0x90
 800964e:	2203      	movs	r2, #3
 8009650:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009658:	4619      	mov	r1, r3
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	2334      	movs	r3, #52	; 0x34
 800965e:	fb01 f303 	mul.w	r3, r1, r3
 8009662:	4413      	add	r3, r2
 8009664:	3391      	adds	r3, #145	; 0x91
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009670:	4619      	mov	r1, r3
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	2334      	movs	r3, #52	; 0x34
 8009676:	fb01 f303 	mul.w	r3, r1, r3
 800967a:	4413      	add	r3, r2
 800967c:	3392      	adds	r3, #146	; 0x92
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d14a      	bne.n	800971e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800968e:	4619      	mov	r1, r3
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	2334      	movs	r3, #52	; 0x34
 8009694:	fb01 f303 	mul.w	r3, r1, r3
 8009698:	4413      	add	r3, r2
 800969a:	3392      	adds	r3, #146	; 0x92
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d00c      	beq.n	80096bc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096a8:	4619      	mov	r1, r3
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	2334      	movs	r3, #52	; 0x34
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	33c1      	adds	r3, #193	; 0xc1
 80096b6:	2201      	movs	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	e00b      	b.n	80096d4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096c2:	4619      	mov	r1, r3
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	2334      	movs	r3, #52	; 0x34
 80096c8:	fb01 f303 	mul.w	r3, r1, r3
 80096cc:	4413      	add	r3, r2
 80096ce:	33c1      	adds	r3, #193	; 0xc1
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096da:	4619      	mov	r1, r3
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	2334      	movs	r3, #52	; 0x34
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	4413      	add	r3, r2
 80096e6:	3390      	adds	r3, #144	; 0x90
 80096e8:	2205      	movs	r2, #5
 80096ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096f2:	4619      	mov	r1, r3
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	2334      	movs	r3, #52	; 0x34
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	4413      	add	r3, r2
 80096fe:	3391      	adds	r3, #145	; 0x91
 8009700:	2201      	movs	r2, #1
 8009702:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800970a:	4619      	mov	r1, r3
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	2334      	movs	r3, #52	; 0x34
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	4413      	add	r3, r2
 8009716:	3392      	adds	r3, #146	; 0x92
 8009718:	2202      	movs	r2, #2
 800971a:	701a      	strb	r2, [r3, #0]
            break;
 800971c:	e127      	b.n	800996e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b04      	cmp	r3, #4
 8009722:	f040 8124 	bne.w	800996e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800972c:	4619      	mov	r1, r3
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	2334      	movs	r3, #52	; 0x34
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	3390      	adds	r3, #144	; 0x90
 800973a:	2201      	movs	r2, #1
 800973c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009744:	4619      	mov	r1, r3
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	2334      	movs	r3, #52	; 0x34
 800974a:	fb01 f303 	mul.w	r3, r1, r3
 800974e:	4413      	add	r3, r2
 8009750:	3391      	adds	r3, #145	; 0x91
 8009752:	2202      	movs	r2, #2
 8009754:	701a      	strb	r2, [r3, #0]
            break;
 8009756:	e10a      	b.n	800996e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800975e:	b2d9      	uxtb	r1, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009766:	461a      	mov	r2, r3
 8009768:	2334      	movs	r3, #52	; 0x34
 800976a:	fb02 f303 	mul.w	r3, r2, r3
 800976e:	3390      	adds	r3, #144	; 0x90
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4413      	add	r3, r2
 8009774:	3304      	adds	r3, #4
 8009776:	461a      	mov	r2, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fddc 	bl	800a336 <USBH_MSC_SCSI_ReadCapacity>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d120      	bne.n	80097ca <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800978e:	4619      	mov	r1, r3
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	2334      	movs	r3, #52	; 0x34
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	4413      	add	r3, r2
 800979a:	3390      	adds	r3, #144	; 0x90
 800979c:	2201      	movs	r2, #1
 800979e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097a6:	4619      	mov	r1, r3
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	2334      	movs	r3, #52	; 0x34
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	3391      	adds	r3, #145	; 0x91
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097be:	3301      	adds	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80097c8:	e0d3      	b.n	8009972 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d10c      	bne.n	80097ea <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097d6:	4619      	mov	r1, r3
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	2334      	movs	r3, #52	; 0x34
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	3390      	adds	r3, #144	; 0x90
 80097e4:	2205      	movs	r2, #5
 80097e6:	701a      	strb	r2, [r3, #0]
            break;
 80097e8:	e0c3      	b.n	8009972 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	f040 80c0 	bne.w	8009972 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097f8:	4619      	mov	r1, r3
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	2334      	movs	r3, #52	; 0x34
 80097fe:	fb01 f303 	mul.w	r3, r1, r3
 8009802:	4413      	add	r3, r2
 8009804:	3390      	adds	r3, #144	; 0x90
 8009806:	2201      	movs	r2, #1
 8009808:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009810:	4619      	mov	r1, r3
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	2334      	movs	r3, #52	; 0x34
 8009816:	fb01 f303 	mul.w	r3, r1, r3
 800981a:	4413      	add	r3, r2
 800981c:	3391      	adds	r3, #145	; 0x91
 800981e:	2202      	movs	r2, #2
 8009820:	701a      	strb	r2, [r3, #0]
            break;
 8009822:	e0a6      	b.n	8009972 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800982a:	b2d9      	uxtb	r1, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009832:	461a      	mov	r2, r3
 8009834:	2334      	movs	r3, #52	; 0x34
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	3398      	adds	r3, #152	; 0x98
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4413      	add	r3, r2
 8009840:	3304      	adds	r3, #4
 8009842:	461a      	mov	r2, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fe96 	bl	800a576 <USBH_MSC_SCSI_RequestSense>
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d145      	bne.n	80098e0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800985a:	4619      	mov	r1, r3
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	2334      	movs	r3, #52	; 0x34
 8009860:	fb01 f303 	mul.w	r3, r1, r3
 8009864:	4413      	add	r3, r2
 8009866:	339c      	adds	r3, #156	; 0x9c
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b06      	cmp	r3, #6
 800986c:	d00c      	beq.n	8009888 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009874:	4619      	mov	r1, r3
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	2334      	movs	r3, #52	; 0x34
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	4413      	add	r3, r2
 8009880:	339c      	adds	r3, #156	; 0x9c
 8009882:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009884:	2b02      	cmp	r3, #2
 8009886:	d117      	bne.n	80098b8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f242 720f 	movw	r2, #9999	; 0x270f
 800989a:	4293      	cmp	r3, r2
 800989c:	d80c      	bhi.n	80098b8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098a4:	4619      	mov	r1, r3
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	2334      	movs	r3, #52	; 0x34
 80098aa:	fb01 f303 	mul.w	r3, r1, r3
 80098ae:	4413      	add	r3, r2
 80098b0:	3390      	adds	r3, #144	; 0x90
 80098b2:	2202      	movs	r2, #2
 80098b4:	701a      	strb	r2, [r3, #0]
                  break;
 80098b6:	e05f      	b.n	8009978 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098be:	4619      	mov	r1, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	2334      	movs	r3, #52	; 0x34
 80098c4:	fb01 f303 	mul.w	r3, r1, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	3390      	adds	r3, #144	; 0x90
 80098cc:	2201      	movs	r2, #1
 80098ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098d6:	3301      	adds	r3, #1
 80098d8:	b29a      	uxth	r2, r3
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d10c      	bne.n	8009900 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098ec:	4619      	mov	r1, r3
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	2334      	movs	r3, #52	; 0x34
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	3390      	adds	r3, #144	; 0x90
 80098fa:	2208      	movs	r2, #8
 80098fc:	701a      	strb	r2, [r3, #0]
            break;
 80098fe:	e03a      	b.n	8009976 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	2b04      	cmp	r3, #4
 8009904:	d137      	bne.n	8009976 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800990c:	4619      	mov	r1, r3
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	2334      	movs	r3, #52	; 0x34
 8009912:	fb01 f303 	mul.w	r3, r1, r3
 8009916:	4413      	add	r3, r2
 8009918:	3390      	adds	r3, #144	; 0x90
 800991a:	2201      	movs	r2, #1
 800991c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009924:	4619      	mov	r1, r3
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	2334      	movs	r3, #52	; 0x34
 800992a:	fb01 f303 	mul.w	r3, r1, r3
 800992e:	4413      	add	r3, r2
 8009930:	3391      	adds	r3, #145	; 0x91
 8009932:	2202      	movs	r2, #2
 8009934:	701a      	strb	r2, [r3, #0]
            break;
 8009936:	e01e      	b.n	8009976 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800993e:	3301      	adds	r3, #1
 8009940:	b29a      	uxth	r2, r3
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009948:	e016      	b.n	8009978 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2200      	movs	r2, #0
 800994e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2201      	movs	r2, #1
 8009956:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800995e:	2102      	movs	r1, #2
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
      break;
 8009964:	e00c      	b.n	8009980 <USBH_MSC_Process+0x514>
            break;
 8009966:	bf00      	nop
 8009968:	e00a      	b.n	8009980 <USBH_MSC_Process+0x514>
            break;
 800996a:	bf00      	nop
 800996c:	e008      	b.n	8009980 <USBH_MSC_Process+0x514>
            break;
 800996e:	bf00      	nop
 8009970:	e006      	b.n	8009980 <USBH_MSC_Process+0x514>
            break;
 8009972:	bf00      	nop
 8009974:	e004      	b.n	8009980 <USBH_MSC_Process+0x514>
            break;
 8009976:	bf00      	nop
      break;
 8009978:	e002      	b.n	8009980 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
      break;
 800997e:	bf00      	nop
  }
  return error;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop

0800998c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	370c      	adds	r7, #12
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b088      	sub	sp, #32
 80099a6:	af02      	add	r7, sp, #8
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80099bc:	2301      	movs	r3, #1
 80099be:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	2134      	movs	r1, #52	; 0x34
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	3390      	adds	r3, #144	; 0x90
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	d03c      	beq.n	8009a4e <USBH_MSC_RdWrProcess+0xac>
 80099d4:	2b07      	cmp	r3, #7
 80099d6:	f300 80a7 	bgt.w	8009b28 <USBH_MSC_RdWrProcess+0x186>
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d06c      	beq.n	8009ab8 <USBH_MSC_RdWrProcess+0x116>
 80099de:	2b06      	cmp	r3, #6
 80099e0:	f040 80a2 	bne.w	8009b28 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80099e4:	78f9      	ldrb	r1, [r7, #3]
 80099e6:	2300      	movs	r3, #0
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	2300      	movs	r3, #0
 80099ec:	2200      	movs	r2, #0
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fea5 	bl	800a73e <USBH_MSC_SCSI_Read>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	2134      	movs	r1, #52	; 0x34
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	3390      	adds	r3, #144	; 0x90
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a14:	e08a      	b.n	8009b2c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d109      	bne.n	8009a30 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	2134      	movs	r1, #52	; 0x34
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	3390      	adds	r3, #144	; 0x90
 8009a2a:	2205      	movs	r2, #5
 8009a2c:	701a      	strb	r2, [r3, #0]
      break;
 8009a2e:	e07d      	b.n	8009b2c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d17a      	bne.n	8009b2c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	2134      	movs	r1, #52	; 0x34
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	4413      	add	r3, r2
 8009a42:	3390      	adds	r3, #144	; 0x90
 8009a44:	2208      	movs	r2, #8
 8009a46:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4c:	e06e      	b.n	8009b2c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009a4e:	78f9      	ldrb	r1, [r7, #3]
 8009a50:	2300      	movs	r3, #0
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	2300      	movs	r3, #0
 8009a56:	2200      	movs	r2, #0
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fe05 	bl	800a668 <USBH_MSC_SCSI_Write>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10b      	bne.n	8009a80 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	2134      	movs	r1, #52	; 0x34
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	3390      	adds	r3, #144	; 0x90
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a7e:	e057      	b.n	8009b30 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d109      	bne.n	8009a9a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	2134      	movs	r1, #52	; 0x34
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	4413      	add	r3, r2
 8009a92:	3390      	adds	r3, #144	; 0x90
 8009a94:	2205      	movs	r2, #5
 8009a96:	701a      	strb	r2, [r3, #0]
      break;
 8009a98:	e04a      	b.n	8009b30 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d147      	bne.n	8009b30 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	2134      	movs	r1, #52	; 0x34
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	4413      	add	r3, r2
 8009aac:	3390      	adds	r3, #144	; 0x90
 8009aae:	2208      	movs	r2, #8
 8009ab0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab6:	e03b      	b.n	8009b30 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	2234      	movs	r2, #52	; 0x34
 8009abc:	fb02 f303 	mul.w	r3, r2, r3
 8009ac0:	3398      	adds	r3, #152	; 0x98
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	1d1a      	adds	r2, r3, #4
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fd52 	bl	800a576 <USBH_MSC_SCSI_RequestSense>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d113      	bne.n	8009b04 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	2134      	movs	r1, #52	; 0x34
 8009ae2:	fb01 f303 	mul.w	r3, r1, r3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3390      	adds	r3, #144	; 0x90
 8009aea:	2201      	movs	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	2134      	movs	r1, #52	; 0x34
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	3391      	adds	r3, #145	; 0x91
 8009afc:	2202      	movs	r2, #2
 8009afe:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009b00:	2302      	movs	r3, #2
 8009b02:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d014      	beq.n	8009b34 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d111      	bne.n	8009b34 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	2134      	movs	r1, #52	; 0x34
 8009b16:	fb01 f303 	mul.w	r3, r1, r3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3390      	adds	r3, #144	; 0x90
 8009b1e:	2208      	movs	r2, #8
 8009b20:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b26:	e005      	b.n	8009b34 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009b28:	bf00      	nop
 8009b2a:	e004      	b.n	8009b36 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009b2c:	bf00      	nop
 8009b2e:	e002      	b.n	8009b36 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009b34:	bf00      	nop

  }
  return error;
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b0b      	cmp	r3, #11
 8009b5e:	d10c      	bne.n	8009b7a <USBH_MSC_UnitIsReady+0x3a>
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	2134      	movs	r1, #52	; 0x34
 8009b66:	fb01 f303 	mul.w	r3, r1, r3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3391      	adds	r3, #145	; 0x91
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e001      	b.n	8009b7e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	460b      	mov	r3, r1
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b0b      	cmp	r3, #11
 8009bac:	d10d      	bne.n	8009bca <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009bae:	7afb      	ldrb	r3, [r7, #11]
 8009bb0:	2234      	movs	r2, #52	; 0x34
 8009bb2:	fb02 f303 	mul.w	r3, r2, r3
 8009bb6:	3390      	adds	r3, #144	; 0x90
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4413      	add	r3, r2
 8009bbc:	2234      	movs	r2, #52	; 0x34
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f005 ffe3 	bl	800fb8c <memcpy>
    return USBH_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e000      	b.n	8009bcc <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009bca:	2302      	movs	r3, #2
  }
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	607a      	str	r2, [r7, #4]
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	460b      	mov	r3, r1
 8009be2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00e      	beq.n	8009c18 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009c00:	2b0b      	cmp	r3, #11
 8009c02:	d109      	bne.n	8009c18 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009c04:	7afb      	ldrb	r3, [r7, #11]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	2134      	movs	r1, #52	; 0x34
 8009c0a:	fb01 f303 	mul.w	r3, r1, r3
 8009c0e:	4413      	add	r3, r2
 8009c10:	3390      	adds	r3, #144	; 0x90
 8009c12:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d001      	beq.n	8009c1c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e040      	b.n	8009c9e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2206      	movs	r2, #6
 8009c20:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	2134      	movs	r1, #52	; 0x34
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3390      	adds	r3, #144	; 0x90
 8009c30:	2206      	movs	r2, #6
 8009c32:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009c3e:	7af9      	ldrb	r1, [r7, #11]
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 fd78 	bl	800a73e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c54:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009c56:	e016      	b.n	8009c86 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	1ad2      	subs	r2, r2, r3
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f242 7110 	movw	r1, #10000	; 0x2710
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d805      	bhi.n	8009c7c <USBH_MSC_Read+0xa8>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d104      	bne.n	8009c86 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009c82:	2302      	movs	r3, #2
 8009c84:	e00b      	b.n	8009c9e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009c86:	7afb      	ldrb	r3, [r7, #11]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff fe89 	bl	80099a2 <USBH_MSC_RdWrProcess>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d0e0      	beq.n	8009c58 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b088      	sub	sp, #32
 8009caa:	af02      	add	r7, sp, #8
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009cd2:	2b0b      	cmp	r3, #11
 8009cd4:	d109      	bne.n	8009cea <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009cd6:	7afb      	ldrb	r3, [r7, #11]
 8009cd8:	697a      	ldr	r2, [r7, #20]
 8009cda:	2134      	movs	r1, #52	; 0x34
 8009cdc:	fb01 f303 	mul.w	r3, r1, r3
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3390      	adds	r3, #144	; 0x90
 8009ce4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d001      	beq.n	8009cee <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009cea:	2302      	movs	r3, #2
 8009cec:	e040      	b.n	8009d70 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009cf4:	7afb      	ldrb	r3, [r7, #11]
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	2134      	movs	r1, #52	; 0x34
 8009cfa:	fb01 f303 	mul.w	r3, r1, r3
 8009cfe:	4413      	add	r3, r2
 8009d00:	3390      	adds	r3, #144	; 0x90
 8009d02:	2207      	movs	r2, #7
 8009d04:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009d10:	7af9      	ldrb	r1, [r7, #11]
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fca4 	bl	800a668 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d26:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009d28:	e016      	b.n	8009d58 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	f242 7110 	movw	r1, #10000	; 0x2710
 8009d3a:	fb01 f303 	mul.w	r3, r1, r3
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d805      	bhi.n	8009d4e <USBH_MSC_Write+0xa8>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d104      	bne.n	8009d58 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2201      	movs	r2, #1
 8009d52:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009d54:	2302      	movs	r3, #2
 8009d56:	e00b      	b.n	8009d70 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fe20 	bl	80099a2 <USBH_MSC_RdWrProcess>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d0e0      	beq.n	8009d2a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3718      	adds	r7, #24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2221      	movs	r2, #33	; 0x21
 8009d84:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	22ff      	movs	r2, #255	; 0xff
 8009d8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 fdab 	bl	800b8fe <USBH_CtlReq>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	22a1      	movs	r2, #161	; 0xa1
 8009dc0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	22fe      	movs	r2, #254	; 0xfe
 8009dc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009dda:	2201      	movs	r2, #1
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fd8d 	bl	800b8fe <USBH_CtlReq>
 8009de4:	4603      	mov	r3, r0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <USBH_MSC_BOT_Init+0x3c>)
 8009e06:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <USBH_MSC_BOT_Init+0x40>)
 8009e0c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	43425355 	.word	0x43425355
 8009e30:	20304050 	.word	0x20304050

08009e34 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009e44:	2301      	movs	r3, #1
 8009e46:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e64:	3b01      	subs	r3, #1
 8009e66:	2b0a      	cmp	r3, #10
 8009e68:	f200 819e 	bhi.w	800a1a8 <USBH_MSC_BOT_Process+0x374>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <USBH_MSC_BOT_Process+0x40>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009f33 	.word	0x08009f33
 8009e80:	08009f51 	.word	0x08009f51
 8009e84:	08009fd5 	.word	0x08009fd5
 8009e88:	08009ff7 	.word	0x08009ff7
 8009e8c:	0800a08f 	.word	0x0800a08f
 8009e90:	0800a0ab 	.word	0x0800a0ab
 8009e94:	0800a0fd 	.word	0x0800a0fd
 8009e98:	0800a12d 	.word	0x0800a12d
 8009e9c:	0800a18f 	.word	0x0800a18f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	795b      	ldrb	r3, [r3, #5]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	9200      	str	r2, [sp, #0]
 8009ebe:	221f      	movs	r2, #31
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 ff2a 	bl	800bd1a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009ec6:	e17e      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	795b      	ldrb	r3, [r3, #5]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f005 fd44 	bl	800f95c <USBH_LL_GetURBState>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009ed8:	7d3b      	ldrb	r3, [r7, #20]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d118      	bne.n	8009f10 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00f      	beq.n	8009f06 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009eec:	b25b      	sxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da04      	bge.n	8009efc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009efa:	e157      	b.n	800a1ac <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2205      	movs	r2, #5
 8009f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f04:	e152      	b.n	800a1ac <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2207      	movs	r2, #7
 8009f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f0e:	e14d      	b.n	800a1ac <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f10:	7d3b      	ldrb	r3, [r7, #20]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d104      	bne.n	8009f20 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f1e:	e145      	b.n	800a1ac <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009f20:	7d3b      	ldrb	r3, [r7, #20]
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	f040 8142 	bne.w	800a1ac <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f30:	e13c      	b.n	800a1ac <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	895a      	ldrh	r2, [r3, #10]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	791b      	ldrb	r3, [r3, #4]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 ff0f 	bl	800bd64 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	2204      	movs	r2, #4
 8009f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009f4e:	e13a      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	791b      	ldrb	r3, [r3, #4]
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f005 fd00 	bl	800f95c <USBH_LL_GetURBState>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009f60:	7d3b      	ldrb	r3, [r7, #20]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d12d      	bne.n	8009fc2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	8952      	ldrh	r2, [r2, #10]
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d910      	bls.n	8009f94 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	8952      	ldrh	r2, [r2, #10]
 8009f7c:	441a      	add	r2, r3
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	8952      	ldrh	r2, [r2, #10]
 8009f8c:	1a9a      	subs	r2, r3, r2
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f92:	e002      	b.n	8009f9a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	2200      	movs	r2, #0
 8009f98:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	895a      	ldrh	r2, [r3, #10]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 fed7 	bl	800bd64 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009fb6:	e0fb      	b.n	800a1b0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2207      	movs	r2, #7
 8009fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009fc0:	e0f6      	b.n	800a1b0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009fc2:	7d3b      	ldrb	r3, [r7, #20]
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	f040 80f3 	bne.w	800a1b0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2209      	movs	r2, #9
 8009fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009fd2:	e0ed      	b.n	800a1b0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	891a      	ldrh	r2, [r3, #8]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	795b      	ldrb	r3, [r3, #5]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	9000      	str	r0, [sp, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fe97 	bl	800bd1a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2206      	movs	r2, #6
 8009ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ff4:	e0e7      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	795b      	ldrb	r3, [r3, #5]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f005 fcad 	bl	800f95c <USBH_LL_GetURBState>
 800a002:	4603      	mov	r3, r0
 800a004:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a006:	7d3b      	ldrb	r3, [r7, #20]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d12f      	bne.n	800a06c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	8912      	ldrh	r2, [r2, #8]
 800a014:	4293      	cmp	r3, r2
 800a016:	d910      	bls.n	800a03a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	8912      	ldrh	r2, [r2, #8]
 800a022:	441a      	add	r2, r3
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	8912      	ldrh	r2, [r2, #8]
 800a032:	1a9a      	subs	r2, r3, r2
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	65da      	str	r2, [r3, #92]	; 0x5c
 800a038:	e002      	b.n	800a040 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2200      	movs	r2, #0
 800a03e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	891a      	ldrh	r2, [r3, #8]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	795b      	ldrb	r3, [r3, #5]
 800a056:	2001      	movs	r0, #1
 800a058:	9000      	str	r0, [sp, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 fe5d 	bl	800bd1a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a060:	e0a8      	b.n	800a1b4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2207      	movs	r2, #7
 800a066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a06a:	e0a3      	b.n	800a1b4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a06c:	7d3b      	ldrb	r3, [r7, #20]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d104      	bne.n	800a07c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2205      	movs	r2, #5
 800a076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a07a:	e09b      	b.n	800a1b4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a07c:	7d3b      	ldrb	r3, [r7, #20]
 800a07e:	2b05      	cmp	r3, #5
 800a080:	f040 8098 	bne.w	800a1b4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	220a      	movs	r2, #10
 800a088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a08c:	e092      	b.n	800a1b4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	791b      	ldrb	r3, [r3, #4]
 800a098:	220d      	movs	r2, #13
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fe62 	bl	800bd64 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0a8:	e08d      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	791b      	ldrb	r3, [r3, #4]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f005 fc53 	bl	800f95c <USBH_LL_GetURBState>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a0ba:	7d3b      	ldrb	r3, [r7, #20]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d115      	bne.n	800a0ec <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f8a9 	bl	800a228 <USBH_MSC_DecodeCSW>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a0da:	7d7b      	ldrb	r3, [r7, #21]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a0e4:	e068      	b.n	800a1b8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ea:	e065      	b.n	800a1b8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a0ec:	7d3b      	ldrb	r3, [r7, #20]
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d162      	bne.n	800a1b8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2209      	movs	r2, #9
 800a0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0fa:	e05d      	b.n	800a1b8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	2200      	movs	r2, #0
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f864 	bl	800a1d0 <USBH_MSC_BOT_Abort>
 800a108:	4603      	mov	r3, r0
 800a10a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a10c:	7dbb      	ldrb	r3, [r7, #22]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2207      	movs	r2, #7
 800a116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a11a:	e04f      	b.n	800a1bc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a11c:	7dbb      	ldrb	r3, [r7, #22]
 800a11e:	2b04      	cmp	r3, #4
 800a120:	d14c      	bne.n	800a1bc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	220b      	movs	r2, #11
 800a126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a12a:	e047      	b.n	800a1bc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	2201      	movs	r2, #1
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f84c 	bl	800a1d0 <USBH_MSC_BOT_Abort>
 800a138:	4603      	mov	r3, r0
 800a13a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a13c:	7dbb      	ldrb	r3, [r7, #22]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d11d      	bne.n	800a17e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f005 fc61 	bl	800fa10 <USBH_LL_GetToggle>
 800a14e:	4603      	mov	r3, r0
 800a150:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	7959      	ldrb	r1, [r3, #5]
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	f1c3 0301 	rsb	r3, r3, #1
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f005 fc25 	bl	800f9b0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	791b      	ldrb	r3, [r3, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f005 fc1e 	bl	800f9b0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2209      	movs	r2, #9
 800a178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a17c:	e020      	b.n	800a1c0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
 800a180:	2b04      	cmp	r3, #4
 800a182:	d11d      	bne.n	800a1c0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	220b      	movs	r2, #11
 800a188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a18c:	e018      	b.n	800a1c0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fdf2 	bl	8009d78 <USBH_MSC_BOT_REQ_Reset>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d112      	bne.n	800a1c4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a1a6:	e00d      	b.n	800a1c4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a1a8:	bf00      	nop
 800a1aa:	e00c      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1ac:	bf00      	nop
 800a1ae:	e00a      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1b0:	bf00      	nop
 800a1b2:	e008      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1b4:	bf00      	nop
 800a1b6:	e006      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1b8:	bf00      	nop
 800a1ba:	e004      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1bc:	bf00      	nop
 800a1be:	e002      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1c0:	bf00      	nop
 800a1c2:	e000      	b.n	800a1c6 <USBH_MSC_BOT_Process+0x392>
      break;
 800a1c4:	bf00      	nop
  }
  return status;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a1ee:	78bb      	ldrb	r3, [r7, #2]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <USBH_MSC_BOT_Abort+0x2a>
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d009      	beq.n	800a20c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a1f8:	e011      	b.n	800a21e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	79db      	ldrb	r3, [r3, #7]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f001 f99c 	bl	800b53e <USBH_ClrFeature>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
      break;
 800a20a:	e008      	b.n	800a21e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	799b      	ldrb	r3, [r3, #6]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 f993 	bl	800b53e <USBH_ClrFeature>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
      break;
 800a21c:	bf00      	nop
  }
  return status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a23a:	2301      	movs	r3, #1
 800a23c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	791b      	ldrb	r3, [r3, #4]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f005 faf7 	bl	800f838 <USBH_LL_GetLastXferSize>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b0d      	cmp	r3, #13
 800a24e:	d002      	beq.n	800a256 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a250:	2302      	movs	r3, #2
 800a252:	73fb      	strb	r3, [r7, #15]
 800a254:	e024      	b.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a25a:	4a14      	ldr	r2, [pc, #80]	; (800a2ac <USBH_MSC_DecodeCSW+0x84>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d11d      	bne.n	800a29c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a268:	429a      	cmp	r2, r3
 800a26a:	d119      	bne.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a272:	2b00      	cmp	r3, #0
 800a274:	d102      	bne.n	800a27c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
 800a27a:	e011      	b.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a282:	2b01      	cmp	r3, #1
 800a284:	d102      	bne.n	800a28c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a286:	2301      	movs	r3, #1
 800a288:	73fb      	strb	r3, [r7, #15]
 800a28a:	e009      	b.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a292:	2b02      	cmp	r3, #2
 800a294:	d104      	bne.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a296:	2302      	movs	r3, #2
 800a298:	73fb      	strb	r3, [r7, #15]
 800a29a:	e001      	b.n	800a2a0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a29c:	2302      	movs	r3, #2
 800a29e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	53425355 	.word	0x53425355

0800a2b0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d002      	beq.n	800a2da <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d021      	beq.n	800a31c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a2d8:	e028      	b.n	800a32c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3363      	adds	r3, #99	; 0x63
 800a2f4:	2210      	movs	r2, #16
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f005 fc55 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2202      	movs	r2, #2
 800a312:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a316:	2301      	movs	r3, #1
 800a318:	73fb      	strb	r3, [r7, #15]
      break;
 800a31a:	e007      	b.n	800a32c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fd87 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a326:	4603      	mov	r3, r0
 800a328:	73fb      	strb	r3, [r7, #15]
      break;
 800a32a:	bf00      	nop
  }

  return error;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b086      	sub	sp, #24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	460b      	mov	r3, r1
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a344:	2301      	movs	r3, #1
 800a346:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d002      	beq.n	800a362 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d027      	beq.n	800a3b0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a360:	e05f      	b.n	800a422 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2208      	movs	r2, #8
 800a366:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2280      	movs	r2, #128	; 0x80
 800a36c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	220a      	movs	r2, #10
 800a374:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	3363      	adds	r3, #99	; 0x63
 800a37c:	2210      	movs	r2, #16
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f005 fc11 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2225      	movs	r2, #37	; 0x25
 800a38a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2202      	movs	r2, #2
 800a39a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f103 0210 	add.w	r2, r3, #16
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	e038      	b.n	800a422 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f7ff fd3d 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d12d      	bne.n	800a420 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ca:	3303      	adds	r3, #3
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a3ea:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	061b      	lsls	r3, r3, #24
 800a3f6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a402:	3307      	adds	r3, #7
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a40e:	3306      	adds	r3, #6
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	021b      	lsls	r3, r3, #8
 800a416:	b29b      	uxth	r3, r3
 800a418:	4313      	orrs	r3, r2
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	809a      	strh	r2, [r3, #4]
      break;
 800a420:	bf00      	nop
  }

  return error;
 800a422:	7dfb      	ldrb	r3, [r7, #23]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	460b      	mov	r3, r1
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a43a:	2302      	movs	r3, #2
 800a43c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d002      	beq.n	800a458 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a452:	2b02      	cmp	r3, #2
 800a454:	d03d      	beq.n	800a4d2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a456:	e089      	b.n	800a56c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2224      	movs	r2, #36	; 0x24
 800a45c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2280      	movs	r2, #128	; 0x80
 800a462:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	220a      	movs	r2, #10
 800a46a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3363      	adds	r3, #99	; 0x63
 800a472:	220a      	movs	r2, #10
 800a474:	2100      	movs	r1, #0
 800a476:	4618      	mov	r0, r3
 800a478:	f005 fb96 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2212      	movs	r2, #18
 800a480:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	015b      	lsls	r3, r3, #5
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2224      	movs	r2, #36	; 0x24
 800a4a4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	2202      	movs	r2, #2
 800a4bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f103 0210 	add.w	r2, r3, #16
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d0:	e04c      	b.n	800a56c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7ff fcac 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d141      	bne.n	800a56a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a4e6:	2222      	movs	r2, #34	; 0x22
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f005 fb5c 	bl	800fba8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f003 031f 	and.w	r3, r3, #31
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	095b      	lsrs	r3, r3, #5
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a518:	3301      	adds	r3, #1
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	da03      	bge.n	800a52a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	709a      	strb	r2, [r3, #2]
 800a528:	e002      	b.n	800a530 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	1cd8      	adds	r0, r3, #3
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53a:	3308      	adds	r3, #8
 800a53c:	2208      	movs	r2, #8
 800a53e:	4619      	mov	r1, r3
 800a540:	f005 fb24 	bl	800fb8c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f103 000c 	add.w	r0, r3, #12
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a550:	3310      	adds	r3, #16
 800a552:	2210      	movs	r2, #16
 800a554:	4619      	mov	r1, r3
 800a556:	f005 fb19 	bl	800fb8c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	331d      	adds	r3, #29
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a564:	3220      	adds	r2, #32
 800a566:	6812      	ldr	r2, [r2, #0]
 800a568:	601a      	str	r2, [r3, #0]
      break;
 800a56a:	bf00      	nop
  }

  return error;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b086      	sub	sp, #24
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	460b      	mov	r3, r1
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a584:	2302      	movs	r3, #2
 800a586:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d002      	beq.n	800a5a2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d03d      	beq.n	800a61c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a5a0:	e05d      	b.n	800a65e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	220e      	movs	r2, #14
 800a5a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2280      	movs	r2, #128	; 0x80
 800a5ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	3363      	adds	r3, #99	; 0x63
 800a5bc:	2210      	movs	r2, #16
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f005 faf1 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	2203      	movs	r2, #3
 800a5ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	015b      	lsls	r3, r3, #5
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	220e      	movs	r2, #14
 800a5ee:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2202      	movs	r2, #2
 800a606:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	f103 0210 	add.w	r2, r3, #16
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a616:	2301      	movs	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]
      break;
 800a61a:	e020      	b.n	800a65e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	4619      	mov	r1, r3
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff fc07 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a626:	4603      	mov	r3, r0
 800a628:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d115      	bne.n	800a65c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a636:	3302      	adds	r3, #2
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a64a:	7b1a      	ldrb	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a656:	7b5a      	ldrb	r2, [r3, #13]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	709a      	strb	r2, [r3, #2]
      break;
 800a65c:	bf00      	nop
  }

  return error;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	460b      	mov	r3, r1
 800a676:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a678:	2302      	movs	r3, #2
 800a67a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d002      	beq.n	800a696 <USBH_MSC_SCSI_Write+0x2e>
 800a690:	2b02      	cmp	r3, #2
 800a692:	d047      	beq.n	800a724 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a694:	e04e      	b.n	800a734 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a69c:	461a      	mov	r2, r3
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	fb03 f202 	mul.w	r2, r3, r2
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	220a      	movs	r2, #10
 800a6b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	3363      	adds	r3, #99	; 0x63
 800a6bc:	2210      	movs	r2, #16
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f005 fa71 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	222a      	movs	r2, #42	; 0x2a
 800a6ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a6ce:	79fa      	ldrb	r2, [r7, #7]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a6d6:	79ba      	ldrb	r2, [r7, #6]
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a6de:	797a      	ldrb	r2, [r7, #5]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a6e6:	1d3b      	adds	r3, r7, #4
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a6f0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a6fa:	f107 0320 	add.w	r3, r7, #32
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2202      	movs	r2, #2
 800a712:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a71e:	2301      	movs	r3, #1
 800a720:	75fb      	strb	r3, [r7, #23]
      break;
 800a722:	e007      	b.n	800a734 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a724:	7afb      	ldrb	r3, [r7, #11]
 800a726:	4619      	mov	r1, r3
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff fb83 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a72e:	4603      	mov	r3, r0
 800a730:	75fb      	strb	r3, [r7, #23]
      break;
 800a732:	bf00      	nop
  }

  return error;
 800a734:	7dfb      	ldrb	r3, [r7, #23]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3718      	adds	r7, #24
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
 800a74a:	460b      	mov	r3, r1
 800a74c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a74e:	2302      	movs	r3, #2
 800a750:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a762:	2b01      	cmp	r3, #1
 800a764:	d002      	beq.n	800a76c <USBH_MSC_SCSI_Read+0x2e>
 800a766:	2b02      	cmp	r3, #2
 800a768:	d047      	beq.n	800a7fa <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a76a:	e04e      	b.n	800a80a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a772:	461a      	mov	r2, r3
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	fb03 f202 	mul.w	r2, r3, r2
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2280      	movs	r2, #128	; 0x80
 800a782:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	220a      	movs	r2, #10
 800a78a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	3363      	adds	r3, #99	; 0x63
 800a792:	2210      	movs	r2, #16
 800a794:	2100      	movs	r1, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f005 fa06 	bl	800fba8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2228      	movs	r2, #40	; 0x28
 800a7a0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a7a4:	79fa      	ldrb	r2, [r7, #7]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a7ac:	79ba      	ldrb	r2, [r7, #6]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a7b4:	797a      	ldrb	r2, [r7, #5]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a7bc:	1d3b      	adds	r3, r7, #4
 800a7be:	781a      	ldrb	r2, [r3, #0]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a7c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a7d0:	f107 0320 	add.w	r3, r7, #32
 800a7d4:	781a      	ldrb	r2, [r3, #0]
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f8:	e007      	b.n	800a80a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a7fa:	7afb      	ldrb	r3, [r7, #11]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff fb18 	bl	8009e34 <USBH_MSC_BOT_Process>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]
      break;
 800a808:	bf00      	nop
  }

  return error;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d101      	bne.n	800a82c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a828:	2302      	movs	r3, #2
 800a82a:	e029      	b.n	800a880 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	79fa      	ldrb	r2, [r7, #7]
 800a830:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f81f 	bl	800a888 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f004 ff29 	bl	800f6d0 <USBH_LL_Init>

  return USBH_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e009      	b.n	800a8ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	33e0      	adds	r3, #224	; 0xe0
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	d9f2      	bls.n	800a89a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e009      	b.n	800a8ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8d4:	d3f1      	bcc.n	800a8ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2240      	movs	r2, #64	; 0x40
 800a8fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d016      	beq.n	800a972 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10e      	bne.n	800a96c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a954:	1c59      	adds	r1, r3, #1
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	33de      	adds	r3, #222	; 0xde
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]
 800a96a:	e004      	b.n	800a976 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a96c:	2302      	movs	r3, #2
 800a96e:	73fb      	strb	r3, [r7, #15]
 800a970:	e001      	b.n	800a976 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a972:	2302      	movs	r3, #2
 800a974:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d204      	bcs.n	800a9aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	78fa      	ldrb	r2, [r7, #3]
 800a9a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a9a8:	e001      	b.n	800a9ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	70fb      	strb	r3, [r7, #3]
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	70bb      	strb	r3, [r7, #2]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a9e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9e6:	e025      	b.n	800aa34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	221a      	movs	r2, #26
 800a9ec:	fb02 f303 	mul.w	r3, r2, r3
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	3302      	adds	r3, #2
 800a9f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	795b      	ldrb	r3, [r3, #5]
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d002      	beq.n	800aa0a <USBH_FindInterface+0x4e>
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	2bff      	cmp	r3, #255	; 0xff
 800aa08:	d111      	bne.n	800aa2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aa0e:	78ba      	ldrb	r2, [r7, #2]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d002      	beq.n	800aa1a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa14:	78bb      	ldrb	r3, [r7, #2]
 800aa16:	2bff      	cmp	r3, #255	; 0xff
 800aa18:	d109      	bne.n	800aa2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aa1e:	787a      	ldrb	r2, [r7, #1]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d002      	beq.n	800aa2a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aa24:	787b      	ldrb	r3, [r7, #1]
 800aa26:	2bff      	cmp	r3, #255	; 0xff
 800aa28:	d101      	bne.n	800aa2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	e006      	b.n	800aa3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	3301      	adds	r3, #1
 800aa32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d9d6      	bls.n	800a9e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800aa3a:	23ff      	movs	r3, #255	; 0xff
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	371c      	adds	r7, #28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f004 fe79 	bl	800f748 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800aa56:	2101      	movs	r1, #1
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f004 ff92 	bl	800f982 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b088      	sub	sp, #32
 800aa6c:	af04      	add	r7, sp, #16
 800aa6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa70:	2302      	movs	r3, #2
 800aa72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d102      	bne.n	800aa8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2203      	movs	r2, #3
 800aa88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b0b      	cmp	r3, #11
 800aa92:	f200 81b3 	bhi.w	800adfc <USBH_Process+0x394>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <USBH_Process+0x34>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aacd 	.word	0x0800aacd
 800aaa0:	0800aaff 	.word	0x0800aaff
 800aaa4:	0800ab67 	.word	0x0800ab67
 800aaa8:	0800ad97 	.word	0x0800ad97
 800aaac:	0800adfd 	.word	0x0800adfd
 800aab0:	0800ac0b 	.word	0x0800ac0b
 800aab4:	0800ad3d 	.word	0x0800ad3d
 800aab8:	0800ac41 	.word	0x0800ac41
 800aabc:	0800ac61 	.word	0x0800ac61
 800aac0:	0800ac81 	.word	0x0800ac81
 800aac4:	0800acaf 	.word	0x0800acaf
 800aac8:	0800ad7f 	.word	0x0800ad7f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8193 	beq.w	800ae00 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aae0:	20c8      	movs	r0, #200	; 0xc8
 800aae2:	f004 ffc5 	bl	800fa70 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f004 fe8b 	bl	800f802 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aafc:	e180      	b.n	800ae00 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d107      	bne.n	800ab18 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab16:	e182      	b.n	800ae1e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab22:	d914      	bls.n	800ab4e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ab3a:	2b03      	cmp	r3, #3
 800ab3c:	d903      	bls.n	800ab46 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	220d      	movs	r2, #13
 800ab42:	701a      	strb	r2, [r3, #0]
      break;
 800ab44:	e16b      	b.n	800ae1e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
      break;
 800ab4c:	e167      	b.n	800ae1e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ab54:	f103 020a 	add.w	r2, r3, #10
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab5e:	200a      	movs	r0, #10
 800ab60:	f004 ff86 	bl	800fa70 <USBH_Delay>
      break;
 800ab64:	e15b      	b.n	800ae1e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab76:	2104      	movs	r1, #4
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab7c:	2064      	movs	r0, #100	; 0x64
 800ab7e:	f004 ff77 	bl	800fa70 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f004 fe16 	bl	800f7b4 <USBH_LL_GetSpeed>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2205      	movs	r2, #5
 800ab96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab98:	2100      	movs	r1, #0
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f001 f92f 	bl	800bdfe <USBH_AllocPipe>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aba8:	2180      	movs	r1, #128	; 0x80
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 f927 	bl	800bdfe <USBH_AllocPipe>
 800abb0:	4603      	mov	r3, r0
 800abb2:	461a      	mov	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7919      	ldrb	r1, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800abcc:	b292      	uxth	r2, r2
 800abce:	9202      	str	r2, [sp, #8]
 800abd0:	2200      	movs	r2, #0
 800abd2:	9201      	str	r2, [sp, #4]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	4603      	mov	r3, r0
 800abd8:	2280      	movs	r2, #128	; 0x80
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 f8e0 	bl	800bda0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7959      	ldrb	r1, [r3, #5]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800abf4:	b292      	uxth	r2, r2
 800abf6:	9202      	str	r2, [sp, #8]
 800abf8:	2200      	movs	r2, #0
 800abfa:	9201      	str	r2, [sp, #4]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4603      	mov	r3, r0
 800ac00:	2200      	movs	r2, #0
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f001 f8cc 	bl	800bda0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac08:	e109      	b.n	800ae1e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f90c 	bl	800ae28 <USBH_HandleEnum>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 80f3 	bne.w	800ae04 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d103      	bne.n	800ac38 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2208      	movs	r2, #8
 800ac34:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac36:	e0e5      	b.n	800ae04 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2207      	movs	r2, #7
 800ac3c:	701a      	strb	r2, [r3, #0]
      break;
 800ac3e:	e0e1      	b.n	800ae04 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f000 80de 	beq.w	800ae08 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac52:	2101      	movs	r1, #1
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ac5e:	e0d3      	b.n	800ae08 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fc20 	bl	800b4b0 <USBH_SetCfg>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 80ca 	bne.w	800ae0c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2209      	movs	r2, #9
 800ac7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac7e:	e0c5      	b.n	800ae0c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00b      	beq.n	800aca6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ac8e:	2101      	movs	r1, #1
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fc30 	bl	800b4f6 <USBH_SetFeature>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f040 80b9 	bne.w	800ae10 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	220a      	movs	r2, #10
 800aca2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aca4:	e0b4      	b.n	800ae10 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	220a      	movs	r2, #10
 800acaa:	701a      	strb	r2, [r3, #0]
      break;
 800acac:	e0b0      	b.n	800ae10 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 80ad 	beq.w	800ae14 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
 800acc6:	e016      	b.n	800acf6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800acc8:	7bfa      	ldrb	r2, [r7, #15]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	32de      	adds	r2, #222	; 0xde
 800acce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd2:	791a      	ldrb	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800acda:	429a      	cmp	r2, r3
 800acdc:	d108      	bne.n	800acf0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800acde:	7bfa      	ldrb	r2, [r7, #15]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	32de      	adds	r2, #222	; 0xde
 800ace4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800acee:	e005      	b.n	800acfc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	3301      	adds	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0e5      	beq.n	800acc8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d016      	beq.n	800ad34 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	4798      	blx	r3
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2206      	movs	r2, #6
 800ad1c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad24:	2103      	movs	r1, #3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad2a:	e073      	b.n	800ae14 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	220d      	movs	r2, #13
 800ad30:	701a      	strb	r2, [r3, #0]
      break;
 800ad32:	e06f      	b.n	800ae14 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	220d      	movs	r2, #13
 800ad38:	701a      	strb	r2, [r3, #0]
      break;
 800ad3a:	e06b      	b.n	800ae14 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d017      	beq.n	800ad76 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	4798      	blx	r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d103      	bne.n	800ad66 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	220b      	movs	r2, #11
 800ad62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad64:	e058      	b.n	800ae18 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d154      	bne.n	800ae18 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	220d      	movs	r2, #13
 800ad72:	701a      	strb	r2, [r3, #0]
      break;
 800ad74:	e050      	b.n	800ae18 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	220d      	movs	r2, #13
 800ad7a:	701a      	strb	r2, [r3, #0]
      break;
 800ad7c:	e04c      	b.n	800ae18 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d049      	beq.n	800ae1c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	4798      	blx	r3
      }
      break;
 800ad94:	e042      	b.n	800ae1c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fd72 	bl	800a888 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d009      	beq.n	800adc2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800add2:	2105      	movs	r1, #5
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d107      	bne.n	800adf4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff fe2b 	bl	800aa48 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800adf2:	e014      	b.n	800ae1e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f004 fca7 	bl	800f748 <USBH_LL_Start>
      break;
 800adfa:	e010      	b.n	800ae1e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800adfc:	bf00      	nop
 800adfe:	e00e      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae00:	bf00      	nop
 800ae02:	e00c      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae04:	bf00      	nop
 800ae06:	e00a      	b.n	800ae1e <USBH_Process+0x3b6>
    break;
 800ae08:	bf00      	nop
 800ae0a:	e008      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e006      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae10:	bf00      	nop
 800ae12:	e004      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae14:	bf00      	nop
 800ae16:	e002      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <USBH_Process+0x3b6>
      break;
 800ae1c:	bf00      	nop
  }
  return USBH_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ae34:	2301      	movs	r3, #1
 800ae36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	785b      	ldrb	r3, [r3, #1]
 800ae3c:	2b07      	cmp	r3, #7
 800ae3e:	f200 81c1 	bhi.w	800b1c4 <USBH_HandleEnum+0x39c>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <USBH_HandleEnum+0x20>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800af27 	.word	0x0800af27
 800ae50:	0800af91 	.word	0x0800af91
 800ae54:	0800b01f 	.word	0x0800b01f
 800ae58:	0800b089 	.word	0x0800b089
 800ae5c:	0800b0f9 	.word	0x0800b0f9
 800ae60:	0800b13f 	.word	0x0800b13f
 800ae64:	0800b185 	.word	0x0800b185
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae68:	2108      	movs	r1, #8
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa50 	bl	800b310 <USBH_Get_DevDesc>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d130      	bne.n	800aedc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7919      	ldrb	r1, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	9202      	str	r2, [sp, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2280      	movs	r2, #128	; 0x80
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 ff77 	bl	800bda0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7959      	ldrb	r1, [r3, #5]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aec6:	b292      	uxth	r2, r2
 800aec8:	9202      	str	r2, [sp, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4603      	mov	r3, r0
 800aed2:	2200      	movs	r2, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 ff63 	bl	800bda0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aeda:	e175      	b.n	800b1c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b03      	cmp	r3, #3
 800aee0:	f040 8172 	bne.w	800b1c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aeea:	3301      	adds	r3, #1
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d903      	bls.n	800af06 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	220d      	movs	r2, #13
 800af02:	701a      	strb	r2, [r3, #0]
      break;
 800af04:	e160      	b.n	800b1c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	795b      	ldrb	r3, [r3, #5]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 ff97 	bl	800be40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	791b      	ldrb	r3, [r3, #4]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 ff91 	bl	800be40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
      break;
 800af24:	e150      	b.n	800b1c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800af26:	2112      	movs	r1, #18
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f9f1 	bl	800b310 <USBH_Get_DevDesc>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2202      	movs	r2, #2
 800af3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af3e:	e145      	b.n	800b1cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b03      	cmp	r3, #3
 800af44:	f040 8142 	bne.w	800b1cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af4e:	3301      	adds	r3, #1
 800af50:	b2da      	uxtb	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d903      	bls.n	800af6a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	220d      	movs	r2, #13
 800af66:	701a      	strb	r2, [r3, #0]
      break;
 800af68:	e130      	b.n	800b1cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	795b      	ldrb	r3, [r3, #5]
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 ff65 	bl	800be40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	791b      	ldrb	r3, [r3, #4]
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 ff5f 	bl	800be40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	701a      	strb	r2, [r3, #0]
      break;
 800af8e:	e11d      	b.n	800b1cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af90:	2101      	movs	r1, #1
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa68 	bl	800b468 <USBH_SetAddress>
 800af98:	4603      	mov	r3, r0
 800af9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d132      	bne.n	800b008 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800afa2:	2002      	movs	r0, #2
 800afa4:	f004 fd64 	bl	800fa70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2203      	movs	r2, #3
 800afb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7919      	ldrb	r1, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800afca:	b292      	uxth	r2, r2
 800afcc:	9202      	str	r2, [sp, #8]
 800afce:	2200      	movs	r2, #0
 800afd0:	9201      	str	r2, [sp, #4]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	4603      	mov	r3, r0
 800afd6:	2280      	movs	r2, #128	; 0x80
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fee1 	bl	800bda0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7959      	ldrb	r1, [r3, #5]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aff2:	b292      	uxth	r2, r2
 800aff4:	9202      	str	r2, [sp, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	9201      	str	r2, [sp, #4]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4603      	mov	r3, r0
 800affe:	2200      	movs	r2, #0
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fecd 	bl	800bda0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b006:	e0e3      	b.n	800b1d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	f040 80e0 	bne.w	800b1d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	220d      	movs	r2, #13
 800b014:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	705a      	strb	r2, [r3, #1]
      break;
 800b01c:	e0d8      	b.n	800b1d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b01e:	2109      	movs	r1, #9
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f99d 	bl	800b360 <USBH_Get_CfgDesc>
 800b026:	4603      	mov	r3, r0
 800b028:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d103      	bne.n	800b038 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2204      	movs	r2, #4
 800b034:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b036:	e0cd      	b.n	800b1d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	f040 80ca 	bne.w	800b1d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b046:	3301      	adds	r3, #1
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b056:	2b03      	cmp	r3, #3
 800b058:	d903      	bls.n	800b062 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	220d      	movs	r2, #13
 800b05e:	701a      	strb	r2, [r3, #0]
      break;
 800b060:	e0b8      	b.n	800b1d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	795b      	ldrb	r3, [r3, #5]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 fee9 	bl	800be40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	791b      	ldrb	r3, [r3, #4]
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fee3 	bl	800be40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
      break;
 800b086:	e0a5      	b.n	800b1d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f965 	bl	800b360 <USBH_Get_CfgDesc>
 800b096:	4603      	mov	r3, r0
 800b098:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d103      	bne.n	800b0a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2205      	movs	r2, #5
 800b0a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0a6:	e097      	b.n	800b1d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	f040 8094 	bne.w	800b1d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d903      	bls.n	800b0d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	220d      	movs	r2, #13
 800b0ce:	701a      	strb	r2, [r3, #0]
      break;
 800b0d0:	e082      	b.n	800b1d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	795b      	ldrb	r3, [r3, #5]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 feb1 	bl	800be40 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	791b      	ldrb	r3, [r3, #4]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 feab 	bl	800be40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	701a      	strb	r2, [r3, #0]
      break;
 800b0f6:	e06f      	b.n	800b1d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d019      	beq.n	800b136 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b10e:	23ff      	movs	r3, #255	; 0xff
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f949 	bl	800b3a8 <USBH_Get_StringDesc>
 800b116:	4603      	mov	r3, r0
 800b118:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d103      	bne.n	800b128 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2206      	movs	r2, #6
 800b124:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b126:	e059      	b.n	800b1dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d156      	bne.n	800b1dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2206      	movs	r2, #6
 800b132:	705a      	strb	r2, [r3, #1]
      break;
 800b134:	e052      	b.n	800b1dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2206      	movs	r2, #6
 800b13a:	705a      	strb	r2, [r3, #1]
      break;
 800b13c:	e04e      	b.n	800b1dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b144:	2b00      	cmp	r3, #0
 800b146:	d019      	beq.n	800b17c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b154:	23ff      	movs	r3, #255	; 0xff
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f926 	bl	800b3a8 <USBH_Get_StringDesc>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d103      	bne.n	800b16e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2207      	movs	r2, #7
 800b16a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b16c:	e038      	b.n	800b1e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
 800b170:	2b03      	cmp	r3, #3
 800b172:	d135      	bne.n	800b1e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2207      	movs	r2, #7
 800b178:	705a      	strb	r2, [r3, #1]
      break;
 800b17a:	e031      	b.n	800b1e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2207      	movs	r2, #7
 800b180:	705a      	strb	r2, [r3, #1]
      break;
 800b182:	e02d      	b.n	800b1e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d017      	beq.n	800b1be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b19a:	23ff      	movs	r3, #255	; 0xff
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f903 	bl	800b3a8 <USBH_Get_StringDesc>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b1b0:	e018      	b.n	800b1e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d115      	bne.n	800b1e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b1bc:	e012      	b.n	800b1e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b1c2:	e00f      	b.n	800b1e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b1c4:	bf00      	nop
 800b1c6:	e00e      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1c8:	bf00      	nop
 800b1ca:	e00c      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1cc:	bf00      	nop
 800b1ce:	e00a      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1d0:	bf00      	nop
 800b1d2:	e008      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1d4:	bf00      	nop
 800b1d6:	e006      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1d8:	bf00      	nop
 800b1da:	e004      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1dc:	bf00      	nop
 800b1de:	e002      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1e0:	bf00      	nop
 800b1e2:	e000      	b.n	800b1e6 <USBH_HandleEnum+0x3be>
      break;
 800b1e4:	bf00      	nop
  }
  return Status;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f804 	bl	800b232 <USBH_HandleSof>
}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b0b      	cmp	r3, #11
 800b242:	d10a      	bne.n	800b25a <USBH_HandleSof+0x28>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	4798      	blx	r3
  }
}
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b272:	bf00      	nop
}
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b28e:	bf00      	nop
}
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f004 fa48 	bl	800f77e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	791b      	ldrb	r3, [r3, #4]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fda3 	bl	800be40 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	795b      	ldrb	r3, [r3, #5]
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fd9d 	bl	800be40 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af02      	add	r7, sp, #8
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b322:	78fb      	ldrb	r3, [r7, #3]
 800b324:	b29b      	uxth	r3, r3
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4613      	mov	r3, r2
 800b32a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b32e:	2100      	movs	r1, #0
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f864 	bl	800b3fe <USBH_GetDescriptor>
 800b336:	4603      	mov	r3, r0
 800b338:	73fb      	strb	r3, [r7, #15]
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	b292      	uxth	r2, r2
 800b350:	4619      	mov	r1, r3
 800b352:	f000 f918 	bl	800b586 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b356:	7bfb      	ldrb	r3, [r7, #15]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af02      	add	r7, sp, #8
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	331c      	adds	r3, #28
 800b370:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b372:	887b      	ldrh	r3, [r7, #2]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b37c:	2100      	movs	r1, #0
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f83d 	bl	800b3fe <USBH_GetDescriptor>
 800b384:	4603      	mov	r3, r0
 800b386:	72fb      	strb	r3, [r7, #11]
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d107      	bne.n	800b39e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b394:	887a      	ldrh	r2, [r7, #2]
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 f964 	bl	800b666 <USBH_ParseCfgDesc>
  }

  return status;
 800b39e:	7afb      	ldrb	r3, [r7, #11]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	607a      	str	r2, [r7, #4]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	72fb      	strb	r3, [r7, #11]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b3c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b3cc:	893b      	ldrh	r3, [r7, #8]
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f812 	bl	800b3fe <USBH_GetDescriptor>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75fb      	strb	r3, [r7, #23]
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d107      	bne.n	800b3f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b3ea:	893a      	ldrh	r2, [r7, #8]
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fa37 	bl	800b862 <USBH_ParseStringDesc>
  }

  return status;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	607b      	str	r3, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	72fb      	strb	r3, [r7, #11]
 800b40c:	4613      	mov	r3, r2
 800b40e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	789b      	ldrb	r3, [r3, #2]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d11c      	bne.n	800b452 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2206      	movs	r2, #6
 800b428:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	893a      	ldrh	r2, [r7, #8]
 800b42e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b430:	893b      	ldrh	r3, [r7, #8]
 800b432:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b43a:	d104      	bne.n	800b446 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f240 4209 	movw	r2, #1033	; 0x409
 800b442:	829a      	strh	r2, [r3, #20]
 800b444:	e002      	b.n	800b44c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	8b3a      	ldrh	r2, [r7, #24]
 800b450:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b452:	8b3b      	ldrh	r3, [r7, #24]
 800b454:	461a      	mov	r2, r3
 800b456:	6879      	ldr	r1, [r7, #4]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fa50 	bl	800b8fe <USBH_CtlReq>
 800b45e:	4603      	mov	r3, r0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	460b      	mov	r3, r1
 800b472:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	789b      	ldrb	r3, [r3, #2]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d10f      	bne.n	800b49c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2205      	movs	r2, #5
 800b486:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b49c:	2200      	movs	r2, #0
 800b49e:	2100      	movs	r1, #0
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fa2c 	bl	800b8fe <USBH_CtlReq>
 800b4a6:	4603      	mov	r3, r0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	789b      	ldrb	r3, [r3, #2]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d10e      	bne.n	800b4e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2209      	movs	r2, #9
 800b4ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	887a      	ldrh	r2, [r7, #2]
 800b4d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa09 	bl	800b8fe <USBH_CtlReq>
 800b4ec:	4603      	mov	r3, r0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	789b      	ldrb	r3, [r3, #2]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d10f      	bne.n	800b52a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2200      	movs	r2, #0
 800b50e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2203      	movs	r2, #3
 800b514:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b516:	78fb      	ldrb	r3, [r7, #3]
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b52a:	2200      	movs	r2, #0
 800b52c:	2100      	movs	r1, #0
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f9e5 	bl	800b8fe <USBH_CtlReq>
 800b534:	4603      	mov	r3, r0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	460b      	mov	r3, r1
 800b548:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	789b      	ldrb	r3, [r3, #2]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d10f      	bne.n	800b572 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b564:	78fb      	ldrb	r3, [r7, #3]
 800b566:	b29a      	uxth	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b572:	2200      	movs	r2, #0
 800b574:	2100      	movs	r1, #0
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f9c1 	bl	800b8fe <USBH_CtlReq>
 800b57c:	4603      	mov	r3, r0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b586:	b480      	push	{r7}
 800b588:	b085      	sub	sp, #20
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	4613      	mov	r3, r2
 800b592:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	785a      	ldrb	r2, [r3, #1]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	3303      	adds	r3, #3
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	791a      	ldrb	r2, [r3, #4]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	795a      	ldrb	r2, [r3, #5]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	799a      	ldrb	r2, [r3, #6]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	79da      	ldrb	r2, [r3, #7]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d939      	bls.n	800b65a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	3309      	adds	r3, #9
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	021b      	lsls	r3, r3, #8
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	330a      	adds	r3, #10
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b29a      	uxth	r2, r3
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	330b      	adds	r3, #11
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	b29b      	uxth	r3, r3
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	b29b      	uxth	r3, r3
 800b616:	4313      	orrs	r3, r2
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	330c      	adds	r3, #12
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b29a      	uxth	r2, r3
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	330d      	adds	r3, #13
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	b29b      	uxth	r3, r3
 800b632:	4313      	orrs	r3, r2
 800b634:	b29a      	uxth	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	7b9a      	ldrb	r2, [r3, #14]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	7bda      	ldrb	r2, [r3, #15]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	7c1a      	ldrb	r2, [r3, #16]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	7c5a      	ldrb	r2, [r3, #17]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	745a      	strb	r2, [r3, #17]
  }
}
 800b65a:	bf00      	nop
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b08a      	sub	sp, #40	; 0x28
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	4613      	mov	r3, r2
 800b672:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b67e:	2300      	movs	r3, #0
 800b680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	781a      	ldrb	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	785a      	ldrb	r2, [r3, #1]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	3302      	adds	r3, #2
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	3303      	adds	r3, #3
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	791a      	ldrb	r2, [r3, #4]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	795a      	ldrb	r2, [r3, #5]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	799a      	ldrb	r2, [r3, #6]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	79da      	ldrb	r2, [r3, #7]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	7a1a      	ldrb	r2, [r3, #8]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	2b09      	cmp	r3, #9
 800b6e0:	d95f      	bls.n	800b7a2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b6e2:	2309      	movs	r3, #9
 800b6e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6ea:	e051      	b.n	800b790 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6ec:	f107 0316 	add.w	r3, r7, #22
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6f4:	f000 f8e8 	bl	800b8c8 <USBH_GetNextDesc>
 800b6f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b04      	cmp	r3, #4
 800b700:	d146      	bne.n	800b790 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b706:	221a      	movs	r2, #26
 800b708:	fb02 f303 	mul.w	r3, r2, r3
 800b70c:	3308      	adds	r3, #8
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	4413      	add	r3, r2
 800b712:	3302      	adds	r3, #2
 800b714:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b718:	69f8      	ldr	r0, [r7, #28]
 800b71a:	f000 f846 	bl	800b7aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b724:	2300      	movs	r3, #0
 800b726:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b728:	e022      	b.n	800b770 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b72a:	f107 0316 	add.w	r3, r7, #22
 800b72e:	4619      	mov	r1, r3
 800b730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b732:	f000 f8c9 	bl	800b8c8 <USBH_GetNextDesc>
 800b736:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	785b      	ldrb	r3, [r3, #1]
 800b73c:	2b05      	cmp	r3, #5
 800b73e:	d117      	bne.n	800b770 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b744:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b748:	3201      	adds	r2, #1
 800b74a:	00d2      	lsls	r2, r2, #3
 800b74c:	211a      	movs	r1, #26
 800b74e:	fb01 f303 	mul.w	r3, r1, r3
 800b752:	4413      	add	r3, r2
 800b754:	3308      	adds	r3, #8
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	3304      	adds	r3, #4
 800b75c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b75e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b760:	69b8      	ldr	r0, [r7, #24]
 800b762:	f000 f851 	bl	800b808 <USBH_ParseEPDesc>
            ep_ix++;
 800b766:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b76a:	3301      	adds	r3, #1
 800b76c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	791b      	ldrb	r3, [r3, #4]
 800b774:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b778:	429a      	cmp	r2, r3
 800b77a:	d204      	bcs.n	800b786 <USBH_ParseCfgDesc+0x120>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	885a      	ldrh	r2, [r3, #2]
 800b780:	8afb      	ldrh	r3, [r7, #22]
 800b782:	429a      	cmp	r2, r3
 800b784:	d8d1      	bhi.n	800b72a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b78a:	3301      	adds	r3, #1
 800b78c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b794:	2b01      	cmp	r3, #1
 800b796:	d804      	bhi.n	800b7a2 <USBH_ParseCfgDesc+0x13c>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	885a      	ldrh	r2, [r3, #2]
 800b79c:	8afb      	ldrh	r3, [r7, #22]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d8a4      	bhi.n	800b6ec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3728      	adds	r7, #40	; 0x28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	785a      	ldrb	r2, [r3, #1]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	789a      	ldrb	r2, [r3, #2]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	78da      	ldrb	r2, [r3, #3]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	791a      	ldrb	r2, [r3, #4]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	795a      	ldrb	r2, [r3, #5]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	799a      	ldrb	r2, [r3, #6]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	79da      	ldrb	r2, [r3, #7]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	7a1a      	ldrb	r2, [r3, #8]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	721a      	strb	r2, [r3, #8]
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	785a      	ldrb	r2, [r3, #1]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	789a      	ldrb	r2, [r3, #2]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	78da      	ldrb	r2, [r3, #3]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3304      	adds	r3, #4
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	b29a      	uxth	r2, r3
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	3305      	adds	r3, #5
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	b29b      	uxth	r3, r3
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	b29b      	uxth	r3, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	799a      	ldrb	r2, [r3, #6]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	719a      	strb	r2, [r3, #6]
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b862:	b480      	push	{r7}
 800b864:	b087      	sub	sp, #28
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	4613      	mov	r3, r2
 800b86e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b03      	cmp	r3, #3
 800b878:	d120      	bne.n	800b8bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	1e9a      	subs	r2, r3, #2
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	4293      	cmp	r3, r2
 800b884:	bf28      	it	cs
 800b886:	4613      	movcs	r3, r2
 800b888:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3302      	adds	r3, #2
 800b88e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b890:	2300      	movs	r3, #0
 800b892:	82fb      	strh	r3, [r7, #22]
 800b894:	e00b      	b.n	800b8ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b896:	8afb      	ldrh	r3, [r7, #22]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	781a      	ldrb	r2, [r3, #0]
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8a8:	8afb      	ldrh	r3, [r7, #22]
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	82fb      	strh	r3, [r7, #22]
 800b8ae:	8afa      	ldrh	r2, [r7, #22]
 800b8b0:	8abb      	ldrh	r3, [r7, #20]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d3ef      	bcc.n	800b896 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
  }
}
 800b8bc:	bf00      	nop
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	881a      	ldrh	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4413      	add	r3, r2
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	4613      	mov	r3, r2
 800b90a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b90c:	2301      	movs	r3, #1
 800b90e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	789b      	ldrb	r3, [r3, #2]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d002      	beq.n	800b91e <USBH_CtlReq+0x20>
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d00f      	beq.n	800b93c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b91c:	e027      	b.n	800b96e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	88fa      	ldrh	r2, [r7, #6]
 800b928:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2202      	movs	r2, #2
 800b934:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b936:	2301      	movs	r3, #1
 800b938:	75fb      	strb	r3, [r7, #23]
      break;
 800b93a:	e018      	b.n	800b96e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 f81b 	bl	800b978 <USBH_HandleControl>
 800b942:	4603      	mov	r3, r0
 800b944:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <USBH_CtlReq+0x54>
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d106      	bne.n	800b960 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	761a      	strb	r2, [r3, #24]
      break;
 800b95e:	e005      	b.n	800b96c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b960:	7dfb      	ldrb	r3, [r7, #23]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d102      	bne.n	800b96c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2201      	movs	r2, #1
 800b96a:	709a      	strb	r2, [r3, #2]
      break;
 800b96c:	bf00      	nop
  }
  return status;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3718      	adds	r7, #24
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b980:	2301      	movs	r3, #1
 800b982:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b984:	2300      	movs	r3, #0
 800b986:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	7e1b      	ldrb	r3, [r3, #24]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	2b0a      	cmp	r3, #10
 800b990:	f200 8156 	bhi.w	800bc40 <USBH_HandleControl+0x2c8>
 800b994:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <USBH_HandleControl+0x24>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9c9 	.word	0x0800b9c9
 800b9a0:	0800b9e3 	.word	0x0800b9e3
 800b9a4:	0800ba4d 	.word	0x0800ba4d
 800b9a8:	0800ba73 	.word	0x0800ba73
 800b9ac:	0800baab 	.word	0x0800baab
 800b9b0:	0800bad5 	.word	0x0800bad5
 800b9b4:	0800bb27 	.word	0x0800bb27
 800b9b8:	0800bb49 	.word	0x0800bb49
 800b9bc:	0800bb85 	.word	0x0800bb85
 800b9c0:	0800bbab 	.word	0x0800bbab
 800b9c4:	0800bbe9 	.word	0x0800bbe9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0110 	add.w	r1, r3, #16
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	795b      	ldrb	r3, [r3, #5]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f943 	bl	800bc60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2202      	movs	r2, #2
 800b9de:	761a      	strb	r2, [r3, #24]
      break;
 800b9e0:	e139      	b.n	800bc56 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	795b      	ldrb	r3, [r3, #5]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f003 ffb7 	bl	800f95c <USBH_LL_GetURBState>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d11e      	bne.n	800ba36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7c1b      	ldrb	r3, [r3, #16]
 800b9fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	8adb      	ldrh	r3, [r3, #22]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba0a:	7b7b      	ldrb	r3, [r7, #13]
 800ba0c:	2b80      	cmp	r3, #128	; 0x80
 800ba0e:	d103      	bne.n	800ba18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2203      	movs	r2, #3
 800ba14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba16:	e115      	b.n	800bc44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2205      	movs	r2, #5
 800ba1c:	761a      	strb	r2, [r3, #24]
      break;
 800ba1e:	e111      	b.n	800bc44 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ba20:	7b7b      	ldrb	r3, [r7, #13]
 800ba22:	2b80      	cmp	r3, #128	; 0x80
 800ba24:	d103      	bne.n	800ba2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2209      	movs	r2, #9
 800ba2a:	761a      	strb	r2, [r3, #24]
      break;
 800ba2c:	e10a      	b.n	800bc44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2207      	movs	r2, #7
 800ba32:	761a      	strb	r2, [r3, #24]
      break;
 800ba34:	e106      	b.n	800bc44 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d003      	beq.n	800ba44 <USBH_HandleControl+0xcc>
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	f040 8100 	bne.w	800bc44 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	220b      	movs	r2, #11
 800ba48:	761a      	strb	r2, [r3, #24]
      break;
 800ba4a:	e0fb      	b.n	800bc44 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6899      	ldr	r1, [r3, #8]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	899a      	ldrh	r2, [r3, #12]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	791b      	ldrb	r3, [r3, #4]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f93a 	bl	800bcde <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	761a      	strb	r2, [r3, #24]
      break;
 800ba70:	e0f1      	b.n	800bc56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	791b      	ldrb	r3, [r3, #4]
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f003 ff6f 	bl	800f95c <USBH_LL_GetURBState>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d102      	bne.n	800ba8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2209      	movs	r2, #9
 800ba8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	2b05      	cmp	r3, #5
 800ba92:	d102      	bne.n	800ba9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ba94:	2303      	movs	r3, #3
 800ba96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba98:	e0d6      	b.n	800bc48 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	2b04      	cmp	r3, #4
 800ba9e:	f040 80d3 	bne.w	800bc48 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	220b      	movs	r2, #11
 800baa6:	761a      	strb	r2, [r3, #24]
      break;
 800baa8:	e0ce      	b.n	800bc48 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6899      	ldr	r1, [r3, #8]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	899a      	ldrh	r2, [r3, #12]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	795b      	ldrb	r3, [r3, #5]
 800bab6:	2001      	movs	r0, #1
 800bab8:	9000      	str	r0, [sp, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f8ea 	bl	800bc94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2206      	movs	r2, #6
 800bad0:	761a      	strb	r2, [r3, #24]
      break;
 800bad2:	e0c0      	b.n	800bc56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	795b      	ldrb	r3, [r3, #5]
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f003 ff3e 	bl	800f95c <USBH_LL_GetURBState>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d103      	bne.n	800baf2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2207      	movs	r2, #7
 800baee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800baf0:	e0ac      	b.n	800bc4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	2b05      	cmp	r3, #5
 800baf6:	d105      	bne.n	800bb04 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	220c      	movs	r2, #12
 800bafc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bafe:	2303      	movs	r3, #3
 800bb00:	73fb      	strb	r3, [r7, #15]
      break;
 800bb02:	e0a3      	b.n	800bc4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d103      	bne.n	800bb12 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2205      	movs	r2, #5
 800bb0e:	761a      	strb	r2, [r3, #24]
      break;
 800bb10:	e09c      	b.n	800bc4c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	f040 8099 	bne.w	800bc4c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	220b      	movs	r2, #11
 800bb1e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb20:	2302      	movs	r3, #2
 800bb22:	73fb      	strb	r3, [r7, #15]
      break;
 800bb24:	e092      	b.n	800bc4c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	791b      	ldrb	r3, [r3, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f8d5 	bl	800bcde <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2208      	movs	r2, #8
 800bb44:	761a      	strb	r2, [r3, #24]

      break;
 800bb46:	e086      	b.n	800bc56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	791b      	ldrb	r3, [r3, #4]
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f003 ff04 	bl	800f95c <USBH_LL_GetURBState>
 800bb54:	4603      	mov	r3, r0
 800bb56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d105      	bne.n	800bb6a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	220d      	movs	r2, #13
 800bb62:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb68:	e072      	b.n	800bc50 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d103      	bne.n	800bb78 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	220b      	movs	r2, #11
 800bb74:	761a      	strb	r2, [r3, #24]
      break;
 800bb76:	e06b      	b.n	800bc50 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b05      	cmp	r3, #5
 800bb7c:	d168      	bne.n	800bc50 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	73fb      	strb	r3, [r7, #15]
      break;
 800bb82:	e065      	b.n	800bc50 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	795b      	ldrb	r3, [r3, #5]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	9200      	str	r2, [sp, #0]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f87f 	bl	800bc94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	220a      	movs	r2, #10
 800bba6:	761a      	strb	r2, [r3, #24]
      break;
 800bba8:	e055      	b.n	800bc56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	795b      	ldrb	r3, [r3, #5]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f003 fed3 	bl	800f95c <USBH_LL_GetURBState>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d105      	bne.n	800bbcc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	220d      	movs	r2, #13
 800bbc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bbca:	e043      	b.n	800bc54 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d103      	bne.n	800bbda <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2209      	movs	r2, #9
 800bbd6:	761a      	strb	r2, [r3, #24]
      break;
 800bbd8:	e03c      	b.n	800bc54 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	d139      	bne.n	800bc54 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	220b      	movs	r2, #11
 800bbe4:	761a      	strb	r2, [r3, #24]
      break;
 800bbe6:	e035      	b.n	800bc54 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7e5b      	ldrb	r3, [r3, #25]
 800bbec:	3301      	adds	r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	765a      	strb	r2, [r3, #25]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7e5b      	ldrb	r3, [r3, #25]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d806      	bhi.n	800bc0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc08:	e025      	b.n	800bc56 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc10:	2106      	movs	r1, #6
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	795b      	ldrb	r3, [r3, #5]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f90c 	bl	800be40 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	791b      	ldrb	r3, [r3, #4]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f906 	bl	800be40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc3e:	e00a      	b.n	800bc56 <USBH_HandleControl+0x2de>

    default:
      break;
 800bc40:	bf00      	nop
 800bc42:	e008      	b.n	800bc56 <USBH_HandleControl+0x2de>
      break;
 800bc44:	bf00      	nop
 800bc46:	e006      	b.n	800bc56 <USBH_HandleControl+0x2de>
      break;
 800bc48:	bf00      	nop
 800bc4a:	e004      	b.n	800bc56 <USBH_HandleControl+0x2de>
      break;
 800bc4c:	bf00      	nop
 800bc4e:	e002      	b.n	800bc56 <USBH_HandleControl+0x2de>
      break;
 800bc50:	bf00      	nop
 800bc52:	e000      	b.n	800bc56 <USBH_HandleControl+0x2de>
      break;
 800bc54:	bf00      	nop
  }

  return status;
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af04      	add	r7, sp, #16
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc6e:	79f9      	ldrb	r1, [r7, #7]
 800bc70:	2300      	movs	r3, #0
 800bc72:	9303      	str	r3, [sp, #12]
 800bc74:	2308      	movs	r3, #8
 800bc76:	9302      	str	r3, [sp, #8]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	2300      	movs	r3, #0
 800bc82:	2200      	movs	r2, #0
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f003 fe38 	bl	800f8fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af04      	add	r7, sp, #16
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	4611      	mov	r1, r2
 800bca0:	461a      	mov	r2, r3
 800bca2:	460b      	mov	r3, r1
 800bca4:	80fb      	strh	r3, [r7, #6]
 800bca6:	4613      	mov	r3, r2
 800bca8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d001      	beq.n	800bcb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcb8:	7979      	ldrb	r1, [r7, #5]
 800bcba:	7e3b      	ldrb	r3, [r7, #24]
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	9302      	str	r3, [sp, #8]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	2300      	movs	r3, #0
 800bccc:	2200      	movs	r2, #0
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f003 fe13 	bl	800f8fa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b088      	sub	sp, #32
 800bce2:	af04      	add	r7, sp, #16
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	60b9      	str	r1, [r7, #8]
 800bce8:	4611      	mov	r1, r2
 800bcea:	461a      	mov	r2, r3
 800bcec:	460b      	mov	r3, r1
 800bcee:	80fb      	strh	r3, [r7, #6]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bcf4:	7979      	ldrb	r1, [r7, #5]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	88fb      	ldrh	r3, [r7, #6]
 800bcfc:	9302      	str	r3, [sp, #8]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	2301      	movs	r3, #1
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	2300      	movs	r3, #0
 800bd08:	2201      	movs	r2, #1
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f003 fdf5 	bl	800f8fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd10:	2300      	movs	r3, #0

}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af04      	add	r7, sp, #16
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	4611      	mov	r1, r2
 800bd26:	461a      	mov	r2, r3
 800bd28:	460b      	mov	r3, r1
 800bd2a:	80fb      	strh	r3, [r7, #6]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd3e:	7979      	ldrb	r1, [r7, #5]
 800bd40:	7e3b      	ldrb	r3, [r7, #24]
 800bd42:	9303      	str	r3, [sp, #12]
 800bd44:	88fb      	ldrh	r3, [r7, #6]
 800bd46:	9302      	str	r3, [sp, #8]
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	2302      	movs	r3, #2
 800bd52:	2200      	movs	r2, #0
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f003 fdd0 	bl	800f8fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4611      	mov	r1, r2
 800bd70:	461a      	mov	r2, r3
 800bd72:	460b      	mov	r3, r1
 800bd74:	80fb      	strh	r3, [r7, #6]
 800bd76:	4613      	mov	r3, r2
 800bd78:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd7a:	7979      	ldrb	r1, [r7, #5]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	9302      	str	r3, [sp, #8]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	2301      	movs	r3, #1
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	2201      	movs	r2, #1
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f003 fdb2 	bl	800f8fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af04      	add	r7, sp, #16
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	4608      	mov	r0, r1
 800bdaa:	4611      	mov	r1, r2
 800bdac:	461a      	mov	r2, r3
 800bdae:	4603      	mov	r3, r0
 800bdb0:	70fb      	strb	r3, [r7, #3]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70bb      	strb	r3, [r7, #2]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bdba:	7878      	ldrb	r0, [r7, #1]
 800bdbc:	78ba      	ldrb	r2, [r7, #2]
 800bdbe:	78f9      	ldrb	r1, [r7, #3]
 800bdc0:	8b3b      	ldrh	r3, [r7, #24]
 800bdc2:	9302      	str	r3, [sp, #8]
 800bdc4:	7d3b      	ldrb	r3, [r7, #20]
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	7c3b      	ldrb	r3, [r7, #16]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	4603      	mov	r3, r0
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f003 fd45 	bl	800f85e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b082      	sub	sp, #8
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	460b      	mov	r3, r1
 800bde8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bdea:	78fb      	ldrb	r3, [r7, #3]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f003 fd64 	bl	800f8bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f836 	bl	800be7c <USBH_GetFreePipe>
 800be10:	4603      	mov	r3, r0
 800be12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be14:	89fb      	ldrh	r3, [r7, #14]
 800be16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d00a      	beq.n	800be34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800be1e:	78fa      	ldrb	r2, [r7, #3]
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	f003 030f 	and.w	r3, r3, #15
 800be26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be2a:	6879      	ldr	r1, [r7, #4]
 800be2c:	33e0      	adds	r3, #224	; 0xe0
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	440b      	add	r3, r1
 800be32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be34:	89fb      	ldrh	r3, [r7, #14]
 800be36:	b2db      	uxtb	r3, r3
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	2b0a      	cmp	r3, #10
 800be50:	d80d      	bhi.n	800be6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	33e0      	adds	r3, #224	; 0xe0
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	78fb      	ldrb	r3, [r7, #3]
 800be60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be64:	6879      	ldr	r1, [r7, #4]
 800be66:	33e0      	adds	r3, #224	; 0xe0
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
 800be8c:	e00f      	b.n	800beae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	33e0      	adds	r3, #224	; 0xe0
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d102      	bne.n	800bea8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	e007      	b.n	800beb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	3301      	adds	r3, #1
 800beac:	73fb      	strb	r3, [r7, #15]
 800beae:	7bfb      	ldrb	r3, [r7, #15]
 800beb0:	2b0a      	cmp	r3, #10
 800beb2:	d9ec      	bls.n	800be8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800beb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3714      	adds	r7, #20
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	4a08      	ldr	r2, [pc, #32]	; (800bef4 <disk_status+0x30>)
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	79fa      	ldrb	r2, [r7, #7]
 800bedc:	4905      	ldr	r1, [pc, #20]	; (800bef4 <disk_status+0x30>)
 800bede:	440a      	add	r2, r1
 800bee0:	7a12      	ldrb	r2, [r2, #8]
 800bee2:	4610      	mov	r0, r2
 800bee4:	4798      	blx	r3
 800bee6:	4603      	mov	r3, r0
 800bee8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	20001de8 	.word	0x20001de8

0800bef8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	4a0d      	ldr	r2, [pc, #52]	; (800bf40 <disk_initialize+0x48>)
 800bf0a:	5cd3      	ldrb	r3, [r2, r3]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d111      	bne.n	800bf34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bf10:	79fb      	ldrb	r3, [r7, #7]
 800bf12:	4a0b      	ldr	r2, [pc, #44]	; (800bf40 <disk_initialize+0x48>)
 800bf14:	2101      	movs	r1, #1
 800bf16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	4a09      	ldr	r2, [pc, #36]	; (800bf40 <disk_initialize+0x48>)
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	79fa      	ldrb	r2, [r7, #7]
 800bf26:	4906      	ldr	r1, [pc, #24]	; (800bf40 <disk_initialize+0x48>)
 800bf28:	440a      	add	r2, r1
 800bf2a:	7a12      	ldrb	r2, [r2, #8]
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4798      	blx	r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20001de8 	.word	0x20001de8

0800bf44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	4603      	mov	r3, r0
 800bf52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	4a0a      	ldr	r2, [pc, #40]	; (800bf80 <disk_read+0x3c>)
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	689c      	ldr	r4, [r3, #8]
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
 800bf62:	4a07      	ldr	r2, [pc, #28]	; (800bf80 <disk_read+0x3c>)
 800bf64:	4413      	add	r3, r2
 800bf66:	7a18      	ldrb	r0, [r3, #8]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	68b9      	ldr	r1, [r7, #8]
 800bf6e:	47a0      	blx	r4
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	371c      	adds	r7, #28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd90      	pop	{r4, r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20001de8 	.word	0x20001de8

0800bf84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf84:	b590      	push	{r4, r7, lr}
 800bf86:	b087      	sub	sp, #28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
 800bf8e:	603b      	str	r3, [r7, #0]
 800bf90:	4603      	mov	r3, r0
 800bf92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	4a0a      	ldr	r2, [pc, #40]	; (800bfc0 <disk_write+0x3c>)
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	68dc      	ldr	r4, [r3, #12]
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	4a07      	ldr	r2, [pc, #28]	; (800bfc0 <disk_write+0x3c>)
 800bfa4:	4413      	add	r3, r2
 800bfa6:	7a18      	ldrb	r0, [r3, #8]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	47a0      	blx	r4
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	371c      	adds	r7, #28
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd90      	pop	{r4, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	20001de8 	.word	0x20001de8

0800bfc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	603a      	str	r2, [r7, #0]
 800bfce:	71fb      	strb	r3, [r7, #7]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	4a09      	ldr	r2, [pc, #36]	; (800bffc <disk_ioctl+0x38>)
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	79fa      	ldrb	r2, [r7, #7]
 800bfe2:	4906      	ldr	r1, [pc, #24]	; (800bffc <disk_ioctl+0x38>)
 800bfe4:	440a      	add	r2, r1
 800bfe6:	7a10      	ldrb	r0, [r2, #8]
 800bfe8:	79b9      	ldrb	r1, [r7, #6]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	4798      	blx	r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]
  return res;
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20001de8 	.word	0x20001de8

0800c000 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3301      	adds	r3, #1
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c010:	89fb      	ldrh	r3, [r7, #14]
 800c012:	021b      	lsls	r3, r3, #8
 800c014:	b21a      	sxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	b21b      	sxth	r3, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	b21b      	sxth	r3, r3
 800c020:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c022:	89fb      	ldrh	r3, [r7, #14]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3303      	adds	r3, #3
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	021b      	lsls	r3, r3, #8
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	3202      	adds	r2, #2
 800c048:	7812      	ldrb	r2, [r2, #0]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	021b      	lsls	r3, r3, #8
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	3201      	adds	r2, #1
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	4313      	orrs	r3, r2
 800c05a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	021b      	lsls	r3, r3, #8
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	7812      	ldrb	r2, [r2, #0]
 800c064:	4313      	orrs	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]
	return rv;
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	887a      	ldrh	r2, [r7, #2]
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	887b      	ldrh	r3, [r7, #2]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	887a      	ldrh	r2, [r7, #2]
 800c09c:	b2d2      	uxtb	r2, r2
 800c09e:	701a      	strb	r2, [r3, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	1c5a      	adds	r2, r3, #1
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	701a      	strb	r2, [r3, #0]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	607a      	str	r2, [r7, #4]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	701a      	strb	r2, [r3, #0]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	0a1b      	lsrs	r3, r3, #8
 800c0ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	607a      	str	r2, [r7, #4]
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	b2d2      	uxtb	r2, r2
 800c0f6:	701a      	strb	r2, [r3, #0]
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00d      	beq.n	800c13a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	1c53      	adds	r3, r2, #1
 800c122:	613b      	str	r3, [r7, #16]
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	1c59      	adds	r1, r3, #1
 800c128:	6179      	str	r1, [r7, #20]
 800c12a:	7812      	ldrb	r2, [r2, #0]
 800c12c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3b01      	subs	r3, #1
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1f1      	bne.n	800c11e <mem_cpy+0x1a>
	}
}
 800c13a:	bf00      	nop
 800c13c:	371c      	adds	r7, #28
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c146:	b480      	push	{r7}
 800c148:	b087      	sub	sp, #28
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	617a      	str	r2, [r7, #20]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	b2d2      	uxtb	r2, r2
 800c160:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3b01      	subs	r3, #1
 800c166:	607b      	str	r3, [r7, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1f3      	bne.n	800c156 <mem_set+0x10>
}
 800c16e:	bf00      	nop
 800c170:	bf00      	nop
 800c172:	371c      	adds	r7, #28
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c17c:	b480      	push	{r7}
 800c17e:	b089      	sub	sp, #36	; 0x24
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	61fb      	str	r3, [r7, #28]
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	1c5a      	adds	r2, r3, #1
 800c198:	61fa      	str	r2, [r7, #28]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	4619      	mov	r1, r3
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	61ba      	str	r2, [r7, #24]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	1acb      	subs	r3, r1, r3
 800c1a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	607b      	str	r3, [r7, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <mem_cmp+0x40>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d0eb      	beq.n	800c194 <mem_cmp+0x18>

	return r;
 800c1bc:	697b      	ldr	r3, [r7, #20]
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3724      	adds	r7, #36	; 0x24
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c1d4:	e002      	b.n	800c1dc <chk_chr+0x12>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	607b      	str	r3, [r7, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <chk_chr+0x26>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d1f2      	bne.n	800c1d6 <chk_chr+0xc>
	return *str;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c20a:	2300      	movs	r3, #0
 800c20c:	60bb      	str	r3, [r7, #8]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	60fb      	str	r3, [r7, #12]
 800c212:	e029      	b.n	800c268 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c214:	4a27      	ldr	r2, [pc, #156]	; (800c2b4 <chk_lock+0xb4>)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	4413      	add	r3, r2
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01d      	beq.n	800c25e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c222:	4a24      	ldr	r2, [pc, #144]	; (800c2b4 <chk_lock+0xb4>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	011b      	lsls	r3, r3, #4
 800c228:	4413      	add	r3, r2
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d116      	bne.n	800c262 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c234:	4a1f      	ldr	r2, [pc, #124]	; (800c2b4 <chk_lock+0xb4>)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	011b      	lsls	r3, r3, #4
 800c23a:	4413      	add	r3, r2
 800c23c:	3304      	adds	r3, #4
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c244:	429a      	cmp	r2, r3
 800c246:	d10c      	bne.n	800c262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c248:	4a1a      	ldr	r2, [pc, #104]	; (800c2b4 <chk_lock+0xb4>)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	4413      	add	r3, r2
 800c250:	3308      	adds	r3, #8
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c258:	429a      	cmp	r2, r3
 800c25a:	d102      	bne.n	800c262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c25c:	e007      	b.n	800c26e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c25e:	2301      	movs	r3, #1
 800c260:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d9d2      	bls.n	800c214 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b02      	cmp	r3, #2
 800c272:	d109      	bne.n	800c288 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d102      	bne.n	800c280 <chk_lock+0x80>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d101      	bne.n	800c284 <chk_lock+0x84>
 800c280:	2300      	movs	r3, #0
 800c282:	e010      	b.n	800c2a6 <chk_lock+0xa6>
 800c284:	2312      	movs	r3, #18
 800c286:	e00e      	b.n	800c2a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d108      	bne.n	800c2a0 <chk_lock+0xa0>
 800c28e:	4a09      	ldr	r2, [pc, #36]	; (800c2b4 <chk_lock+0xb4>)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	011b      	lsls	r3, r3, #4
 800c294:	4413      	add	r3, r2
 800c296:	330c      	adds	r3, #12
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c29e:	d101      	bne.n	800c2a4 <chk_lock+0xa4>
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	e000      	b.n	800c2a6 <chk_lock+0xa6>
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20001bc8 	.word	0x20001bc8

0800c2b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	607b      	str	r3, [r7, #4]
 800c2c2:	e002      	b.n	800c2ca <enq_lock+0x12>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	607b      	str	r3, [r7, #4]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d806      	bhi.n	800c2de <enq_lock+0x26>
 800c2d0:	4a09      	ldr	r2, [pc, #36]	; (800c2f8 <enq_lock+0x40>)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	011b      	lsls	r3, r3, #4
 800c2d6:	4413      	add	r3, r2
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f2      	bne.n	800c2c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	bf14      	ite	ne
 800c2e4:	2301      	movne	r3, #1
 800c2e6:	2300      	moveq	r3, #0
 800c2e8:	b2db      	uxtb	r3, r3
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	20001bc8 	.word	0x20001bc8

0800c2fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	e01f      	b.n	800c34c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c30c:	4a41      	ldr	r2, [pc, #260]	; (800c414 <inc_lock+0x118>)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	011b      	lsls	r3, r3, #4
 800c312:	4413      	add	r3, r2
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d113      	bne.n	800c346 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c31e:	4a3d      	ldr	r2, [pc, #244]	; (800c414 <inc_lock+0x118>)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	4413      	add	r3, r2
 800c326:	3304      	adds	r3, #4
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c32e:	429a      	cmp	r2, r3
 800c330:	d109      	bne.n	800c346 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c332:	4a38      	ldr	r2, [pc, #224]	; (800c414 <inc_lock+0x118>)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	4413      	add	r3, r2
 800c33a:	3308      	adds	r3, #8
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c342:	429a      	cmp	r2, r3
 800c344:	d006      	beq.n	800c354 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d9dc      	bls.n	800c30c <inc_lock+0x10>
 800c352:	e000      	b.n	800c356 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c354:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d132      	bne.n	800c3c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c35c:	2300      	movs	r3, #0
 800c35e:	60fb      	str	r3, [r7, #12]
 800c360:	e002      	b.n	800c368 <inc_lock+0x6c>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d806      	bhi.n	800c37c <inc_lock+0x80>
 800c36e:	4a29      	ldr	r2, [pc, #164]	; (800c414 <inc_lock+0x118>)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	4413      	add	r3, r2
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1f2      	bne.n	800c362 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d101      	bne.n	800c386 <inc_lock+0x8a>
 800c382:	2300      	movs	r3, #0
 800c384:	e040      	b.n	800c408 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	4922      	ldr	r1, [pc, #136]	; (800c414 <inc_lock+0x118>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	440b      	add	r3, r1
 800c392:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	491e      	ldr	r1, [pc, #120]	; (800c414 <inc_lock+0x118>)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	440b      	add	r3, r1
 800c3a0:	3304      	adds	r3, #4
 800c3a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	695a      	ldr	r2, [r3, #20]
 800c3a8:	491a      	ldr	r1, [pc, #104]	; (800c414 <inc_lock+0x118>)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	011b      	lsls	r3, r3, #4
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c3b4:	4a17      	ldr	r2, [pc, #92]	; (800c414 <inc_lock+0x118>)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	011b      	lsls	r3, r3, #4
 800c3ba:	4413      	add	r3, r2
 800c3bc:	330c      	adds	r3, #12
 800c3be:	2200      	movs	r2, #0
 800c3c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d009      	beq.n	800c3dc <inc_lock+0xe0>
 800c3c8:	4a12      	ldr	r2, [pc, #72]	; (800c414 <inc_lock+0x118>)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	4413      	add	r3, r2
 800c3d0:	330c      	adds	r3, #12
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <inc_lock+0xe0>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e015      	b.n	800c408 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d108      	bne.n	800c3f4 <inc_lock+0xf8>
 800c3e2:	4a0c      	ldr	r2, [pc, #48]	; (800c414 <inc_lock+0x118>)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	011b      	lsls	r3, r3, #4
 800c3e8:	4413      	add	r3, r2
 800c3ea:	330c      	adds	r3, #12
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	e001      	b.n	800c3f8 <inc_lock+0xfc>
 800c3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3f8:	4906      	ldr	r1, [pc, #24]	; (800c414 <inc_lock+0x118>)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	011b      	lsls	r3, r3, #4
 800c3fe:	440b      	add	r3, r1
 800c400:	330c      	adds	r3, #12
 800c402:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3301      	adds	r3, #1
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	20001bc8 	.word	0x20001bc8

0800c418 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3b01      	subs	r3, #1
 800c424:	607b      	str	r3, [r7, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d825      	bhi.n	800c478 <dec_lock+0x60>
		n = Files[i].ctr;
 800c42c:	4a17      	ldr	r2, [pc, #92]	; (800c48c <dec_lock+0x74>)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	011b      	lsls	r3, r3, #4
 800c432:	4413      	add	r3, r2
 800c434:	330c      	adds	r3, #12
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c43a:	89fb      	ldrh	r3, [r7, #14]
 800c43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c440:	d101      	bne.n	800c446 <dec_lock+0x2e>
 800c442:	2300      	movs	r3, #0
 800c444:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c446:	89fb      	ldrh	r3, [r7, #14]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <dec_lock+0x3a>
 800c44c:	89fb      	ldrh	r3, [r7, #14]
 800c44e:	3b01      	subs	r3, #1
 800c450:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c452:	4a0e      	ldr	r2, [pc, #56]	; (800c48c <dec_lock+0x74>)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	011b      	lsls	r3, r3, #4
 800c458:	4413      	add	r3, r2
 800c45a:	330c      	adds	r3, #12
 800c45c:	89fa      	ldrh	r2, [r7, #14]
 800c45e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c460:	89fb      	ldrh	r3, [r7, #14]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d105      	bne.n	800c472 <dec_lock+0x5a>
 800c466:	4a09      	ldr	r2, [pc, #36]	; (800c48c <dec_lock+0x74>)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	011b      	lsls	r3, r3, #4
 800c46c:	4413      	add	r3, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	737b      	strb	r3, [r7, #13]
 800c476:	e001      	b.n	800c47c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c478:	2302      	movs	r3, #2
 800c47a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c47c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	20001bc8 	.word	0x20001bc8

0800c490 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	e010      	b.n	800c4c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c49e:	4a0d      	ldr	r2, [pc, #52]	; (800c4d4 <clear_lock+0x44>)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	011b      	lsls	r3, r3, #4
 800c4a4:	4413      	add	r3, r2
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d105      	bne.n	800c4ba <clear_lock+0x2a>
 800c4ae:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <clear_lock+0x44>)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	4413      	add	r3, r2
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	3301      	adds	r3, #1
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d9eb      	bls.n	800c49e <clear_lock+0xe>
	}
}
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	20001bc8 	.word	0x20001bc8

0800c4d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	78db      	ldrb	r3, [r3, #3]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d034      	beq.n	800c556 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7858      	ldrb	r0, [r3, #1]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	f7ff fd40 	bl	800bf84 <disk_write>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d002      	beq.n	800c510 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	73fb      	strb	r3, [r7, #15]
 800c50e:	e022      	b.n	800c556 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	1ad2      	subs	r2, r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	429a      	cmp	r2, r3
 800c524:	d217      	bcs.n	800c556 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	789b      	ldrb	r3, [r3, #2]
 800c52a:	613b      	str	r3, [r7, #16]
 800c52c:	e010      	b.n	800c550 <sync_window+0x78>
					wsect += fs->fsize;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	4413      	add	r3, r2
 800c536:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7858      	ldrb	r0, [r3, #1]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c542:	2301      	movs	r3, #1
 800c544:	697a      	ldr	r2, [r7, #20]
 800c546:	f7ff fd1d 	bl	800bf84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	3b01      	subs	r3, #1
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d8eb      	bhi.n	800c52e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c556:	7bfb      	ldrb	r3, [r7, #15]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3718      	adds	r7, #24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d01b      	beq.n	800c5b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ffad 	bl	800c4d8 <sync_window>
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d113      	bne.n	800c5b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7858      	ldrb	r0, [r3, #1]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c592:	2301      	movs	r3, #1
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	f7ff fcd5 	bl	800bf44 <disk_read>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff ff87 	bl	800c4d8 <sync_window>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d158      	bne.n	800c686 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d148      	bne.n	800c66e <sync_fs+0xb2>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	791b      	ldrb	r3, [r3, #4]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d144      	bne.n	800c66e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3334      	adds	r3, #52	; 0x34
 800c5e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff fda9 	bl	800c146 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3334      	adds	r3, #52	; 0x34
 800c5f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff fd38 	bl	800c076 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3334      	adds	r3, #52	; 0x34
 800c60a:	4921      	ldr	r1, [pc, #132]	; (800c690 <sync_fs+0xd4>)
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fd4d 	bl	800c0ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	3334      	adds	r3, #52	; 0x34
 800c616:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c61a:	491e      	ldr	r1, [pc, #120]	; (800c694 <sync_fs+0xd8>)
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7ff fd45 	bl	800c0ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3334      	adds	r3, #52	; 0x34
 800c626:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	4619      	mov	r1, r3
 800c630:	4610      	mov	r0, r2
 800c632:	f7ff fd3b 	bl	800c0ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3334      	adds	r3, #52	; 0x34
 800c63a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7ff fd31 	bl	800c0ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	1c5a      	adds	r2, r3, #1
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7858      	ldrb	r0, [r3, #1]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c662:	2301      	movs	r3, #1
 800c664:	f7ff fc8e 	bl	800bf84 <disk_write>
			fs->fsi_flag = 0;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	2200      	movs	r2, #0
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff fca4 	bl	800bfc4 <disk_ioctl>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <sync_fs+0xca>
 800c682:	2301      	movs	r3, #1
 800c684:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	41615252 	.word	0x41615252
 800c694:	61417272 	.word	0x61417272

0800c698 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	3b02      	subs	r3, #2
 800c6a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	3b02      	subs	r3, #2
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d301      	bcc.n	800c6b8 <clust2sect+0x20>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	e008      	b.n	800c6ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	895b      	ldrh	r3, [r3, #10]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	fb03 f202 	mul.w	r2, r3, r2
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	4413      	add	r3, r2
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b086      	sub	sp, #24
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d904      	bls.n	800c6f6 <get_fat+0x20>
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d302      	bcc.n	800c6fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	e08f      	b.n	800c81c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c700:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b03      	cmp	r3, #3
 800c708:	d062      	beq.n	800c7d0 <get_fat+0xfa>
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	dc7c      	bgt.n	800c808 <get_fat+0x132>
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d002      	beq.n	800c718 <get_fat+0x42>
 800c712:	2b02      	cmp	r3, #2
 800c714:	d042      	beq.n	800c79c <get_fat+0xc6>
 800c716:	e077      	b.n	800c808 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	085b      	lsrs	r3, r3, #1
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	4413      	add	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	0a5b      	lsrs	r3, r3, #9
 800c72e:	4413      	add	r3, r2
 800c730:	4619      	mov	r1, r3
 800c732:	6938      	ldr	r0, [r7, #16]
 800c734:	f7ff ff14 	bl	800c560 <move_window>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d167      	bne.n	800c80e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1c5a      	adds	r2, r3, #1
 800c742:	60fa      	str	r2, [r7, #12]
 800c744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	4413      	add	r3, r2
 800c74c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	0a5b      	lsrs	r3, r3, #9
 800c75a:	4413      	add	r3, r2
 800c75c:	4619      	mov	r1, r3
 800c75e:	6938      	ldr	r0, [r7, #16]
 800c760:	f7ff fefe 	bl	800c560 <move_window>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d153      	bne.n	800c812 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4413      	add	r3, r2
 800c774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c778:	021b      	lsls	r3, r3, #8
 800c77a:	461a      	mov	r2, r3
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	4313      	orrs	r3, r2
 800c780:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <get_fat+0xbc>
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	091b      	lsrs	r3, r3, #4
 800c790:	e002      	b.n	800c798 <get_fat+0xc2>
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c798:	617b      	str	r3, [r7, #20]
			break;
 800c79a:	e03f      	b.n	800c81c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	4413      	add	r3, r2
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6938      	ldr	r0, [r7, #16]
 800c7aa:	f7ff fed9 	bl	800c560 <move_window>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d130      	bne.n	800c816 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7c2:	4413      	add	r3, r2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7ff fc1b 	bl	800c000 <ld_word>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	617b      	str	r3, [r7, #20]
			break;
 800c7ce:	e025      	b.n	800c81c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	09db      	lsrs	r3, r3, #7
 800c7d8:	4413      	add	r3, r2
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6938      	ldr	r0, [r7, #16]
 800c7de:	f7ff febf 	bl	800c560 <move_window>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d118      	bne.n	800c81a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c7f6:	4413      	add	r3, r2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7ff fc19 	bl	800c030 <ld_dword>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c804:	617b      	str	r3, [r7, #20]
			break;
 800c806:	e009      	b.n	800c81c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c808:	2301      	movs	r3, #1
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	e006      	b.n	800c81c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c80e:	bf00      	nop
 800c810:	e004      	b.n	800c81c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c812:	bf00      	nop
 800c814:	e002      	b.n	800c81c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c816:	bf00      	nop
 800c818:	e000      	b.n	800c81c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c81a:	bf00      	nop
		}
	}

	return val;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c826:	b590      	push	{r4, r7, lr}
 800c828:	b089      	sub	sp, #36	; 0x24
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	60f8      	str	r0, [r7, #12]
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c832:	2302      	movs	r3, #2
 800c834:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	f240 80d2 	bls.w	800c9e2 <put_fat+0x1bc>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	429a      	cmp	r2, r3
 800c846:	f080 80cc 	bcs.w	800c9e2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	f000 8096 	beq.w	800c980 <put_fat+0x15a>
 800c854:	2b03      	cmp	r3, #3
 800c856:	f300 80cd 	bgt.w	800c9f4 <put_fat+0x1ce>
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d002      	beq.n	800c864 <put_fat+0x3e>
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d06e      	beq.n	800c940 <put_fat+0x11a>
 800c862:	e0c7      	b.n	800c9f4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	085b      	lsrs	r3, r3, #1
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	4413      	add	r3, r2
 800c870:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	0a5b      	lsrs	r3, r3, #9
 800c87a:	4413      	add	r3, r2
 800c87c:	4619      	mov	r1, r3
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff fe6e 	bl	800c560 <move_window>
 800c884:	4603      	mov	r3, r0
 800c886:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c888:	7ffb      	ldrb	r3, [r7, #31]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 80ab 	bne.w	800c9e6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	1c59      	adds	r1, r3, #1
 800c89a:	61b9      	str	r1, [r7, #24]
 800c89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a0:	4413      	add	r3, r2
 800c8a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	f003 0301 	and.w	r3, r3, #1
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00d      	beq.n	800c8ca <put_fat+0xa4>
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b25b      	sxtb	r3, r3
 800c8b4:	f003 030f 	and.w	r3, r3, #15
 800c8b8:	b25a      	sxtb	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	b25b      	sxtb	r3, r3
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	b25b      	sxtb	r3, r3
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	e001      	b.n	800c8ce <put_fat+0xa8>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	0a5b      	lsrs	r3, r3, #9
 800c8e0:	4413      	add	r3, r2
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f7ff fe3b 	bl	800c560 <move_window>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8ee:	7ffb      	ldrb	r3, [r7, #31]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d17a      	bne.n	800c9ea <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c900:	4413      	add	r3, r2
 800c902:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f003 0301 	and.w	r3, r3, #1
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <put_fat+0xf0>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	091b      	lsrs	r3, r3, #4
 800c912:	b2db      	uxtb	r3, r3
 800c914:	e00e      	b.n	800c934 <put_fat+0x10e>
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	b25b      	sxtb	r3, r3
 800c91c:	f023 030f 	bic.w	r3, r3, #15
 800c920:	b25a      	sxtb	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	0a1b      	lsrs	r3, r3, #8
 800c926:	b25b      	sxtb	r3, r3
 800c928:	f003 030f 	and.w	r3, r3, #15
 800c92c:	b25b      	sxtb	r3, r3
 800c92e:	4313      	orrs	r3, r2
 800c930:	b25b      	sxtb	r3, r3
 800c932:	b2db      	uxtb	r3, r3
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2201      	movs	r2, #1
 800c93c:	70da      	strb	r2, [r3, #3]
			break;
 800c93e:	e059      	b.n	800c9f4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	0a1b      	lsrs	r3, r3, #8
 800c948:	4413      	add	r3, r2
 800c94a:	4619      	mov	r1, r3
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f7ff fe07 	bl	800c560 <move_window>
 800c952:	4603      	mov	r3, r0
 800c954:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c956:	7ffb      	ldrb	r3, [r7, #31]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d148      	bne.n	800c9ee <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c96a:	4413      	add	r3, r2
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	b292      	uxth	r2, r2
 800c970:	4611      	mov	r1, r2
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff fb7f 	bl	800c076 <st_word>
			fs->wflag = 1;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2201      	movs	r2, #1
 800c97c:	70da      	strb	r2, [r3, #3]
			break;
 800c97e:	e039      	b.n	800c9f4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	09db      	lsrs	r3, r3, #7
 800c988:	4413      	add	r3, r2
 800c98a:	4619      	mov	r1, r3
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fde7 	bl	800c560 <move_window>
 800c992:	4603      	mov	r3, r0
 800c994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c996:	7ffb      	ldrb	r3, [r7, #31]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d12a      	bne.n	800c9f2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9b0:	4413      	add	r3, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff fb3c 	bl	800c030 <ld_dword>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9be:	4323      	orrs	r3, r4
 800c9c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9d0:	4413      	add	r3, r2
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fb69 	bl	800c0ac <st_dword>
			fs->wflag = 1;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	70da      	strb	r2, [r3, #3]
			break;
 800c9e0:	e008      	b.n	800c9f4 <put_fat+0x1ce>
		}
	}
 800c9e2:	bf00      	nop
 800c9e4:	e006      	b.n	800c9f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9e6:	bf00      	nop
 800c9e8:	e004      	b.n	800c9f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9ea:	bf00      	nop
 800c9ec:	e002      	b.n	800c9f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9ee:	bf00      	nop
 800c9f0:	e000      	b.n	800c9f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c9f2:	bf00      	nop
	return res;
 800c9f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3724      	adds	r7, #36	; 0x24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd90      	pop	{r4, r7, pc}

0800c9fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b088      	sub	sp, #32
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	60f8      	str	r0, [r7, #12]
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d904      	bls.n	800ca24 <remove_chain+0x26>
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d301      	bcc.n	800ca28 <remove_chain+0x2a>
 800ca24:	2302      	movs	r3, #2
 800ca26:	e04b      	b.n	800cac0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00c      	beq.n	800ca48 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	69b8      	ldr	r0, [r7, #24]
 800ca36:	f7ff fef6 	bl	800c826 <put_fat>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca3e:	7ffb      	ldrb	r3, [r7, #31]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <remove_chain+0x4a>
 800ca44:	7ffb      	ldrb	r3, [r7, #31]
 800ca46:	e03b      	b.n	800cac0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fe43 	bl	800c6d6 <get_fat>
 800ca50:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d031      	beq.n	800cabc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d101      	bne.n	800ca62 <remove_chain+0x64>
 800ca5e:	2302      	movs	r3, #2
 800ca60:	e02e      	b.n	800cac0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca68:	d101      	bne.n	800ca6e <remove_chain+0x70>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e028      	b.n	800cac0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca6e:	2200      	movs	r2, #0
 800ca70:	68b9      	ldr	r1, [r7, #8]
 800ca72:	69b8      	ldr	r0, [r7, #24]
 800ca74:	f7ff fed7 	bl	800c826 <put_fat>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca7c:	7ffb      	ldrb	r3, [r7, #31]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <remove_chain+0x88>
 800ca82:	7ffb      	ldrb	r3, [r7, #31]
 800ca84:	e01c      	b.n	800cac0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	695a      	ldr	r2, [r3, #20]
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	3b02      	subs	r3, #2
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d20b      	bcs.n	800caac <remove_chain+0xae>
			fs->free_clst++;
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	695b      	ldr	r3, [r3, #20]
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	791b      	ldrb	r3, [r3, #4]
 800caa2:	f043 0301 	orr.w	r3, r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d3c6      	bcc.n	800ca48 <remove_chain+0x4a>
 800caba:	e000      	b.n	800cabe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cabc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10d      	bne.n	800cafa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d004      	beq.n	800caf4 <create_chain+0x2c>
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	69ba      	ldr	r2, [r7, #24]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d31b      	bcc.n	800cb2c <create_chain+0x64>
 800caf4:	2301      	movs	r3, #1
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	e018      	b.n	800cb2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff fdea 	bl	800c6d6 <get_fat>
 800cb02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d801      	bhi.n	800cb0e <create_chain+0x46>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e070      	b.n	800cbf0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb14:	d101      	bne.n	800cb1a <create_chain+0x52>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	e06a      	b.n	800cbf0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d201      	bcs.n	800cb28 <create_chain+0x60>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	e063      	b.n	800cbf0 <create_chain+0x128>
		scl = clst;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	3301      	adds	r3, #1
 800cb34:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d307      	bcc.n	800cb50 <create_chain+0x88>
				ncl = 2;
 800cb40:	2302      	movs	r3, #2
 800cb42:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb44:	69fa      	ldr	r2, [r7, #28]
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d901      	bls.n	800cb50 <create_chain+0x88>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e04f      	b.n	800cbf0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb50:	69f9      	ldr	r1, [r7, #28]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fdbf 	bl	800c6d6 <get_fat>
 800cb58:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00e      	beq.n	800cb7e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d003      	beq.n	800cb6e <create_chain+0xa6>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d101      	bne.n	800cb72 <create_chain+0xaa>
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	e03e      	b.n	800cbf0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb72:	69fa      	ldr	r2, [r7, #28]
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d1da      	bne.n	800cb30 <create_chain+0x68>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e038      	b.n	800cbf0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb7e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb80:	f04f 32ff 	mov.w	r2, #4294967295
 800cb84:	69f9      	ldr	r1, [r7, #28]
 800cb86:	6938      	ldr	r0, [r7, #16]
 800cb88:	f7ff fe4d 	bl	800c826 <put_fat>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d109      	bne.n	800cbaa <create_chain+0xe2>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d006      	beq.n	800cbaa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6938      	ldr	r0, [r7, #16]
 800cba2:	f7ff fe40 	bl	800c826 <put_fat>
 800cba6:	4603      	mov	r3, r0
 800cba8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d116      	bne.n	800cbde <create_chain+0x116>
		fs->last_clst = ncl;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	695a      	ldr	r2, [r3, #20]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	3b02      	subs	r3, #2
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d804      	bhi.n	800cbce <create_chain+0x106>
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	1e5a      	subs	r2, r3, #1
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	f043 0301 	orr.w	r3, r3, #1
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	711a      	strb	r2, [r3, #4]
 800cbdc:	e007      	b.n	800cbee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d102      	bne.n	800cbea <create_chain+0x122>
 800cbe4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe8:	e000      	b.n	800cbec <create_chain+0x124>
 800cbea:	2301      	movs	r3, #1
 800cbec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cbee:	69fb      	ldr	r3, [r7, #28]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3720      	adds	r7, #32
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	0a5b      	lsrs	r3, r3, #9
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	8952      	ldrh	r2, [r2, #10]
 800cc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	613a      	str	r2, [r7, #16]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <clmt_clust+0x3a>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e010      	b.n	800cc54 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d307      	bcc.n	800cc4a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3304      	adds	r3, #4
 800cc46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc48:	e7e9      	b.n	800cc1e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cc4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	4413      	add	r3, r2
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc76:	d204      	bcs.n	800cc82 <dir_sdi+0x22>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	f003 031f 	and.w	r3, r3, #31
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc82:	2302      	movs	r3, #2
 800cc84:	e063      	b.n	800cd4e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d106      	bne.n	800cca6 <dir_sdi+0x46>
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d902      	bls.n	800cca6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10c      	bne.n	800ccc6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	095b      	lsrs	r3, r3, #5
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	8912      	ldrh	r2, [r2, #8]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d301      	bcc.n	800ccbc <dir_sdi+0x5c>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e048      	b.n	800cd4e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	61da      	str	r2, [r3, #28]
 800ccc4:	e029      	b.n	800cd1a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	895b      	ldrh	r3, [r3, #10]
 800ccca:	025b      	lsls	r3, r3, #9
 800cccc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccce:	e019      	b.n	800cd04 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6979      	ldr	r1, [r7, #20]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff fcfe 	bl	800c6d6 <get_fat>
 800ccda:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce2:	d101      	bne.n	800cce8 <dir_sdi+0x88>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e032      	b.n	800cd4e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d904      	bls.n	800ccf8 <dir_sdi+0x98>
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	699b      	ldr	r3, [r3, #24]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d301      	bcc.n	800ccfc <dir_sdi+0x9c>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e028      	b.n	800cd4e <dir_sdi+0xee>
			ofs -= csz;
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d2e1      	bcs.n	800ccd0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd0c:	6979      	ldr	r1, [r7, #20]
 800cd0e:	6938      	ldr	r0, [r7, #16]
 800cd10:	f7ff fcc2 	bl	800c698 <clust2sect>
 800cd14:	4602      	mov	r2, r0
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	69db      	ldr	r3, [r3, #28]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <dir_sdi+0xcc>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	e010      	b.n	800cd4e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	69da      	ldr	r2, [r3, #28]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	0a5b      	lsrs	r3, r3, #9
 800cd34:	441a      	add	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd46:	441a      	add	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b086      	sub	sp, #24
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	3320      	adds	r3, #32
 800cd6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <dir_next+0x28>
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd7c:	d301      	bcc.n	800cd82 <dir_next+0x2c>
 800cd7e:	2304      	movs	r3, #4
 800cd80:	e0aa      	b.n	800ced8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f040 8098 	bne.w	800cebe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	095b      	lsrs	r3, r3, #5
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	8912      	ldrh	r2, [r2, #8]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	f0c0 8088 	bcc.w	800cebe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	61da      	str	r2, [r3, #28]
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	e08f      	b.n	800ced8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	0a5b      	lsrs	r3, r3, #9
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	8952      	ldrh	r2, [r2, #10]
 800cdc0:	3a01      	subs	r2, #1
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d17a      	bne.n	800cebe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	f7ff fc80 	bl	800c6d6 <get_fat>
 800cdd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d801      	bhi.n	800cde2 <dir_next+0x8c>
 800cdde:	2302      	movs	r3, #2
 800cde0:	e07a      	b.n	800ced8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d101      	bne.n	800cdee <dir_next+0x98>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e074      	b.n	800ced8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d358      	bcc.n	800ceaa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d104      	bne.n	800ce08 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	61da      	str	r2, [r3, #28]
 800ce04:	2304      	movs	r3, #4
 800ce06:	e067      	b.n	800ced8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	4610      	mov	r0, r2
 800ce12:	f7ff fe59 	bl	800cac8 <create_chain>
 800ce16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <dir_next+0xcc>
 800ce1e:	2307      	movs	r3, #7
 800ce20:	e05a      	b.n	800ced8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d101      	bne.n	800ce2c <dir_next+0xd6>
 800ce28:	2302      	movs	r3, #2
 800ce2a:	e055      	b.n	800ced8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce32:	d101      	bne.n	800ce38 <dir_next+0xe2>
 800ce34:	2301      	movs	r3, #1
 800ce36:	e04f      	b.n	800ced8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f7ff fb4d 	bl	800c4d8 <sync_window>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d001      	beq.n	800ce48 <dir_next+0xf2>
 800ce44:	2301      	movs	r3, #1
 800ce46:	e047      	b.n	800ced8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3334      	adds	r3, #52	; 0x34
 800ce4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce50:	2100      	movs	r1, #0
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7ff f977 	bl	800c146 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce58:	2300      	movs	r3, #0
 800ce5a:	613b      	str	r3, [r7, #16]
 800ce5c:	6979      	ldr	r1, [r7, #20]
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f7ff fc1a 	bl	800c698 <clust2sect>
 800ce64:	4602      	mov	r2, r0
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	631a      	str	r2, [r3, #48]	; 0x30
 800ce6a:	e012      	b.n	800ce92 <dir_next+0x13c>
						fs->wflag = 1;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f7ff fb30 	bl	800c4d8 <sync_window>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <dir_next+0x12c>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e02a      	b.n	800ced8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	3301      	adds	r3, #1
 800ce86:	613b      	str	r3, [r7, #16]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	895b      	ldrh	r3, [r3, #10]
 800ce96:	461a      	mov	r2, r3
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d3e6      	bcc.n	800ce6c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	1ad2      	subs	r2, r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ceb0:	6979      	ldr	r1, [r7, #20]
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f7ff fbf0 	bl	800c698 <clust2sect>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced0:	441a      	add	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cef0:	2100      	movs	r1, #0
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff feb4 	bl	800cc60 <dir_sdi>
 800cef8:	4603      	mov	r3, r0
 800cefa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d12b      	bne.n	800cf5a <dir_alloc+0x7a>
		n = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	69db      	ldr	r3, [r3, #28]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7ff fb27 	bl	800c560 <move_window>
 800cf12:	4603      	mov	r3, r0
 800cf14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d11d      	bne.n	800cf58 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6a1b      	ldr	r3, [r3, #32]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2be5      	cmp	r3, #229	; 0xe5
 800cf24:	d004      	beq.n	800cf30 <dir_alloc+0x50>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d107      	bne.n	800cf40 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	3301      	adds	r3, #1
 800cf34:	613b      	str	r3, [r7, #16]
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d102      	bne.n	800cf44 <dir_alloc+0x64>
 800cf3e:	e00c      	b.n	800cf5a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf40:	2300      	movs	r3, #0
 800cf42:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf44:	2101      	movs	r1, #1
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff ff05 	bl	800cd56 <dir_next>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d0d7      	beq.n	800cf06 <dir_alloc+0x26>
 800cf56:	e000      	b.n	800cf5a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cf58:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf5a:	7dfb      	ldrb	r3, [r7, #23]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d101      	bne.n	800cf64 <dir_alloc+0x84>
 800cf60:	2307      	movs	r3, #7
 800cf62:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3718      	adds	r7, #24
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b084      	sub	sp, #16
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	331a      	adds	r3, #26
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff f83f 	bl	800c000 <ld_word>
 800cf82:	4603      	mov	r3, r0
 800cf84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	d109      	bne.n	800cfa2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	3314      	adds	r3, #20
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff f834 	bl	800c000 <ld_word>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	041b      	lsls	r3, r3, #16
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	331a      	adds	r3, #26
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	b292      	uxth	r2, r2
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7ff f857 	bl	800c076 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d109      	bne.n	800cfe4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f103 0214 	add.w	r2, r3, #20
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	0c1b      	lsrs	r3, r3, #16
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4610      	mov	r0, r2
 800cfe0:	f7ff f849 	bl	800c076 <st_word>
	}
}
 800cfe4:	bf00      	nop
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	331a      	adds	r3, #26
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7ff f800 	bl	800c000 <ld_word>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <cmp_lfn+0x1e>
 800d006:	2300      	movs	r3, #0
 800d008:	e059      	b.n	800d0be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d012:	1e5a      	subs	r2, r3, #1
 800d014:	4613      	mov	r3, r2
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	4413      	add	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d020:	2301      	movs	r3, #1
 800d022:	81fb      	strh	r3, [r7, #14]
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	e033      	b.n	800d092 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d02a:	4a27      	ldr	r2, [pc, #156]	; (800d0c8 <cmp_lfn+0xdc>)
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	4413      	add	r3, r2
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	461a      	mov	r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	4413      	add	r3, r2
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe ffe1 	bl	800c000 <ld_word>
 800d03e:	4603      	mov	r3, r0
 800d040:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d042:	89fb      	ldrh	r3, [r7, #14]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01a      	beq.n	800d07e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2bfe      	cmp	r3, #254	; 0xfe
 800d04c:	d812      	bhi.n	800d074 <cmp_lfn+0x88>
 800d04e:	89bb      	ldrh	r3, [r7, #12]
 800d050:	4618      	mov	r0, r3
 800d052:	f002 f99f 	bl	800f394 <ff_wtoupper>
 800d056:	4603      	mov	r3, r0
 800d058:	461c      	mov	r4, r3
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	1c5a      	adds	r2, r3, #1
 800d05e:	617a      	str	r2, [r7, #20]
 800d060:	005b      	lsls	r3, r3, #1
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	4413      	add	r3, r2
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f002 f993 	bl	800f394 <ff_wtoupper>
 800d06e:	4603      	mov	r3, r0
 800d070:	429c      	cmp	r4, r3
 800d072:	d001      	beq.n	800d078 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d074:	2300      	movs	r3, #0
 800d076:	e022      	b.n	800d0be <cmp_lfn+0xd2>
			}
			wc = uc;
 800d078:	89bb      	ldrh	r3, [r7, #12]
 800d07a:	81fb      	strh	r3, [r7, #14]
 800d07c:	e006      	b.n	800d08c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d07e:	89bb      	ldrh	r3, [r7, #12]
 800d080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d084:	4293      	cmp	r3, r2
 800d086:	d001      	beq.n	800d08c <cmp_lfn+0xa0>
 800d088:	2300      	movs	r3, #0
 800d08a:	e018      	b.n	800d0be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	3301      	adds	r3, #1
 800d090:	613b      	str	r3, [r7, #16]
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2b0c      	cmp	r3, #12
 800d096:	d9c8      	bls.n	800d02a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00b      	beq.n	800d0bc <cmp_lfn+0xd0>
 800d0a4:	89fb      	ldrh	r3, [r7, #14]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d008      	beq.n	800d0bc <cmp_lfn+0xd0>
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <cmp_lfn+0xd0>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e000      	b.n	800d0be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d0bc:	2301      	movs	r3, #1
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd90      	pop	{r4, r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	0800ff88 	.word	0x0800ff88

0800d0cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	331a      	adds	r3, #26
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe ff90 	bl	800c000 <ld_word>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <pick_lfn+0x1e>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e04d      	b.n	800d186 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0f2:	1e5a      	subs	r2, r3, #1
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d100:	2301      	movs	r3, #1
 800d102:	81fb      	strh	r3, [r7, #14]
 800d104:	2300      	movs	r3, #0
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	e028      	b.n	800d15c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d10a:	4a21      	ldr	r2, [pc, #132]	; (800d190 <pick_lfn+0xc4>)
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	4413      	add	r3, r2
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	4413      	add	r3, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe ff71 	bl	800c000 <ld_word>
 800d11e:	4603      	mov	r3, r0
 800d120:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00f      	beq.n	800d148 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2bfe      	cmp	r3, #254	; 0xfe
 800d12c:	d901      	bls.n	800d132 <pick_lfn+0x66>
 800d12e:	2300      	movs	r3, #0
 800d130:	e029      	b.n	800d186 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d132:	89bb      	ldrh	r3, [r7, #12]
 800d134:	81fb      	strh	r3, [r7, #14]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	617a      	str	r2, [r7, #20]
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	89fa      	ldrh	r2, [r7, #14]
 800d144:	801a      	strh	r2, [r3, #0]
 800d146:	e006      	b.n	800d156 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d148:	89bb      	ldrh	r3, [r7, #12]
 800d14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d14e:	4293      	cmp	r3, r2
 800d150:	d001      	beq.n	800d156 <pick_lfn+0x8a>
 800d152:	2300      	movs	r3, #0
 800d154:	e017      	b.n	800d186 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	3301      	adds	r3, #1
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b0c      	cmp	r3, #12
 800d160:	d9d3      	bls.n	800d10a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2bfe      	cmp	r3, #254	; 0xfe
 800d172:	d901      	bls.n	800d178 <pick_lfn+0xac>
 800d174:	2300      	movs	r3, #0
 800d176:	e006      	b.n	800d186 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	4413      	add	r3, r2
 800d180:	2200      	movs	r2, #0
 800d182:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d184:	2301      	movs	r3, #1
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	0800ff88 	.word	0x0800ff88

0800d194 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	71fb      	strb	r3, [r7, #7]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	330d      	adds	r3, #13
 800d1ae:	79ba      	ldrb	r2, [r7, #6]
 800d1b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	330b      	adds	r3, #11
 800d1b6:	220f      	movs	r2, #15
 800d1b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	330c      	adds	r3, #12
 800d1be:	2200      	movs	r2, #0
 800d1c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	331a      	adds	r3, #26
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fe ff54 	bl	800c076 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	1e5a      	subs	r2, r3, #1
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	4413      	add	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	82fb      	strh	r3, [r7, #22]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d1e6:	8afb      	ldrh	r3, [r7, #22]
 800d1e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d007      	beq.n	800d200 <put_lfn+0x6c>
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	61fa      	str	r2, [r7, #28]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	881b      	ldrh	r3, [r3, #0]
 800d1fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d200:	4a17      	ldr	r2, [pc, #92]	; (800d260 <put_lfn+0xcc>)
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	4413      	add	r3, r2
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4413      	add	r3, r2
 800d20e:	8afa      	ldrh	r2, [r7, #22]
 800d210:	4611      	mov	r1, r2
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe ff2f 	bl	800c076 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d218:	8afb      	ldrh	r3, [r7, #22]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d102      	bne.n	800d224 <put_lfn+0x90>
 800d21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d222:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	3301      	adds	r3, #1
 800d228:	61bb      	str	r3, [r7, #24]
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	2b0c      	cmp	r3, #12
 800d22e:	d9da      	bls.n	800d1e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d230:	8afb      	ldrh	r3, [r7, #22]
 800d232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d236:	4293      	cmp	r3, r2
 800d238:	d006      	beq.n	800d248 <put_lfn+0xb4>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4413      	add	r3, r2
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d103      	bne.n	800d250 <put_lfn+0xbc>
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	79fa      	ldrb	r2, [r7, #7]
 800d254:	701a      	strb	r2, [r3, #0]
}
 800d256:	bf00      	nop
 800d258:	3720      	adds	r7, #32
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	0800ff88 	.word	0x0800ff88

0800d264 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b08c      	sub	sp, #48	; 0x30
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
 800d270:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d272:	220b      	movs	r2, #11
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7fe ff44 	bl	800c104 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d92b      	bls.n	800d2da <gen_numname+0x76>
		sr = seq;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d286:	e022      	b.n	800d2ce <gen_numname+0x6a>
			wc = *lfn++;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	1c9a      	adds	r2, r3, #2
 800d28c:	607a      	str	r2, [r7, #4]
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d292:	2300      	movs	r3, #0
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
 800d296:	e017      	b.n	800d2c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	005a      	lsls	r2, r3, #1
 800d29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	4413      	add	r3, r2
 800d2a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d2a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2a8:	085b      	lsrs	r3, r3, #1
 800d2aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d005      	beq.n	800d2c2 <gen_numname+0x5e>
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d2bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d2c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	2b0f      	cmp	r3, #15
 800d2cc:	d9e4      	bls.n	800d298 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	881b      	ldrh	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1d8      	bne.n	800d288 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d2da:	2307      	movs	r3, #7
 800d2dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	f003 030f 	and.w	r3, r3, #15
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	3330      	adds	r3, #48	; 0x30
 800d2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2f2:	2b39      	cmp	r3, #57	; 0x39
 800d2f4:	d904      	bls.n	800d300 <gen_numname+0x9c>
 800d2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2fa:	3307      	adds	r3, #7
 800d2fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	1e5a      	subs	r2, r3, #1
 800d304:	62ba      	str	r2, [r7, #40]	; 0x28
 800d306:	3330      	adds	r3, #48	; 0x30
 800d308:	443b      	add	r3, r7
 800d30a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d30e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	091b      	lsrs	r3, r3, #4
 800d316:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1df      	bne.n	800d2de <gen_numname+0x7a>
	ns[i] = '~';
 800d31e:	f107 0214 	add.w	r2, r7, #20
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	4413      	add	r3, r2
 800d326:	227e      	movs	r2, #126	; 0x7e
 800d328:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d32a:	2300      	movs	r3, #0
 800d32c:	627b      	str	r3, [r7, #36]	; 0x24
 800d32e:	e002      	b.n	800d336 <gen_numname+0xd2>
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	3301      	adds	r3, #1
 800d334:	627b      	str	r3, [r7, #36]	; 0x24
 800d336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d205      	bcs.n	800d34a <gen_numname+0xe6>
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	4413      	add	r3, r2
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2b20      	cmp	r3, #32
 800d348:	d1f2      	bne.n	800d330 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34c:	2b07      	cmp	r3, #7
 800d34e:	d807      	bhi.n	800d360 <gen_numname+0xfc>
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	62ba      	str	r2, [r7, #40]	; 0x28
 800d356:	3330      	adds	r3, #48	; 0x30
 800d358:	443b      	add	r3, r7
 800d35a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d35e:	e000      	b.n	800d362 <gen_numname+0xfe>
 800d360:	2120      	movs	r1, #32
 800d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d364:	1c5a      	adds	r2, r3, #1
 800d366:	627a      	str	r2, [r7, #36]	; 0x24
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	4413      	add	r3, r2
 800d36c:	460a      	mov	r2, r1
 800d36e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	2b07      	cmp	r3, #7
 800d374:	d9e9      	bls.n	800d34a <gen_numname+0xe6>
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	3730      	adds	r7, #48	; 0x30
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d38c:	230b      	movs	r3, #11
 800d38e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
 800d392:	b2da      	uxtb	r2, r3
 800d394:	0852      	lsrs	r2, r2, #1
 800d396:	01db      	lsls	r3, r3, #7
 800d398:	4313      	orrs	r3, r2
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	1c59      	adds	r1, r3, #1
 800d3a0:	6079      	str	r1, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	60bb      	str	r3, [r7, #8]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1ed      	bne.n	800d390 <sum_sfn+0x10>
	return sum;
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b086      	sub	sp, #24
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d3cc:	2304      	movs	r3, #4
 800d3ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d3d6:	23ff      	movs	r3, #255	; 0xff
 800d3d8:	757b      	strb	r3, [r7, #21]
 800d3da:	23ff      	movs	r3, #255	; 0xff
 800d3dc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d3de:	e081      	b.n	800d4e4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	69db      	ldr	r3, [r3, #28]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6938      	ldr	r0, [r7, #16]
 800d3e8:	f7ff f8ba 	bl	800c560 <move_window>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d17c      	bne.n	800d4f0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d3fe:	7dbb      	ldrb	r3, [r7, #22]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d404:	2304      	movs	r3, #4
 800d406:	75fb      	strb	r3, [r7, #23]
 800d408:	e077      	b.n	800d4fa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	330b      	adds	r3, #11
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d416:	73fb      	strb	r3, [r7, #15]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7bfa      	ldrb	r2, [r7, #15]
 800d41c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d41e:	7dbb      	ldrb	r3, [r7, #22]
 800d420:	2be5      	cmp	r3, #229	; 0xe5
 800d422:	d00e      	beq.n	800d442 <dir_read+0x80>
 800d424:	7dbb      	ldrb	r3, [r7, #22]
 800d426:	2b2e      	cmp	r3, #46	; 0x2e
 800d428:	d00b      	beq.n	800d442 <dir_read+0x80>
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
 800d42c:	f023 0320 	bic.w	r3, r3, #32
 800d430:	2b08      	cmp	r3, #8
 800d432:	bf0c      	ite	eq
 800d434:	2301      	moveq	r3, #1
 800d436:	2300      	movne	r3, #0
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	461a      	mov	r2, r3
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	4293      	cmp	r3, r2
 800d440:	d002      	beq.n	800d448 <dir_read+0x86>
				ord = 0xFF;
 800d442:	23ff      	movs	r3, #255	; 0xff
 800d444:	757b      	strb	r3, [r7, #21]
 800d446:	e044      	b.n	800d4d2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b0f      	cmp	r3, #15
 800d44c:	d12f      	bne.n	800d4ae <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d44e:	7dbb      	ldrb	r3, [r7, #22]
 800d450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00d      	beq.n	800d474 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a1b      	ldr	r3, [r3, #32]
 800d45c:	7b5b      	ldrb	r3, [r3, #13]
 800d45e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d460:	7dbb      	ldrb	r3, [r7, #22]
 800d462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d466:	75bb      	strb	r3, [r7, #22]
 800d468:	7dbb      	ldrb	r3, [r7, #22]
 800d46a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	695a      	ldr	r2, [r3, #20]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d474:	7dba      	ldrb	r2, [r7, #22]
 800d476:	7d7b      	ldrb	r3, [r7, #21]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d115      	bne.n	800d4a8 <dir_read+0xe6>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a1b      	ldr	r3, [r3, #32]
 800d480:	330d      	adds	r3, #13
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	7d3a      	ldrb	r2, [r7, #20]
 800d486:	429a      	cmp	r2, r3
 800d488:	d10e      	bne.n	800d4a8 <dir_read+0xe6>
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	68da      	ldr	r2, [r3, #12]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a1b      	ldr	r3, [r3, #32]
 800d492:	4619      	mov	r1, r3
 800d494:	4610      	mov	r0, r2
 800d496:	f7ff fe19 	bl	800d0cc <pick_lfn>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <dir_read+0xe6>
 800d4a0:	7d7b      	ldrb	r3, [r7, #21]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	e000      	b.n	800d4aa <dir_read+0xe8>
 800d4a8:	23ff      	movs	r3, #255	; 0xff
 800d4aa:	757b      	strb	r3, [r7, #21]
 800d4ac:	e011      	b.n	800d4d2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d4ae:	7d7b      	ldrb	r3, [r7, #21]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d109      	bne.n	800d4c8 <dir_read+0x106>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff ff61 	bl	800d380 <sum_sfn>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	7d3b      	ldrb	r3, [r7, #20]
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d015      	beq.n	800d4f4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d4d0:	e010      	b.n	800d4f4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff fc3e 	bl	800cd56 <dir_next>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d109      	bne.n	800d4f8 <dir_read+0x136>
	while (dp->sect) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f47f af79 	bne.w	800d3e0 <dir_read+0x1e>
 800d4ee:	e004      	b.n	800d4fa <dir_read+0x138>
		if (res != FR_OK) break;
 800d4f0:	bf00      	nop
 800d4f2:	e002      	b.n	800d4fa <dir_read+0x138>
					break;
 800d4f4:	bf00      	nop
 800d4f6:	e000      	b.n	800d4fa <dir_read+0x138>
		if (res != FR_OK) break;
 800d4f8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <dir_read+0x144>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	61da      	str	r2, [r3, #28]
	return res;
 800d506:	7dfb      	ldrb	r3, [r7, #23]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d51e:	2100      	movs	r1, #0
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fb9d 	bl	800cc60 <dir_sdi>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <dir_find+0x24>
 800d530:	7dfb      	ldrb	r3, [r7, #23]
 800d532:	e0a9      	b.n	800d688 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d534:	23ff      	movs	r3, #255	; 0xff
 800d536:	753b      	strb	r3, [r7, #20]
 800d538:	7d3b      	ldrb	r3, [r7, #20]
 800d53a:	757b      	strb	r3, [r7, #21]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295
 800d542:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	69db      	ldr	r3, [r3, #28]
 800d548:	4619      	mov	r1, r3
 800d54a:	6938      	ldr	r0, [r7, #16]
 800d54c:	f7ff f808 	bl	800c560 <move_window>
 800d550:	4603      	mov	r3, r0
 800d552:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d554:	7dfb      	ldrb	r3, [r7, #23]
 800d556:	2b00      	cmp	r3, #0
 800d558:	f040 8090 	bne.w	800d67c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d564:	7dbb      	ldrb	r3, [r7, #22]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d102      	bne.n	800d570 <dir_find+0x60>
 800d56a:	2304      	movs	r3, #4
 800d56c:	75fb      	strb	r3, [r7, #23]
 800d56e:	e08a      	b.n	800d686 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a1b      	ldr	r3, [r3, #32]
 800d574:	330b      	adds	r3, #11
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d57c:	73fb      	strb	r3, [r7, #15]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	7bfa      	ldrb	r2, [r7, #15]
 800d582:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d584:	7dbb      	ldrb	r3, [r7, #22]
 800d586:	2be5      	cmp	r3, #229	; 0xe5
 800d588:	d007      	beq.n	800d59a <dir_find+0x8a>
 800d58a:	7bfb      	ldrb	r3, [r7, #15]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b00      	cmp	r3, #0
 800d592:	d009      	beq.n	800d5a8 <dir_find+0x98>
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d006      	beq.n	800d5a8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d59a:	23ff      	movs	r3, #255	; 0xff
 800d59c:	757b      	strb	r3, [r7, #21]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a4:	631a      	str	r2, [r3, #48]	; 0x30
 800d5a6:	e05e      	b.n	800d666 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	2b0f      	cmp	r3, #15
 800d5ac:	d136      	bne.n	800d61c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d154      	bne.n	800d666 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d5bc:	7dbb      	ldrb	r3, [r7, #22]
 800d5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00d      	beq.n	800d5e2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	7b5b      	ldrb	r3, [r3, #13]
 800d5cc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d5ce:	7dbb      	ldrb	r3, [r7, #22]
 800d5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5d4:	75bb      	strb	r3, [r7, #22]
 800d5d6:	7dbb      	ldrb	r3, [r7, #22]
 800d5d8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695a      	ldr	r2, [r3, #20]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d5e2:	7dba      	ldrb	r2, [r7, #22]
 800d5e4:	7d7b      	ldrb	r3, [r7, #21]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d115      	bne.n	800d616 <dir_find+0x106>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	330d      	adds	r3, #13
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	7d3a      	ldrb	r2, [r7, #20]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d10e      	bne.n	800d616 <dir_find+0x106>
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a1b      	ldr	r3, [r3, #32]
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f7ff fcf2 	bl	800cfec <cmp_lfn>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <dir_find+0x106>
 800d60e:	7d7b      	ldrb	r3, [r7, #21]
 800d610:	3b01      	subs	r3, #1
 800d612:	b2db      	uxtb	r3, r3
 800d614:	e000      	b.n	800d618 <dir_find+0x108>
 800d616:	23ff      	movs	r3, #255	; 0xff
 800d618:	757b      	strb	r3, [r7, #21]
 800d61a:	e024      	b.n	800d666 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d61c:	7d7b      	ldrb	r3, [r7, #21]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <dir_find+0x126>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff feaa 	bl	800d380 <sum_sfn>
 800d62c:	4603      	mov	r3, r0
 800d62e:	461a      	mov	r2, r3
 800d630:	7d3b      	ldrb	r3, [r7, #20]
 800d632:	4293      	cmp	r3, r2
 800d634:	d024      	beq.n	800d680 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10a      	bne.n	800d65a <dir_find+0x14a>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6a18      	ldr	r0, [r3, #32]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3324      	adds	r3, #36	; 0x24
 800d64c:	220b      	movs	r2, #11
 800d64e:	4619      	mov	r1, r3
 800d650:	f7fe fd94 	bl	800c17c <mem_cmp>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d014      	beq.n	800d684 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d65a:	23ff      	movs	r3, #255	; 0xff
 800d65c:	757b      	strb	r3, [r7, #21]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d666:	2100      	movs	r1, #0
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fb74 	bl	800cd56 <dir_next>
 800d66e:	4603      	mov	r3, r0
 800d670:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	2b00      	cmp	r3, #0
 800d676:	f43f af65 	beq.w	800d544 <dir_find+0x34>
 800d67a:	e004      	b.n	800d686 <dir_find+0x176>
		if (res != FR_OK) break;
 800d67c:	bf00      	nop
 800d67e:	e002      	b.n	800d686 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d680:	bf00      	nop
 800d682:	e000      	b.n	800d686 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d684:	bf00      	nop

	return res;
 800d686:	7dfb      	ldrb	r3, [r7, #23]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3718      	adds	r7, #24
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08c      	sub	sp, #48	; 0x30
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <dir_register+0x20>
 800d6ac:	2306      	movs	r3, #6
 800d6ae:	e0e0      	b.n	800d872 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b4:	e002      	b.n	800d6bc <dir_register+0x2c>
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	68da      	ldr	r2, [r3, #12]
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1f4      	bne.n	800d6b6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d6d2:	f107 030c 	add.w	r3, r7, #12
 800d6d6:	220c      	movs	r2, #12
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fd13 	bl	800c104 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d032      	beq.n	800d74e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2240      	movs	r2, #64	; 0x40
 800d6ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6f4:	e016      	b.n	800d724 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	68da      	ldr	r2, [r3, #12]
 800d700:	f107 010c 	add.w	r1, r7, #12
 800d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d706:	f7ff fdad 	bl	800d264 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ff00 	bl	800d510 <dir_find>
 800d710:	4603      	mov	r3, r0
 800d712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	3301      	adds	r3, #1
 800d722:	62bb      	str	r3, [r7, #40]	; 0x28
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	2b63      	cmp	r3, #99	; 0x63
 800d728:	d9e5      	bls.n	800d6f6 <dir_register+0x66>
 800d72a:	e000      	b.n	800d72e <dir_register+0x9e>
			if (res != FR_OK) break;
 800d72c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	2b64      	cmp	r3, #100	; 0x64
 800d732:	d101      	bne.n	800d738 <dir_register+0xa8>
 800d734:	2307      	movs	r3, #7
 800d736:	e09c      	b.n	800d872 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d002      	beq.n	800d746 <dir_register+0xb6>
 800d740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d744:	e095      	b.n	800d872 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d746:	7dfa      	ldrb	r2, [r7, #23]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d007      	beq.n	800d768 <dir_register+0xd8>
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	330c      	adds	r3, #12
 800d75c:	4a47      	ldr	r2, [pc, #284]	; (800d87c <dir_register+0x1ec>)
 800d75e:	fba2 2303 	umull	r2, r3, r2, r3
 800d762:	089b      	lsrs	r3, r3, #2
 800d764:	3301      	adds	r3, #1
 800d766:	e000      	b.n	800d76a <dir_register+0xda>
 800d768:	2301      	movs	r3, #1
 800d76a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d76c:	6a39      	ldr	r1, [r7, #32]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fbb6 	bl	800cee0 <dir_alloc>
 800d774:	4603      	mov	r3, r0
 800d776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d77a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d148      	bne.n	800d814 <dir_register+0x184>
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	3b01      	subs	r3, #1
 800d786:	623b      	str	r3, [r7, #32]
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d042      	beq.n	800d814 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	695a      	ldr	r2, [r3, #20]
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	015b      	lsls	r3, r3, #5
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff fa60 	bl	800cc60 <dir_sdi>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d132      	bne.n	800d814 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3324      	adds	r3, #36	; 0x24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff fde4 	bl	800d380 <sum_sfn>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	69f8      	ldr	r0, [r7, #28]
 800d7c4:	f7fe fecc 	bl	800c560 <move_window>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d11d      	bne.n	800d812 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	68d8      	ldr	r0, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6a19      	ldr	r1, [r3, #32]
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	7efb      	ldrb	r3, [r7, #27]
 800d7e4:	f7ff fcd6 	bl	800d194 <put_lfn>
				fs->wflag = 1;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff fab0 	bl	800cd56 <dir_next>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d800:	2b00      	cmp	r3, #0
 800d802:	d107      	bne.n	800d814 <dir_register+0x184>
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	3b01      	subs	r3, #1
 800d808:	623b      	str	r3, [r7, #32]
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1d5      	bne.n	800d7bc <dir_register+0x12c>
 800d810:	e000      	b.n	800d814 <dir_register+0x184>
				if (res != FR_OK) break;
 800d812:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d128      	bne.n	800d86e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	4619      	mov	r1, r3
 800d822:	69f8      	ldr	r0, [r7, #28]
 800d824:	f7fe fe9c 	bl	800c560 <move_window>
 800d828:	4603      	mov	r3, r0
 800d82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d832:	2b00      	cmp	r3, #0
 800d834:	d11b      	bne.n	800d86e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a1b      	ldr	r3, [r3, #32]
 800d83a:	2220      	movs	r2, #32
 800d83c:	2100      	movs	r1, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe fc81 	bl	800c146 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6a18      	ldr	r0, [r3, #32]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	3324      	adds	r3, #36	; 0x24
 800d84c:	220b      	movs	r2, #11
 800d84e:	4619      	mov	r1, r3
 800d850:	f7fe fc58 	bl	800c104 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a1b      	ldr	r3, [r3, #32]
 800d85e:	330c      	adds	r3, #12
 800d860:	f002 0218 	and.w	r2, r2, #24
 800d864:	b2d2      	uxtb	r2, r2
 800d866:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	2201      	movs	r2, #1
 800d86c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d86e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d872:	4618      	mov	r0, r3
 800d874:	3730      	adds	r7, #48	; 0x30
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	4ec4ec4f 	.word	0x4ec4ec4f

0800d880 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2200      	movs	r2, #0
 800d894:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	69db      	ldr	r3, [r3, #28]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 80c9 	beq.w	800da32 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a8:	d032      	beq.n	800d910 <get_fileinfo+0x90>
			i = j = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	61bb      	str	r3, [r7, #24]
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d8b2:	e01b      	b.n	800d8ec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d8b4:	89fb      	ldrh	r3, [r7, #14]
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f001 fd2f 	bl	800f31c <ff_convert>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d8c2:	89fb      	ldrh	r3, [r7, #14]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d102      	bne.n	800d8ce <get_fileinfo+0x4e>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	61fb      	str	r3, [r7, #28]
 800d8cc:	e01a      	b.n	800d904 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	2bfe      	cmp	r3, #254	; 0xfe
 800d8d2:	d902      	bls.n	800d8da <get_fileinfo+0x5a>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e014      	b.n	800d904 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	61fa      	str	r2, [r7, #28]
 800d8e0:	89fa      	ldrh	r2, [r7, #14]
 800d8e2:	b2d1      	uxtb	r1, r2
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	460a      	mov	r2, r1
 800d8ea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	68da      	ldr	r2, [r3, #12]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	1c59      	adds	r1, r3, #1
 800d8f4:	61b9      	str	r1, [r7, #24]
 800d8f6:	005b      	lsls	r3, r3, #1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	81fb      	strh	r3, [r7, #14]
 800d8fe:	89fb      	ldrh	r3, [r7, #14]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1d7      	bne.n	800d8b4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d904:	683a      	ldr	r2, [r7, #0]
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	4413      	add	r3, r2
 800d90a:	3316      	adds	r3, #22
 800d90c:	2200      	movs	r2, #0
 800d90e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	4413      	add	r3, r2
 800d91e:	3316      	adds	r3, #22
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d924:	e04c      	b.n	800d9c0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a1a      	ldr	r2, [r3, #32]
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	1c59      	adds	r1, r3, #1
 800d92e:	61f9      	str	r1, [r7, #28]
 800d930:	4413      	add	r3, r2
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d936:	7dfb      	ldrb	r3, [r7, #23]
 800d938:	2b20      	cmp	r3, #32
 800d93a:	d100      	bne.n	800d93e <get_fileinfo+0xbe>
 800d93c:	e040      	b.n	800d9c0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	2b05      	cmp	r3, #5
 800d942:	d101      	bne.n	800d948 <get_fileinfo+0xc8>
 800d944:	23e5      	movs	r3, #229	; 0xe5
 800d946:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	2b09      	cmp	r3, #9
 800d94c:	d10f      	bne.n	800d96e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d94e:	89bb      	ldrh	r3, [r7, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d105      	bne.n	800d960 <get_fileinfo+0xe0>
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	4413      	add	r3, r2
 800d95a:	3316      	adds	r3, #22
 800d95c:	222e      	movs	r2, #46	; 0x2e
 800d95e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	61ba      	str	r2, [r7, #24]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	4413      	add	r3, r2
 800d96a:	222e      	movs	r2, #46	; 0x2e
 800d96c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	4413      	add	r3, r2
 800d974:	3309      	adds	r3, #9
 800d976:	7dfa      	ldrb	r2, [r7, #23]
 800d978:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d97a:	89bb      	ldrh	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d11c      	bne.n	800d9ba <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	2b40      	cmp	r3, #64	; 0x40
 800d984:	d913      	bls.n	800d9ae <get_fileinfo+0x12e>
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	2b5a      	cmp	r3, #90	; 0x5a
 800d98a:	d810      	bhi.n	800d9ae <get_fileinfo+0x12e>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a1b      	ldr	r3, [r3, #32]
 800d990:	330c      	adds	r3, #12
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	461a      	mov	r2, r3
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	2b08      	cmp	r3, #8
 800d99a:	d901      	bls.n	800d9a0 <get_fileinfo+0x120>
 800d99c:	2310      	movs	r3, #16
 800d99e:	e000      	b.n	800d9a2 <get_fileinfo+0x122>
 800d9a0:	2308      	movs	r3, #8
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	3320      	adds	r3, #32
 800d9ac:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d9ae:	683a      	ldr	r2, [r7, #0]
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	3316      	adds	r3, #22
 800d9b6:	7dfa      	ldrb	r2, [r7, #23]
 800d9b8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	2b0a      	cmp	r3, #10
 800d9c4:	d9af      	bls.n	800d926 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d9c6:	89bb      	ldrh	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10d      	bne.n	800d9e8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	3316      	adds	r3, #22
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6a1b      	ldr	r3, [r3, #32]
 800d9dc:	330c      	adds	r3, #12
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <get_fileinfo+0x168>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	3309      	adds	r3, #9
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	7ada      	ldrb	r2, [r3, #11]
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	331c      	adds	r3, #28
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fb13 	bl	800c030 <ld_dword>
 800da0a:	4602      	mov	r2, r0
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a1b      	ldr	r3, [r3, #32]
 800da14:	3316      	adds	r3, #22
 800da16:	4618      	mov	r0, r3
 800da18:	f7fe fb0a 	bl	800c030 <ld_dword>
 800da1c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	b29a      	uxth	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	80da      	strh	r2, [r3, #6]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	0c1b      	lsrs	r3, r3, #16
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	809a      	strh	r2, [r3, #4]
 800da30:	e000      	b.n	800da34 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800da32:	bf00      	nop
}
 800da34:	3720      	adds	r7, #32
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08a      	sub	sp, #40	; 0x28
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	613b      	str	r3, [r7, #16]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	60fb      	str	r3, [r7, #12]
 800da54:	2300      	movs	r3, #0
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	61ba      	str	r2, [r7, #24]
 800da62:	693a      	ldr	r2, [r7, #16]
 800da64:	4413      	add	r3, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800da6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da6c:	2b1f      	cmp	r3, #31
 800da6e:	d940      	bls.n	800daf2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800da70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da72:	2b2f      	cmp	r3, #47	; 0x2f
 800da74:	d006      	beq.n	800da84 <create_name+0x48>
 800da76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da78:	2b5c      	cmp	r3, #92	; 0x5c
 800da7a:	d110      	bne.n	800da9e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da7c:	e002      	b.n	800da84 <create_name+0x48>
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	3301      	adds	r3, #1
 800da82:	61bb      	str	r3, [r7, #24]
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	4413      	add	r3, r2
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b2f      	cmp	r3, #47	; 0x2f
 800da8e:	d0f6      	beq.n	800da7e <create_name+0x42>
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	4413      	add	r3, r2
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b5c      	cmp	r3, #92	; 0x5c
 800da9a:	d0f0      	beq.n	800da7e <create_name+0x42>
			break;
 800da9c:	e02a      	b.n	800daf4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2bfe      	cmp	r3, #254	; 0xfe
 800daa2:	d901      	bls.n	800daa8 <create_name+0x6c>
 800daa4:	2306      	movs	r3, #6
 800daa6:	e17d      	b.n	800dda4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800daa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800daae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab0:	2101      	movs	r1, #1
 800dab2:	4618      	mov	r0, r3
 800dab4:	f001 fc32 	bl	800f31c <ff_convert>
 800dab8:	4603      	mov	r3, r0
 800daba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <create_name+0x8a>
 800dac2:	2306      	movs	r3, #6
 800dac4:	e16e      	b.n	800dda4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dac8:	2b7f      	cmp	r3, #127	; 0x7f
 800daca:	d809      	bhi.n	800dae0 <create_name+0xa4>
 800dacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dace:	4619      	mov	r1, r3
 800dad0:	488d      	ldr	r0, [pc, #564]	; (800dd08 <create_name+0x2cc>)
 800dad2:	f7fe fb7a 	bl	800c1ca <chk_chr>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <create_name+0xa4>
 800dadc:	2306      	movs	r3, #6
 800dade:	e161      	b.n	800dda4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	617a      	str	r2, [r7, #20]
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4413      	add	r3, r2
 800daec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800daee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800daf0:	e7b4      	b.n	800da5c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800daf2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	441a      	add	r2, r3
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dafe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db00:	2b1f      	cmp	r3, #31
 800db02:	d801      	bhi.n	800db08 <create_name+0xcc>
 800db04:	2304      	movs	r3, #4
 800db06:	e000      	b.n	800db0a <create_name+0xce>
 800db08:	2300      	movs	r3, #0
 800db0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800db0e:	e011      	b.n	800db34 <create_name+0xf8>
		w = lfn[di - 1];
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db16:	3b01      	subs	r3, #1
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	4413      	add	r3, r2
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800db22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db24:	2b20      	cmp	r3, #32
 800db26:	d002      	beq.n	800db2e <create_name+0xf2>
 800db28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db2a:	2b2e      	cmp	r3, #46	; 0x2e
 800db2c:	d106      	bne.n	800db3c <create_name+0x100>
		di--;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	3b01      	subs	r3, #1
 800db32:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1ea      	bne.n	800db10 <create_name+0xd4>
 800db3a:	e000      	b.n	800db3e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800db3c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	68fa      	ldr	r2, [r7, #12]
 800db44:	4413      	add	r3, r2
 800db46:	2200      	movs	r2, #0
 800db48:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d101      	bne.n	800db54 <create_name+0x118>
 800db50:	2306      	movs	r3, #6
 800db52:	e127      	b.n	800dda4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3324      	adds	r3, #36	; 0x24
 800db58:	220b      	movs	r2, #11
 800db5a:	2120      	movs	r1, #32
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe faf2 	bl	800c146 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800db62:	2300      	movs	r3, #0
 800db64:	61bb      	str	r3, [r7, #24]
 800db66:	e002      	b.n	800db6e <create_name+0x132>
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	3301      	adds	r3, #1
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	4413      	add	r3, r2
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	2b20      	cmp	r3, #32
 800db7a:	d0f5      	beq.n	800db68 <create_name+0x12c>
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	2b2e      	cmp	r3, #46	; 0x2e
 800db88:	d0ee      	beq.n	800db68 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d009      	beq.n	800dba4 <create_name+0x168>
 800db90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db94:	f043 0303 	orr.w	r3, r3, #3
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db9c:	e002      	b.n	800dba4 <create_name+0x168>
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	617b      	str	r3, [r7, #20]
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <create_name+0x182>
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	005b      	lsls	r3, r3, #1
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	2b2e      	cmp	r3, #46	; 0x2e
 800dbbc:	d1ef      	bne.n	800db9e <create_name+0x162>

	i = b = 0; ni = 8;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	623b      	str	r3, [r7, #32]
 800dbc8:	2308      	movs	r3, #8
 800dbca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	61ba      	str	r2, [r7, #24]
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dbdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8090 	beq.w	800dd04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dbe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe6:	2b20      	cmp	r3, #32
 800dbe8:	d006      	beq.n	800dbf8 <create_name+0x1bc>
 800dbea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbec:	2b2e      	cmp	r3, #46	; 0x2e
 800dbee:	d10a      	bne.n	800dc06 <create_name+0x1ca>
 800dbf0:	69ba      	ldr	r2, [r7, #24]
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d006      	beq.n	800dc06 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbfc:	f043 0303 	orr.w	r3, r3, #3
 800dc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc04:	e07d      	b.n	800dd02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dc06:	6a3a      	ldr	r2, [r7, #32]
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d203      	bcs.n	800dc16 <create_name+0x1da>
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d123      	bne.n	800dc5e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	2b0b      	cmp	r3, #11
 800dc1a:	d106      	bne.n	800dc2a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc20:	f043 0303 	orr.w	r3, r3, #3
 800dc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc28:	e075      	b.n	800dd16 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d005      	beq.n	800dc3e <create_name+0x202>
 800dc32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc36:	f043 0303 	orr.w	r3, r3, #3
 800dc3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dc3e:	69ba      	ldr	r2, [r7, #24]
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d866      	bhi.n	800dd14 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	61bb      	str	r3, [r7, #24]
 800dc4a:	2308      	movs	r3, #8
 800dc4c:	623b      	str	r3, [r7, #32]
 800dc4e:	230b      	movs	r3, #11
 800dc50:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dc52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc5c:	e051      	b.n	800dd02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dc5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc60:	2b7f      	cmp	r3, #127	; 0x7f
 800dc62:	d914      	bls.n	800dc8e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dc64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f001 fb57 	bl	800f31c <ff_convert>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <create_name+0x246>
 800dc78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7a:	3b80      	subs	r3, #128	; 0x80
 800dc7c:	4a23      	ldr	r2, [pc, #140]	; (800dd0c <create_name+0x2d0>)
 800dc7e:	5cd3      	ldrb	r3, [r2, r3]
 800dc80:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc86:	f043 0302 	orr.w	r3, r3, #2
 800dc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <create_name+0x268>
 800dc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc96:	4619      	mov	r1, r3
 800dc98:	481d      	ldr	r0, [pc, #116]	; (800dd10 <create_name+0x2d4>)
 800dc9a:	f7fe fa96 	bl	800c1ca <chk_chr>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d008      	beq.n	800dcb6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dca4:	235f      	movs	r3, #95	; 0x5f
 800dca6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcac:	f043 0303 	orr.w	r3, r3, #3
 800dcb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcb4:	e01b      	b.n	800dcee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dcb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcb8:	2b40      	cmp	r3, #64	; 0x40
 800dcba:	d909      	bls.n	800dcd0 <create_name+0x294>
 800dcbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcbe:	2b5a      	cmp	r3, #90	; 0x5a
 800dcc0:	d806      	bhi.n	800dcd0 <create_name+0x294>
					b |= 2;
 800dcc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcc6:	f043 0302 	orr.w	r3, r3, #2
 800dcca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dcce:	e00e      	b.n	800dcee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd2:	2b60      	cmp	r3, #96	; 0x60
 800dcd4:	d90b      	bls.n	800dcee <create_name+0x2b2>
 800dcd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd8:	2b7a      	cmp	r3, #122	; 0x7a
 800dcda:	d808      	bhi.n	800dcee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dcdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dce0:	f043 0301 	orr.w	r3, r3, #1
 800dce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcea:	3b20      	subs	r3, #32
 800dcec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dcee:	6a3b      	ldr	r3, [r7, #32]
 800dcf0:	1c5a      	adds	r2, r3, #1
 800dcf2:	623a      	str	r2, [r7, #32]
 800dcf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcf6:	b2d1      	uxtb	r1, r2
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	460a      	mov	r2, r1
 800dcfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dd02:	e763      	b.n	800dbcc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dd04:	bf00      	nop
 800dd06:	e006      	b.n	800dd16 <create_name+0x2da>
 800dd08:	0800fe2c 	.word	0x0800fe2c
 800dd0c:	0800ff08 	.word	0x0800ff08
 800dd10:	0800fe38 	.word	0x0800fe38
			if (si > di) break;			/* No extension */
 800dd14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd1c:	2be5      	cmp	r3, #229	; 0xe5
 800dd1e:	d103      	bne.n	800dd28 <create_name+0x2ec>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2205      	movs	r2, #5
 800dd24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	2b08      	cmp	r3, #8
 800dd2c:	d104      	bne.n	800dd38 <create_name+0x2fc>
 800dd2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dd38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd3c:	f003 030c 	and.w	r3, r3, #12
 800dd40:	2b0c      	cmp	r3, #12
 800dd42:	d005      	beq.n	800dd50 <create_name+0x314>
 800dd44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd48:	f003 0303 	and.w	r3, r3, #3
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d105      	bne.n	800dd5c <create_name+0x320>
 800dd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd54:	f043 0302 	orr.w	r3, r3, #2
 800dd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dd5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd60:	f003 0302 	and.w	r3, r3, #2
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d117      	bne.n	800dd98 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d105      	bne.n	800dd80 <create_name+0x344>
 800dd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd78:	f043 0310 	orr.w	r3, r3, #16
 800dd7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd84:	f003 030c 	and.w	r3, r3, #12
 800dd88:	2b04      	cmp	r3, #4
 800dd8a:	d105      	bne.n	800dd98 <create_name+0x35c>
 800dd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd90:	f043 0308 	orr.w	r3, r3, #8
 800dd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dda2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3728      	adds	r7, #40	; 0x28
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ddc0:	e002      	b.n	800ddc8 <follow_path+0x1c>
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	603b      	str	r3, [r7, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	2b2f      	cmp	r3, #47	; 0x2f
 800ddce:	d0f8      	beq.n	800ddc2 <follow_path+0x16>
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b5c      	cmp	r3, #92	; 0x5c
 800ddd6:	d0f4      	beq.n	800ddc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	2200      	movs	r2, #0
 800dddc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	2b1f      	cmp	r3, #31
 800dde4:	d80a      	bhi.n	800ddfc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2280      	movs	r2, #128	; 0x80
 800ddea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ddee:	2100      	movs	r1, #0
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7fe ff35 	bl	800cc60 <dir_sdi>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	75fb      	strb	r3, [r7, #23]
 800ddfa:	e043      	b.n	800de84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	4619      	mov	r1, r3
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fe1b 	bl	800da3c <create_name>
 800de06:	4603      	mov	r3, r0
 800de08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d134      	bne.n	800de7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff fb7d 	bl	800d510 <dir_find>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de22:	7dfb      	ldrb	r3, [r7, #23]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00a      	beq.n	800de3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de28:	7dfb      	ldrb	r3, [r7, #23]
 800de2a:	2b04      	cmp	r3, #4
 800de2c:	d127      	bne.n	800de7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de2e:	7afb      	ldrb	r3, [r7, #11]
 800de30:	f003 0304 	and.w	r3, r3, #4
 800de34:	2b00      	cmp	r3, #0
 800de36:	d122      	bne.n	800de7e <follow_path+0xd2>
 800de38:	2305      	movs	r3, #5
 800de3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de3c:	e01f      	b.n	800de7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de3e:	7afb      	ldrb	r3, [r7, #11]
 800de40:	f003 0304 	and.w	r3, r3, #4
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11c      	bne.n	800de82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	799b      	ldrb	r3, [r3, #6]
 800de4c:	f003 0310 	and.w	r3, r3, #16
 800de50:	2b00      	cmp	r3, #0
 800de52:	d102      	bne.n	800de5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de54:	2305      	movs	r3, #5
 800de56:	75fb      	strb	r3, [r7, #23]
 800de58:	e014      	b.n	800de84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de68:	4413      	add	r3, r2
 800de6a:	4619      	mov	r1, r3
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f7ff f87e 	bl	800cf6e <ld_clust>
 800de72:	4602      	mov	r2, r0
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de78:	e7c0      	b.n	800ddfc <follow_path+0x50>
			if (res != FR_OK) break;
 800de7a:	bf00      	nop
 800de7c:	e002      	b.n	800de84 <follow_path+0xd8>
				break;
 800de7e:	bf00      	nop
 800de80:	e000      	b.n	800de84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de82:	bf00      	nop
			}
		}
	}

	return res;
 800de84:	7dfb      	ldrb	r3, [r7, #23]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3718      	adds	r7, #24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de8e:	b480      	push	{r7}
 800de90:	b087      	sub	sp, #28
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de96:	f04f 33ff 	mov.w	r3, #4294967295
 800de9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d031      	beq.n	800df08 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e002      	b.n	800deb2 <get_ldnumber+0x24>
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	3301      	adds	r3, #1
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b1f      	cmp	r3, #31
 800deb8:	d903      	bls.n	800dec2 <get_ldnumber+0x34>
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b3a      	cmp	r3, #58	; 0x3a
 800dec0:	d1f4      	bne.n	800deac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	2b3a      	cmp	r3, #58	; 0x3a
 800dec8:	d11c      	bne.n	800df04 <get_ldnumber+0x76>
			tp = *path;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	60fa      	str	r2, [r7, #12]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	3b30      	subs	r3, #48	; 0x30
 800deda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2b09      	cmp	r3, #9
 800dee0:	d80e      	bhi.n	800df00 <get_ldnumber+0x72>
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d10a      	bne.n	800df00 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d107      	bne.n	800df00 <get_ldnumber+0x72>
					vol = (int)i;
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	3301      	adds	r3, #1
 800def8:	617b      	str	r3, [r7, #20]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	e002      	b.n	800df0a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df04:	2300      	movs	r3, #0
 800df06:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df08:	693b      	ldr	r3, [r7, #16]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	70da      	strb	r2, [r3, #3]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f04f 32ff 	mov.w	r2, #4294967295
 800df2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7fe fb14 	bl	800c560 <move_window>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <check_fs+0x2a>
 800df3e:	2304      	movs	r3, #4
 800df40:	e038      	b.n	800dfb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3334      	adds	r3, #52	; 0x34
 800df46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe f858 	bl	800c000 <ld_word>
 800df50:	4603      	mov	r3, r0
 800df52:	461a      	mov	r2, r3
 800df54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df58:	429a      	cmp	r2, r3
 800df5a:	d001      	beq.n	800df60 <check_fs+0x48>
 800df5c:	2303      	movs	r3, #3
 800df5e:	e029      	b.n	800dfb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df66:	2be9      	cmp	r3, #233	; 0xe9
 800df68:	d009      	beq.n	800df7e <check_fs+0x66>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df70:	2beb      	cmp	r3, #235	; 0xeb
 800df72:	d11e      	bne.n	800dfb2 <check_fs+0x9a>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df7a:	2b90      	cmp	r3, #144	; 0x90
 800df7c:	d119      	bne.n	800dfb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3334      	adds	r3, #52	; 0x34
 800df82:	3336      	adds	r3, #54	; 0x36
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe f853 	bl	800c030 <ld_dword>
 800df8a:	4603      	mov	r3, r0
 800df8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df90:	4a0a      	ldr	r2, [pc, #40]	; (800dfbc <check_fs+0xa4>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d101      	bne.n	800df9a <check_fs+0x82>
 800df96:	2300      	movs	r3, #0
 800df98:	e00c      	b.n	800dfb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3334      	adds	r3, #52	; 0x34
 800df9e:	3352      	adds	r3, #82	; 0x52
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fe f845 	bl	800c030 <ld_dword>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	4a05      	ldr	r2, [pc, #20]	; (800dfc0 <check_fs+0xa8>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d101      	bne.n	800dfb2 <check_fs+0x9a>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e000      	b.n	800dfb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dfb2:	2302      	movs	r3, #2
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	00544146 	.word	0x00544146
 800dfc0:	33544146 	.word	0x33544146

0800dfc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b096      	sub	sp, #88	; 0x58
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f7ff ff58 	bl	800de8e <get_ldnumber>
 800dfde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	da01      	bge.n	800dfea <find_volume+0x26>
 800dfe6:	230b      	movs	r3, #11
 800dfe8:	e230      	b.n	800e44c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dfea:	4aa1      	ldr	r2, [pc, #644]	; (800e270 <find_volume+0x2ac>)
 800dfec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dff2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <find_volume+0x3a>
 800dffa:	230c      	movs	r3, #12
 800dffc:	e226      	b.n	800e44c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e002:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	f023 0301 	bic.w	r3, r3, #1
 800e00a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d01a      	beq.n	800e04a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	785b      	ldrb	r3, [r3, #1]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fd ff53 	bl	800bec4 <disk_status>
 800e01e:	4603      	mov	r3, r0
 800e020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10c      	bne.n	800e04a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d007      	beq.n	800e046 <find_volume+0x82>
 800e036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e03a:	f003 0304 	and.w	r3, r3, #4
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e042:	230a      	movs	r3, #10
 800e044:	e202      	b.n	800e44c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e046:	2300      	movs	r3, #0
 800e048:	e200      	b.n	800e44c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e052:	b2da      	uxtb	r2, r3
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05a:	785b      	ldrb	r3, [r3, #1]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fd ff4b 	bl	800bef8 <disk_initialize>
 800e062:	4603      	mov	r3, r0
 800e064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e074:	2303      	movs	r3, #3
 800e076:	e1e9      	b.n	800e44c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d007      	beq.n	800e08e <find_volume+0xca>
 800e07e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e082:	f003 0304 	and.w	r3, r3, #4
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e08a:	230a      	movs	r3, #10
 800e08c:	e1de      	b.n	800e44c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e096:	f7ff ff3f 	bl	800df18 <check_fs>
 800e09a:	4603      	mov	r3, r0
 800e09c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e0a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d149      	bne.n	800e13c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e0ac:	e01e      	b.n	800e0ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b6:	011b      	lsls	r3, r3, #4
 800e0b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e0bc:	4413      	add	r3, r2
 800e0be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d006      	beq.n	800e0d8 <find_volume+0x114>
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fd ffae 	bl	800c030 <ld_dword>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	e000      	b.n	800e0da <find_volume+0x116>
 800e0d8:	2200      	movs	r2, #0
 800e0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	3358      	adds	r3, #88	; 0x58
 800e0e0:	443b      	add	r3, r7
 800e0e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ee:	2b03      	cmp	r3, #3
 800e0f0:	d9dd      	bls.n	800e0ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <find_volume+0x13e>
 800e0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0fe:	3b01      	subs	r3, #1
 800e100:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	3358      	adds	r3, #88	; 0x58
 800e108:	443b      	add	r3, r7
 800e10a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e10e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e112:	2b00      	cmp	r3, #0
 800e114:	d005      	beq.n	800e122 <find_volume+0x15e>
 800e116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e11a:	f7ff fefd 	bl	800df18 <check_fs>
 800e11e:	4603      	mov	r3, r0
 800e120:	e000      	b.n	800e124 <find_volume+0x160>
 800e122:	2303      	movs	r3, #3
 800e124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d905      	bls.n	800e13c <find_volume+0x178>
 800e130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e132:	3301      	adds	r3, #1
 800e134:	643b      	str	r3, [r7, #64]	; 0x40
 800e136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d9e2      	bls.n	800e102 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e13c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e140:	2b04      	cmp	r3, #4
 800e142:	d101      	bne.n	800e148 <find_volume+0x184>
 800e144:	2301      	movs	r3, #1
 800e146:	e181      	b.n	800e44c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d901      	bls.n	800e154 <find_volume+0x190>
 800e150:	230d      	movs	r3, #13
 800e152:	e17b      	b.n	800e44c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	3334      	adds	r3, #52	; 0x34
 800e158:	330b      	adds	r3, #11
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fd ff50 	bl	800c000 <ld_word>
 800e160:	4603      	mov	r3, r0
 800e162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e166:	d001      	beq.n	800e16c <find_volume+0x1a8>
 800e168:	230d      	movs	r3, #13
 800e16a:	e16f      	b.n	800e44c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	3334      	adds	r3, #52	; 0x34
 800e170:	3316      	adds	r3, #22
 800e172:	4618      	mov	r0, r3
 800e174:	f7fd ff44 	bl	800c000 <ld_word>
 800e178:	4603      	mov	r3, r0
 800e17a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <find_volume+0x1cc>
 800e182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e184:	3334      	adds	r3, #52	; 0x34
 800e186:	3324      	adds	r3, #36	; 0x24
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fd ff51 	bl	800c030 <ld_dword>
 800e18e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e194:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	789b      	ldrb	r3, [r3, #2]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d005      	beq.n	800e1b4 <find_volume+0x1f0>
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	789b      	ldrb	r3, [r3, #2]
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d001      	beq.n	800e1b4 <find_volume+0x1f0>
 800e1b0:	230d      	movs	r3, #13
 800e1b2:	e14b      	b.n	800e44c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b6:	789b      	ldrb	r3, [r3, #2]
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1bc:	fb02 f303 	mul.w	r3, r2, r3
 800e1c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d0:	895b      	ldrh	r3, [r3, #10]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d008      	beq.n	800e1e8 <find_volume+0x224>
 800e1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d8:	895b      	ldrh	r3, [r3, #10]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	895b      	ldrh	r3, [r3, #10]
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	4013      	ands	r3, r2
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <find_volume+0x228>
 800e1e8:	230d      	movs	r3, #13
 800e1ea:	e12f      	b.n	800e44c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ee:	3334      	adds	r3, #52	; 0x34
 800e1f0:	3311      	adds	r3, #17
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fd ff04 	bl	800c000 <ld_word>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	891b      	ldrh	r3, [r3, #8]
 800e204:	f003 030f 	and.w	r3, r3, #15
 800e208:	b29b      	uxth	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <find_volume+0x24e>
 800e20e:	230d      	movs	r3, #13
 800e210:	e11c      	b.n	800e44c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	3334      	adds	r3, #52	; 0x34
 800e216:	3313      	adds	r3, #19
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fd fef1 	bl	800c000 <ld_word>
 800e21e:	4603      	mov	r3, r0
 800e220:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e224:	2b00      	cmp	r3, #0
 800e226:	d106      	bne.n	800e236 <find_volume+0x272>
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	3334      	adds	r3, #52	; 0x34
 800e22c:	3320      	adds	r3, #32
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fefe 	bl	800c030 <ld_dword>
 800e234:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e238:	3334      	adds	r3, #52	; 0x34
 800e23a:	330e      	adds	r3, #14
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fd fedf 	bl	800c000 <ld_word>
 800e242:	4603      	mov	r3, r0
 800e244:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e246:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <find_volume+0x28c>
 800e24c:	230d      	movs	r3, #13
 800e24e:	e0fd      	b.n	800e44c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e254:	4413      	add	r3, r2
 800e256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e258:	8912      	ldrh	r2, [r2, #8]
 800e25a:	0912      	lsrs	r2, r2, #4
 800e25c:	b292      	uxth	r2, r2
 800e25e:	4413      	add	r3, r2
 800e260:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e266:	429a      	cmp	r2, r3
 800e268:	d204      	bcs.n	800e274 <find_volume+0x2b0>
 800e26a:	230d      	movs	r3, #13
 800e26c:	e0ee      	b.n	800e44c <find_volume+0x488>
 800e26e:	bf00      	nop
 800e270:	20001bc0 	.word	0x20001bc0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e27c:	8952      	ldrh	r2, [r2, #10]
 800e27e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e282:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <find_volume+0x2ca>
 800e28a:	230d      	movs	r3, #13
 800e28c:	e0de      	b.n	800e44c <find_volume+0x488>
		fmt = FS_FAT32;
 800e28e:	2303      	movs	r3, #3
 800e290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d802      	bhi.n	800e2a4 <find_volume+0x2e0>
 800e29e:	2302      	movs	r3, #2
 800e2a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d802      	bhi.n	800e2b4 <find_volume+0x2f0>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	1c9a      	adds	r2, r3, #2
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2c0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2c6:	441a      	add	r2, r3
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e2cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	441a      	add	r2, r3
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e2d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2da:	2b03      	cmp	r3, #3
 800e2dc:	d11e      	bne.n	800e31c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	3334      	adds	r3, #52	; 0x34
 800e2e2:	332a      	adds	r3, #42	; 0x2a
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fd fe8b 	bl	800c000 <ld_word>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <find_volume+0x330>
 800e2f0:	230d      	movs	r3, #13
 800e2f2:	e0ab      	b.n	800e44c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	891b      	ldrh	r3, [r3, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <find_volume+0x33c>
 800e2fc:	230d      	movs	r3, #13
 800e2fe:	e0a5      	b.n	800e44c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	3334      	adds	r3, #52	; 0x34
 800e304:	332c      	adds	r3, #44	; 0x2c
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd fe92 	bl	800c030 <ld_dword>
 800e30c:	4602      	mov	r2, r0
 800e30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e310:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	647b      	str	r3, [r7, #68]	; 0x44
 800e31a:	e01f      	b.n	800e35c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	891b      	ldrh	r3, [r3, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <find_volume+0x364>
 800e324:	230d      	movs	r3, #13
 800e326:	e091      	b.n	800e44c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e32e:	441a      	add	r2, r3
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d103      	bne.n	800e344 <find_volume+0x380>
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	005b      	lsls	r3, r3, #1
 800e342:	e00a      	b.n	800e35a <find_volume+0x396>
 800e344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e346:	699a      	ldr	r2, [r3, #24]
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	085a      	lsrs	r2, r3, #1
 800e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e35a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	69da      	ldr	r2, [r3, #28]
 800e360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e362:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e366:	0a5b      	lsrs	r3, r3, #9
 800e368:	429a      	cmp	r2, r3
 800e36a:	d201      	bcs.n	800e370 <find_volume+0x3ac>
 800e36c:	230d      	movs	r3, #13
 800e36e:	e06d      	b.n	800e44c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	f04f 32ff 	mov.w	r2, #4294967295
 800e376:	615a      	str	r2, [r3, #20]
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	695a      	ldr	r2, [r3, #20]
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	2280      	movs	r2, #128	; 0x80
 800e384:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	d149      	bne.n	800e422 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e390:	3334      	adds	r3, #52	; 0x34
 800e392:	3330      	adds	r3, #48	; 0x30
 800e394:	4618      	mov	r0, r3
 800e396:	f7fd fe33 	bl	800c000 <ld_word>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d140      	bne.n	800e422 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3a8:	f7fe f8da 	bl	800c560 <move_window>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d137      	bne.n	800e422 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	3334      	adds	r3, #52	; 0x34
 800e3bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fd fe1d 	bl	800c000 <ld_word>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d127      	bne.n	800e422 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	3334      	adds	r3, #52	; 0x34
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fd fe2a 	bl	800c030 <ld_dword>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	4a1d      	ldr	r2, [pc, #116]	; (800e454 <find_volume+0x490>)
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d11e      	bne.n	800e422 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	3334      	adds	r3, #52	; 0x34
 800e3e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fd fe1f 	bl	800c030 <ld_dword>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	4a18      	ldr	r2, [pc, #96]	; (800e458 <find_volume+0x494>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d113      	bne.n	800e422 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fc:	3334      	adds	r3, #52	; 0x34
 800e3fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e402:	4618      	mov	r0, r3
 800e404:	f7fd fe14 	bl	800c030 <ld_dword>
 800e408:	4602      	mov	r2, r0
 800e40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e410:	3334      	adds	r3, #52	; 0x34
 800e412:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e416:	4618      	mov	r0, r3
 800e418:	f7fd fe0a 	bl	800c030 <ld_dword>
 800e41c:	4602      	mov	r2, r0
 800e41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e420:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e428:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e42a:	4b0c      	ldr	r3, [pc, #48]	; (800e45c <find_volume+0x498>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	b29a      	uxth	r2, r3
 800e432:	4b0a      	ldr	r3, [pc, #40]	; (800e45c <find_volume+0x498>)
 800e434:	801a      	strh	r2, [r3, #0]
 800e436:	4b09      	ldr	r3, [pc, #36]	; (800e45c <find_volume+0x498>)
 800e438:	881a      	ldrh	r2, [r3, #0]
 800e43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	4a07      	ldr	r2, [pc, #28]	; (800e460 <find_volume+0x49c>)
 800e442:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e446:	f7fe f823 	bl	800c490 <clear_lock>
#endif
	return FR_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3758      	adds	r7, #88	; 0x58
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	41615252 	.word	0x41615252
 800e458:	61417272 	.word	0x61417272
 800e45c:	20001bc4 	.word	0x20001bc4
 800e460:	20001be8 	.word	0x20001be8

0800e464 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e46e:	2309      	movs	r3, #9
 800e470:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01c      	beq.n	800e4b2 <validate+0x4e>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d018      	beq.n	800e4b2 <validate+0x4e>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d013      	beq.n	800e4b2 <validate+0x4e>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	889a      	ldrh	r2, [r3, #4]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	88db      	ldrh	r3, [r3, #6]
 800e494:	429a      	cmp	r2, r3
 800e496:	d10c      	bne.n	800e4b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	785b      	ldrb	r3, [r3, #1]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd fd10 	bl	800bec4 <disk_status>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d101      	bne.n	800e4b2 <validate+0x4e>
			res = FR_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <validate+0x5a>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	e000      	b.n	800e4c0 <validate+0x5c>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	683a      	ldr	r2, [r7, #0]
 800e4c2:	6013      	str	r3, [r2, #0]
	return res;
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
	...

0800e4d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e4e2:	f107 0310 	add.w	r3, r7, #16
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7ff fcd1 	bl	800de8e <get_ldnumber>
 800e4ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da01      	bge.n	800e4f8 <f_mount+0x28>
 800e4f4:	230b      	movs	r3, #11
 800e4f6:	e02b      	b.n	800e550 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4f8:	4a17      	ldr	r2, [pc, #92]	; (800e558 <f_mount+0x88>)
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e500:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e508:	69b8      	ldr	r0, [r7, #24]
 800e50a:	f7fd ffc1 	bl	800c490 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	2200      	movs	r2, #0
 800e512:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	490d      	ldr	r1, [pc, #52]	; (800e558 <f_mount+0x88>)
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <f_mount+0x66>
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d001      	beq.n	800e53a <f_mount+0x6a>
 800e536:	2300      	movs	r3, #0
 800e538:	e00a      	b.n	800e550 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e53a:	f107 010c 	add.w	r1, r7, #12
 800e53e:	f107 0308 	add.w	r3, r7, #8
 800e542:	2200      	movs	r2, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff fd3d 	bl	800dfc4 <find_volume>
 800e54a:	4603      	mov	r3, r0
 800e54c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e550:	4618      	mov	r0, r3
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20001bc0 	.word	0x20001bc0

0800e55c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b09a      	sub	sp, #104	; 0x68
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4613      	mov	r3, r2
 800e568:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <f_open+0x18>
 800e570:	2309      	movs	r3, #9
 800e572:	e1ad      	b.n	800e8d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e574:	79fb      	ldrb	r3, [r7, #7]
 800e576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e57a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e57c:	79fa      	ldrb	r2, [r7, #7]
 800e57e:	f107 0114 	add.w	r1, r7, #20
 800e582:	f107 0308 	add.w	r3, r7, #8
 800e586:	4618      	mov	r0, r3
 800e588:	f7ff fd1c 	bl	800dfc4 <find_volume>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e596:	2b00      	cmp	r3, #0
 800e598:	f040 8191 	bne.w	800e8be <f_open+0x362>
		dj.obj.fs = fs;
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	f107 0318 	add.w	r3, r7, #24
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fbff 	bl	800ddac <follow_path>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d11a      	bne.n	800e5f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e5bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e5c0:	b25b      	sxtb	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	da03      	bge.n	800e5ce <f_open+0x72>
				res = FR_INVALID_NAME;
 800e5c6:	2306      	movs	r3, #6
 800e5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5cc:	e011      	b.n	800e5f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	f023 0301 	bic.w	r3, r3, #1
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	bf14      	ite	ne
 800e5d8:	2301      	movne	r3, #1
 800e5da:	2300      	moveq	r3, #0
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	f107 0318 	add.w	r3, r7, #24
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fd fe0a 	bl	800c200 <chk_lock>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	f003 031c 	and.w	r3, r3, #28
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d07f      	beq.n	800e6fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e5fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e600:	2b00      	cmp	r3, #0
 800e602:	d017      	beq.n	800e634 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e608:	2b04      	cmp	r3, #4
 800e60a:	d10e      	bne.n	800e62a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e60c:	f7fd fe54 	bl	800c2b8 <enq_lock>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d006      	beq.n	800e624 <f_open+0xc8>
 800e616:	f107 0318 	add.w	r3, r7, #24
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff f838 	bl	800d690 <dir_register>
 800e620:	4603      	mov	r3, r0
 800e622:	e000      	b.n	800e626 <f_open+0xca>
 800e624:	2312      	movs	r3, #18
 800e626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e62a:	79fb      	ldrb	r3, [r7, #7]
 800e62c:	f043 0308 	orr.w	r3, r3, #8
 800e630:	71fb      	strb	r3, [r7, #7]
 800e632:	e010      	b.n	800e656 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e634:	7fbb      	ldrb	r3, [r7, #30]
 800e636:	f003 0311 	and.w	r3, r3, #17
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <f_open+0xea>
					res = FR_DENIED;
 800e63e:	2307      	movs	r3, #7
 800e640:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e644:	e007      	b.n	800e656 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e646:	79fb      	ldrb	r3, [r7, #7]
 800e648:	f003 0304 	and.w	r3, r3, #4
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <f_open+0xfa>
 800e650:	2308      	movs	r3, #8
 800e652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e656:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d168      	bne.n	800e730 <f_open+0x1d4>
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	f003 0308 	and.w	r3, r3, #8
 800e664:	2b00      	cmp	r3, #0
 800e666:	d063      	beq.n	800e730 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e668:	f7fa fc30 	bl	8008ecc <get_fattime>
 800e66c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e670:	330e      	adds	r3, #14
 800e672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd fd19 	bl	800c0ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e67c:	3316      	adds	r3, #22
 800e67e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e680:	4618      	mov	r0, r3
 800e682:	f7fd fd13 	bl	800c0ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	330b      	adds	r3, #11
 800e68a:	2220      	movs	r2, #32
 800e68c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e692:	4611      	mov	r1, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe fc6a 	bl	800cf6e <ld_clust>
 800e69a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fe fc82 	bl	800cfac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6aa:	331c      	adds	r3, #28
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fd fcfc 	bl	800c0ac <st_dword>
					fs->wflag = 1;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d037      	beq.n	800e730 <f_open+0x1d4>
						dw = fs->winsect;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e6c6:	f107 0318 	add.w	r3, r7, #24
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe f995 	bl	800c9fe <remove_chain>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e6da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d126      	bne.n	800e730 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fd ff3a 	bl	800c560 <move_window>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6f6:	3a01      	subs	r2, #1
 800e6f8:	611a      	str	r2, [r3, #16]
 800e6fa:	e019      	b.n	800e730 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e700:	2b00      	cmp	r3, #0
 800e702:	d115      	bne.n	800e730 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e704:	7fbb      	ldrb	r3, [r7, #30]
 800e706:	f003 0310 	and.w	r3, r3, #16
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d003      	beq.n	800e716 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e70e:	2304      	movs	r3, #4
 800e710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e714:	e00c      	b.n	800e730 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e716:	79fb      	ldrb	r3, [r7, #7]
 800e718:	f003 0302 	and.w	r3, r3, #2
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d007      	beq.n	800e730 <f_open+0x1d4>
 800e720:	7fbb      	ldrb	r3, [r7, #30]
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	d002      	beq.n	800e730 <f_open+0x1d4>
						res = FR_DENIED;
 800e72a:	2307      	movs	r3, #7
 800e72c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e734:	2b00      	cmp	r3, #0
 800e736:	d128      	bne.n	800e78a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	f003 0308 	and.w	r3, r3, #8
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e748:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	f023 0301 	bic.w	r3, r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	bf14      	ite	ne
 800e762:	2301      	movne	r3, #1
 800e764:	2300      	moveq	r3, #0
 800e766:	b2db      	uxtb	r3, r3
 800e768:	461a      	mov	r2, r3
 800e76a:	f107 0318 	add.w	r3, r7, #24
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7fd fdc3 	bl	800c2fc <inc_lock>
 800e776:	4602      	mov	r2, r0
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d102      	bne.n	800e78a <f_open+0x22e>
 800e784:	2302      	movs	r3, #2
 800e786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e78a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f040 8095 	bne.w	800e8be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fe fbe7 	bl	800cf6e <ld_clust>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a8:	331c      	adds	r3, #28
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fd fc40 	bl	800c030 <ld_dword>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	88da      	ldrh	r2, [r3, #6]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	79fa      	ldrb	r2, [r7, #7]
 800e7ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3330      	adds	r3, #48	; 0x30
 800e7e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fd fcaa 	bl	800c146 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	f003 0320 	and.w	r3, r3, #32
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d060      	beq.n	800e8be <f_open+0x362>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d05c      	beq.n	800e8be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	68da      	ldr	r2, [r3, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	895b      	ldrh	r3, [r3, #10]
 800e810:	025b      	lsls	r3, r3, #9
 800e812:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e820:	e016      	b.n	800e850 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e826:	4618      	mov	r0, r3
 800e828:	f7fd ff55 	bl	800c6d6 <get_fat>
 800e82c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e82e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e830:	2b01      	cmp	r3, #1
 800e832:	d802      	bhi.n	800e83a <f_open+0x2de>
 800e834:	2302      	movs	r3, #2
 800e836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e840:	d102      	bne.n	800e848 <f_open+0x2ec>
 800e842:	2301      	movs	r3, #1
 800e844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e854:	2b00      	cmp	r3, #0
 800e856:	d103      	bne.n	800e860 <f_open+0x304>
 800e858:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d8e0      	bhi.n	800e822 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e864:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e866:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d127      	bne.n	800e8be <f_open+0x362>
 800e86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e874:	2b00      	cmp	r3, #0
 800e876:	d022      	beq.n	800e8be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fd ff0b 	bl	800c698 <clust2sect>
 800e882:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e886:	2b00      	cmp	r3, #0
 800e888:	d103      	bne.n	800e892 <f_open+0x336>
						res = FR_INT_ERR;
 800e88a:	2302      	movs	r3, #2
 800e88c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e890:	e015      	b.n	800e8be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e894:	0a5a      	lsrs	r2, r3, #9
 800e896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e898:	441a      	add	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	7858      	ldrb	r0, [r3, #1]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6a1a      	ldr	r2, [r3, #32]
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	f7fd fb49 	bl	800bf44 <disk_read>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <f_open+0x362>
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e8be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <f_open+0x370>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3768      	adds	r7, #104	; 0x68
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f107 0214 	add.w	r2, r7, #20
 800e8f6:	4611      	mov	r1, r2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff fdb3 	bl	800e464 <validate>
 800e8fe:	4603      	mov	r3, r0
 800e900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d107      	bne.n	800e91c <f_read+0x44>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	7d5b      	ldrb	r3, [r3, #21]
 800e910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <f_read+0x4a>
 800e91c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e920:	e115      	b.n	800eb4e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	7d1b      	ldrb	r3, [r3, #20]
 800e926:	f003 0301 	and.w	r3, r3, #1
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <f_read+0x5a>
 800e92e:	2307      	movs	r3, #7
 800e930:	e10d      	b.n	800eb4e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	429a      	cmp	r2, r3
 800e944:	f240 80fe 	bls.w	800eb44 <f_read+0x26c>
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e94c:	e0fa      	b.n	800eb44 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e956:	2b00      	cmp	r3, #0
 800e958:	f040 80c6 	bne.w	800eae8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	0a5b      	lsrs	r3, r3, #9
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	8952      	ldrh	r2, [r2, #10]
 800e966:	3a01      	subs	r2, #1
 800e968:	4013      	ands	r3, r2
 800e96a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d12f      	bne.n	800e9d2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d103      	bne.n	800e982 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	633b      	str	r3, [r7, #48]	; 0x30
 800e980:	e013      	b.n	800e9aa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d007      	beq.n	800e99a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	4619      	mov	r1, r3
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f7fe f931 	bl	800cbf8 <clmt_clust>
 800e996:	6338      	str	r0, [r7, #48]	; 0x30
 800e998:	e007      	b.n	800e9aa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e99a:	68fa      	ldr	r2, [r7, #12]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	69db      	ldr	r3, [r3, #28]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f7fd fe97 	bl	800c6d6 <get_fat>
 800e9a8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d804      	bhi.n	800e9ba <f_read+0xe2>
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	755a      	strb	r2, [r3, #21]
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	e0c9      	b.n	800eb4e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d104      	bne.n	800e9cc <f_read+0xf4>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	755a      	strb	r2, [r3, #21]
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e0c0      	b.n	800eb4e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e9d2:	697a      	ldr	r2, [r7, #20]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	69db      	ldr	r3, [r3, #28]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fd fe5c 	bl	800c698 <clust2sect>
 800e9e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d104      	bne.n	800e9f2 <f_read+0x11a>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	755a      	strb	r2, [r3, #21]
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e0ad      	b.n	800eb4e <f_read+0x276>
			sect += csect;
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	0a5b      	lsrs	r3, r3, #9
 800e9fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d039      	beq.n	800ea7a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea06:	69fa      	ldr	r2, [r7, #28]
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	4413      	add	r3, r2
 800ea0c:	697a      	ldr	r2, [r7, #20]
 800ea0e:	8952      	ldrh	r2, [r2, #10]
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d905      	bls.n	800ea20 <f_read+0x148>
					cc = fs->csize - csect;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	895b      	ldrh	r3, [r3, #10]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	7858      	ldrb	r0, [r3, #1]
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea2a:	f7fd fa8b 	bl	800bf44 <disk_read>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d004      	beq.n	800ea3e <f_read+0x166>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2201      	movs	r2, #1
 800ea38:	755a      	strb	r2, [r3, #21]
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e087      	b.n	800eb4e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	7d1b      	ldrb	r3, [r3, #20]
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	da14      	bge.n	800ea72 <f_read+0x19a>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6a1a      	ldr	r2, [r3, #32]
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d90d      	bls.n	800ea72 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6a1a      	ldr	r2, [r3, #32]
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	025b      	lsls	r3, r3, #9
 800ea60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea62:	18d0      	adds	r0, r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3330      	adds	r3, #48	; 0x30
 800ea68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f7fd fb49 	bl	800c104 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	025b      	lsls	r3, r3, #9
 800ea76:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea78:	e050      	b.n	800eb1c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	69ba      	ldr	r2, [r7, #24]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d02e      	beq.n	800eae2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	7d1b      	ldrb	r3, [r3, #20]
 800ea88:	b25b      	sxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	da18      	bge.n	800eac0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	7858      	ldrb	r0, [r3, #1]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6a1a      	ldr	r2, [r3, #32]
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	f7fd fa71 	bl	800bf84 <disk_write>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d004      	beq.n	800eab2 <f_read+0x1da>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	755a      	strb	r2, [r3, #21]
 800eaae:	2301      	movs	r3, #1
 800eab0:	e04d      	b.n	800eb4e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	7d1b      	ldrb	r3, [r3, #20]
 800eab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	7858      	ldrb	r0, [r3, #1]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaca:	2301      	movs	r3, #1
 800eacc:	69ba      	ldr	r2, [r7, #24]
 800eace:	f7fd fa39 	bl	800bf44 <disk_read>
 800ead2:	4603      	mov	r3, r0
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d004      	beq.n	800eae2 <f_read+0x20a>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2201      	movs	r2, #1
 800eadc:	755a      	strb	r2, [r3, #21]
 800eade:	2301      	movs	r3, #1
 800eae0:	e035      	b.n	800eb4e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaf0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eaf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d901      	bls.n	800eb02 <f_read+0x22a>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb10:	4413      	add	r3, r2
 800eb12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb14:	4619      	mov	r1, r3
 800eb16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb18:	f7fd faf4 	bl	800c104 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	4413      	add	r3, r2
 800eb22:	627b      	str	r3, [r7, #36]	; 0x24
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	699a      	ldr	r2, [r3, #24]
 800eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2a:	441a      	add	r2, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	619a      	str	r2, [r3, #24]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	441a      	add	r2, r3
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f47f af01 	bne.w	800e94e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3738      	adds	r7, #56	; 0x38
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b086      	sub	sp, #24
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f107 0208 	add.w	r2, r7, #8
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff fc7c 	bl	800e464 <validate>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb70:	7dfb      	ldrb	r3, [r7, #23]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d168      	bne.n	800ec48 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	7d1b      	ldrb	r3, [r3, #20]
 800eb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d062      	beq.n	800ec48 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	7d1b      	ldrb	r3, [r3, #20]
 800eb86:	b25b      	sxtb	r3, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da15      	bge.n	800ebb8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	7858      	ldrb	r0, [r3, #1]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a1a      	ldr	r2, [r3, #32]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	f7fd f9f2 	bl	800bf84 <disk_write>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <f_sync+0x54>
 800eba6:	2301      	movs	r3, #1
 800eba8:	e04f      	b.n	800ec4a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	7d1b      	ldrb	r3, [r3, #20]
 800ebae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ebb8:	f7fa f988 	bl	8008ecc <get_fattime>
 800ebbc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	f7fd fcca 	bl	800c560 <move_window>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d138      	bne.n	800ec48 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebda:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	330b      	adds	r3, #11
 800ebe0:	781a      	ldrb	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	330b      	adds	r3, #11
 800ebe6:	f042 0220 	orr.w	r2, r2, #32
 800ebea:	b2d2      	uxtb	r2, r2
 800ebec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6818      	ldr	r0, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	68f9      	ldr	r1, [r7, #12]
 800ebfa:	f7fe f9d7 	bl	800cfac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f103 021c 	add.w	r2, r3, #28
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	f7fd fa4e 	bl	800c0ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	3316      	adds	r3, #22
 800ec14:	6939      	ldr	r1, [r7, #16]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fd fa48 	bl	800c0ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	3312      	adds	r3, #18
 800ec20:	2100      	movs	r1, #0
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fd fa27 	bl	800c076 <st_word>
					fs->wflag = 1;
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fd fcc3 	bl	800c5bc <sync_fs>
 800ec36:	4603      	mov	r3, r0
 800ec38:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7d1b      	ldrb	r3, [r3, #20]
 800ec3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3718      	adds	r7, #24
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b084      	sub	sp, #16
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff7b 	bl	800eb56 <f_sync>
 800ec60:	4603      	mov	r3, r0
 800ec62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d118      	bne.n	800ec9c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f107 0208 	add.w	r2, r7, #8
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fbf6 	bl	800e464 <validate>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10c      	bne.n	800ec9c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fd fbc6 	bl	800c418 <dec_lock>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec90:	7bfb      	ldrb	r3, [r7, #15]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d102      	bne.n	800ec9c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b090      	sub	sp, #64	; 0x40
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f107 0208 	add.w	r2, r7, #8
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7ff fbd3 	bl	800e464 <validate>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ecc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d103      	bne.n	800ecd4 <f_lseek+0x2e>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	7d5b      	ldrb	r3, [r3, #21]
 800ecd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ecd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <f_lseek+0x3c>
 800ecdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ece0:	e1e6      	b.n	800f0b0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f000 80d1 	beq.w	800ee8e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf2:	d15a      	bne.n	800edaa <f_lseek+0x104>
			tbl = fp->cltbl;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	1d1a      	adds	r2, r3, #4
 800ecfe:	627a      	str	r2, [r7, #36]	; 0x24
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	617b      	str	r3, [r7, #20]
 800ed04:	2302      	movs	r3, #2
 800ed06:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d03a      	beq.n	800ed8a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ed14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed16:	613b      	str	r3, [r7, #16]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	3302      	adds	r3, #2
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	3301      	adds	r3, #1
 800ed2a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fd fcd0 	bl	800c6d6 <get_fat>
 800ed36:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ed38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d804      	bhi.n	800ed48 <f_lseek+0xa2>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2202      	movs	r2, #2
 800ed42:	755a      	strb	r2, [r3, #21]
 800ed44:	2302      	movs	r3, #2
 800ed46:	e1b3      	b.n	800f0b0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d104      	bne.n	800ed5a <f_lseek+0xb4>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	755a      	strb	r2, [r3, #21]
 800ed56:	2301      	movs	r3, #1
 800ed58:	e1aa      	b.n	800f0b0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d0de      	beq.n	800ed22 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ed64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d809      	bhi.n	800ed80 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6e:	1d1a      	adds	r2, r3, #4
 800ed70:	627a      	str	r2, [r7, #36]	; 0x24
 800ed72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed78:	1d1a      	adds	r2, r3, #4
 800ed7a:	627a      	str	r2, [r7, #36]	; 0x24
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d3c4      	bcc.n	800ed14 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed90:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ed92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d803      	bhi.n	800eda2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	601a      	str	r2, [r3, #0]
 800eda0:	e184      	b.n	800f0ac <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eda2:	2311      	movs	r3, #17
 800eda4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eda8:	e180      	b.n	800f0ac <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	683a      	ldr	r2, [r7, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d902      	bls.n	800edba <f_lseek+0x114>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f000 8172 	beq.w	800f0ac <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	3b01      	subs	r3, #1
 800edcc:	4619      	mov	r1, r3
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fd ff12 	bl	800cbf8 <clmt_clust>
 800edd4:	4602      	mov	r2, r0
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	69db      	ldr	r3, [r3, #28]
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fd fc58 	bl	800c698 <clust2sect>
 800ede8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d104      	bne.n	800edfa <f_lseek+0x154>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2202      	movs	r2, #2
 800edf4:	755a      	strb	r2, [r3, #21]
 800edf6:	2302      	movs	r3, #2
 800edf8:	e15a      	b.n	800f0b0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	3b01      	subs	r3, #1
 800edfe:	0a5b      	lsrs	r3, r3, #9
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	8952      	ldrh	r2, [r2, #10]
 800ee04:	3a01      	subs	r2, #1
 800ee06:	4013      	ands	r3, r2
 800ee08:	69ba      	ldr	r2, [r7, #24]
 800ee0a:	4413      	add	r3, r2
 800ee0c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f000 8148 	beq.w	800f0ac <f_lseek+0x406>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a1b      	ldr	r3, [r3, #32]
 800ee20:	69ba      	ldr	r2, [r7, #24]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	f000 8142 	beq.w	800f0ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7d1b      	ldrb	r3, [r3, #20]
 800ee2c:	b25b      	sxtb	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	da18      	bge.n	800ee64 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	7858      	ldrb	r0, [r3, #1]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a1a      	ldr	r2, [r3, #32]
 800ee40:	2301      	movs	r3, #1
 800ee42:	f7fd f89f 	bl	800bf84 <disk_write>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d004      	beq.n	800ee56 <f_lseek+0x1b0>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	755a      	strb	r2, [r3, #21]
 800ee52:	2301      	movs	r3, #1
 800ee54:	e12c      	b.n	800f0b0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	7d1b      	ldrb	r3, [r3, #20]
 800ee5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	7858      	ldrb	r0, [r3, #1]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee6e:	2301      	movs	r3, #1
 800ee70:	69ba      	ldr	r2, [r7, #24]
 800ee72:	f7fd f867 	bl	800bf44 <disk_read>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d004      	beq.n	800ee86 <f_lseek+0x1e0>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	755a      	strb	r2, [r3, #21]
 800ee82:	2301      	movs	r3, #1
 800ee84:	e114      	b.n	800f0b0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	69ba      	ldr	r2, [r7, #24]
 800ee8a:	621a      	str	r2, [r3, #32]
 800ee8c:	e10e      	b.n	800f0ac <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d908      	bls.n	800eeaa <f_lseek+0x204>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	f003 0302 	and.w	r3, r3, #2
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d102      	bne.n	800eeaa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	637b      	str	r3, [r7, #52]	; 0x34
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeb8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 80a7 	beq.w	800f010 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	895b      	ldrh	r3, [r3, #10]
 800eec6:	025b      	lsls	r3, r3, #9
 800eec8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01b      	beq.n	800ef08 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	1e5a      	subs	r2, r3, #1
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	fbb2 f2f3 	udiv	r2, r2, r3
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	1e59      	subs	r1, r3, #1
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d30f      	bcc.n	800ef08 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	1e5a      	subs	r2, r3, #1
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	425b      	negs	r3, r3
 800eef0:	401a      	ands	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	699b      	ldr	r3, [r3, #24]
 800eefa:	683a      	ldr	r2, [r7, #0]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	69db      	ldr	r3, [r3, #28]
 800ef04:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef06:	e022      	b.n	800ef4e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d119      	bne.n	800ef48 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2100      	movs	r1, #0
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fd fdd5 	bl	800cac8 <create_chain>
 800ef1e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d104      	bne.n	800ef30 <f_lseek+0x28a>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2202      	movs	r2, #2
 800ef2a:	755a      	strb	r2, [r3, #21]
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	e0bf      	b.n	800f0b0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d104      	bne.n	800ef42 <f_lseek+0x29c>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	755a      	strb	r2, [r3, #21]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e0b6      	b.n	800f0b0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef46:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef4c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d05d      	beq.n	800f010 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ef54:	e03a      	b.n	800efcc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	603b      	str	r3, [r7, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	699a      	ldr	r2, [r3, #24]
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	441a      	add	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7d1b      	ldrb	r3, [r3, #20]
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00b      	beq.n	800ef8e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fd fda4 	bl	800cac8 <create_chain>
 800ef80:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ef82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d108      	bne.n	800ef9a <f_lseek+0x2f4>
							ofs = 0; break;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	e022      	b.n	800efd4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fd fb9f 	bl	800c6d6 <get_fat>
 800ef98:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa0:	d104      	bne.n	800efac <f_lseek+0x306>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2201      	movs	r2, #1
 800efa6:	755a      	strb	r2, [r3, #21]
 800efa8:	2301      	movs	r3, #1
 800efaa:	e081      	b.n	800f0b0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d904      	bls.n	800efbc <f_lseek+0x316>
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efb8:	429a      	cmp	r2, r3
 800efba:	d304      	bcc.n	800efc6 <f_lseek+0x320>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2202      	movs	r2, #2
 800efc0:	755a      	strb	r2, [r3, #21]
 800efc2:	2302      	movs	r3, #2
 800efc4:	e074      	b.n	800f0b0 <f_lseek+0x40a>
					fp->clust = clst;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d8c0      	bhi.n	800ef56 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	699a      	ldr	r2, [r3, #24]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	441a      	add	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d012      	beq.n	800f010 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fd fb52 	bl	800c698 <clust2sect>
 800eff4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800eff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d104      	bne.n	800f006 <f_lseek+0x360>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2202      	movs	r2, #2
 800f000:	755a      	strb	r2, [r3, #21]
 800f002:	2302      	movs	r3, #2
 800f004:	e054      	b.n	800f0b0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	0a5b      	lsrs	r3, r3, #9
 800f00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f00c:	4413      	add	r3, r2
 800f00e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	699a      	ldr	r2, [r3, #24]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d90a      	bls.n	800f032 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
 800f028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d036      	beq.n	800f0ac <f_lseek+0x406>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f044:	429a      	cmp	r2, r3
 800f046:	d031      	beq.n	800f0ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	b25b      	sxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	da18      	bge.n	800f084 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	7858      	ldrb	r0, [r3, #1]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a1a      	ldr	r2, [r3, #32]
 800f060:	2301      	movs	r3, #1
 800f062:	f7fc ff8f 	bl	800bf84 <disk_write>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d004      	beq.n	800f076 <f_lseek+0x3d0>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	755a      	strb	r2, [r3, #21]
 800f072:	2301      	movs	r3, #1
 800f074:	e01c      	b.n	800f0b0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7d1b      	ldrb	r3, [r3, #20]
 800f07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f07e:	b2da      	uxtb	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	7858      	ldrb	r0, [r3, #1]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f08e:	2301      	movs	r3, #1
 800f090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f092:	f7fc ff57 	bl	800bf44 <disk_read>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <f_lseek+0x400>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	755a      	strb	r2, [r3, #21]
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e004      	b.n	800f0b0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f0ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3740      	adds	r7, #64	; 0x40
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <f_opendir+0x14>
 800f0c8:	2309      	movs	r3, #9
 800f0ca:	e064      	b.n	800f196 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f0d0:	f107 010c 	add.w	r1, r7, #12
 800f0d4:	463b      	mov	r3, r7
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe ff73 	bl	800dfc4 <find_volume>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d14f      	bne.n	800f188 <f_opendir+0xd0>
		obj->fs = fs;
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7fe fe5a 	bl	800ddac <follow_path>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d13d      	bne.n	800f17e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f108:	b25b      	sxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	db12      	blt.n	800f134 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	799b      	ldrb	r3, [r3, #6]
 800f112:	f003 0310 	and.w	r3, r3, #16
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00a      	beq.n	800f130 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6a1b      	ldr	r3, [r3, #32]
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	f7fd ff23 	bl	800cf6e <ld_clust>
 800f128:	4602      	mov	r2, r0
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	609a      	str	r2, [r3, #8]
 800f12e:	e001      	b.n	800f134 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f130:	2305      	movs	r3, #5
 800f132:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d121      	bne.n	800f17e <f_opendir+0xc6>
				obj->id = fs->id;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	88da      	ldrh	r2, [r3, #6]
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f142:	2100      	movs	r1, #0
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7fd fd8b 	bl	800cc60 <dir_sdi>
 800f14a:	4603      	mov	r3, r0
 800f14c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f14e:	7dfb      	ldrb	r3, [r7, #23]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d114      	bne.n	800f17e <f_opendir+0xc6>
					if (obj->sclust) {
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00d      	beq.n	800f178 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f15c:	2100      	movs	r1, #0
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7fd f8cc 	bl	800c2fc <inc_lock>
 800f164:	4602      	mov	r2, r0
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d105      	bne.n	800f17e <f_opendir+0xc6>
 800f172:	2312      	movs	r3, #18
 800f174:	75fb      	strb	r3, [r7, #23]
 800f176:	e002      	b.n	800f17e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	2200      	movs	r2, #0
 800f17c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	2b04      	cmp	r3, #4
 800f182:	d101      	bne.n	800f188 <f_opendir+0xd0>
 800f184:	2305      	movs	r3, #5
 800f186:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f188:	7dfb      	ldrb	r3, [r7, #23]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d002      	beq.n	800f194 <f_opendir+0xdc>
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2200      	movs	r2, #0
 800f192:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f194:	7dfb      	ldrb	r3, [r7, #23]
}
 800f196:	4618      	mov	r0, r3
 800f198:	3718      	adds	r7, #24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b084      	sub	sp, #16
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f107 0208 	add.w	r2, r7, #8
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7ff f958 	bl	800e464 <validate>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d110      	bne.n	800f1e0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d006      	beq.n	800f1d4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd f924 	bl	800c418 <dec_lock>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d102      	bne.n	800f1e0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b084      	sub	sp, #16
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f107 0208 	add.w	r2, r7, #8
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff f931 	bl	800e464 <validate>
 800f202:	4603      	mov	r3, r0
 800f204:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f206:	7bfb      	ldrb	r3, [r7, #15]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d126      	bne.n	800f25a <f_readdir+0x70>
		if (!fno) {
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d106      	bne.n	800f220 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f212:	2100      	movs	r1, #0
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7fd fd23 	bl	800cc60 <dir_sdi>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73fb      	strb	r3, [r7, #15]
 800f21e:	e01c      	b.n	800f25a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f220:	2100      	movs	r1, #0
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7fe f8cd 	bl	800d3c2 <dir_read>
 800f228:	4603      	mov	r3, r0
 800f22a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f22c:	7bfb      	ldrb	r3, [r7, #15]
 800f22e:	2b04      	cmp	r3, #4
 800f230:	d101      	bne.n	800f236 <f_readdir+0x4c>
 800f232:	2300      	movs	r3, #0
 800f234:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f236:	7bfb      	ldrb	r3, [r7, #15]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10e      	bne.n	800f25a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f23c:	6839      	ldr	r1, [r7, #0]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7fe fb1e 	bl	800d880 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f244:	2100      	movs	r1, #0
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7fd fd85 	bl	800cd56 <dir_next>
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	2b04      	cmp	r3, #4
 800f254:	d101      	bne.n	800f25a <f_readdir+0x70>
 800f256:	2300      	movs	r3, #0
 800f258:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f264:	b480      	push	{r7}
 800f266:	b087      	sub	sp, #28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	4613      	mov	r3, r2
 800f270:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f272:	2301      	movs	r3, #1
 800f274:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f27a:	4b1f      	ldr	r3, [pc, #124]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f27c:	7a5b      	ldrb	r3, [r3, #9]
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d131      	bne.n	800f2e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f284:	4b1c      	ldr	r3, [pc, #112]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f286:	7a5b      	ldrb	r3, [r3, #9]
 800f288:	b2db      	uxtb	r3, r3
 800f28a:	461a      	mov	r2, r3
 800f28c:	4b1a      	ldr	r3, [pc, #104]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f28e:	2100      	movs	r1, #0
 800f290:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f292:	4b19      	ldr	r3, [pc, #100]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f294:	7a5b      	ldrb	r3, [r3, #9]
 800f296:	b2db      	uxtb	r3, r3
 800f298:	4a17      	ldr	r2, [pc, #92]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f2a2:	4b15      	ldr	r3, [pc, #84]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f2a4:	7a5b      	ldrb	r3, [r3, #9]
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	4b13      	ldr	r3, [pc, #76]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	79fa      	ldrb	r2, [r7, #7]
 800f2b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f2b2:	4b11      	ldr	r3, [pc, #68]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f2b4:	7a5b      	ldrb	r3, [r3, #9]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	b2d1      	uxtb	r1, r2
 800f2bc:	4a0e      	ldr	r2, [pc, #56]	; (800f2f8 <FATFS_LinkDriverEx+0x94>)
 800f2be:	7251      	strb	r1, [r2, #9]
 800f2c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f2c2:	7dbb      	ldrb	r3, [r7, #22]
 800f2c4:	3330      	adds	r3, #48	; 0x30
 800f2c6:	b2da      	uxtb	r2, r3
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	223a      	movs	r2, #58	; 0x3a
 800f2d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	3302      	adds	r3, #2
 800f2d8:	222f      	movs	r2, #47	; 0x2f
 800f2da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	3303      	adds	r3, #3
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	371c      	adds	r7, #28
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	20001de8 	.word	0x20001de8

0800f2fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f306:	2200      	movs	r2, #0
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ffaa 	bl	800f264 <FATFS_LinkDriverEx>
 800f310:	4603      	mov	r3, r0
}
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
	...

0800f31c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	4603      	mov	r3, r0
 800f324:	6039      	str	r1, [r7, #0]
 800f326:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f328:	88fb      	ldrh	r3, [r7, #6]
 800f32a:	2b7f      	cmp	r3, #127	; 0x7f
 800f32c:	d802      	bhi.n	800f334 <ff_convert+0x18>
		c = chr;
 800f32e:	88fb      	ldrh	r3, [r7, #6]
 800f330:	81fb      	strh	r3, [r7, #14]
 800f332:	e025      	b.n	800f380 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00b      	beq.n	800f352 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f33a:	88fb      	ldrh	r3, [r7, #6]
 800f33c:	2bff      	cmp	r3, #255	; 0xff
 800f33e:	d805      	bhi.n	800f34c <ff_convert+0x30>
 800f340:	88fb      	ldrh	r3, [r7, #6]
 800f342:	3b80      	subs	r3, #128	; 0x80
 800f344:	4a12      	ldr	r2, [pc, #72]	; (800f390 <ff_convert+0x74>)
 800f346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f34a:	e000      	b.n	800f34e <ff_convert+0x32>
 800f34c:	2300      	movs	r3, #0
 800f34e:	81fb      	strh	r3, [r7, #14]
 800f350:	e016      	b.n	800f380 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f352:	2300      	movs	r3, #0
 800f354:	81fb      	strh	r3, [r7, #14]
 800f356:	e009      	b.n	800f36c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f358:	89fb      	ldrh	r3, [r7, #14]
 800f35a:	4a0d      	ldr	r2, [pc, #52]	; (800f390 <ff_convert+0x74>)
 800f35c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f360:	88fa      	ldrh	r2, [r7, #6]
 800f362:	429a      	cmp	r2, r3
 800f364:	d006      	beq.n	800f374 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f366:	89fb      	ldrh	r3, [r7, #14]
 800f368:	3301      	adds	r3, #1
 800f36a:	81fb      	strh	r3, [r7, #14]
 800f36c:	89fb      	ldrh	r3, [r7, #14]
 800f36e:	2b7f      	cmp	r3, #127	; 0x7f
 800f370:	d9f2      	bls.n	800f358 <ff_convert+0x3c>
 800f372:	e000      	b.n	800f376 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f374:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f376:	89fb      	ldrh	r3, [r7, #14]
 800f378:	3380      	adds	r3, #128	; 0x80
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f380:	89fb      	ldrh	r3, [r7, #14]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	0800ff98 	.word	0x0800ff98

0800f394 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f394:	b480      	push	{r7}
 800f396:	b087      	sub	sp, #28
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f39e:	88fb      	ldrh	r3, [r7, #6]
 800f3a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3a4:	d201      	bcs.n	800f3aa <ff_wtoupper+0x16>
 800f3a6:	4b3e      	ldr	r3, [pc, #248]	; (800f4a0 <ff_wtoupper+0x10c>)
 800f3a8:	e000      	b.n	800f3ac <ff_wtoupper+0x18>
 800f3aa:	4b3e      	ldr	r3, [pc, #248]	; (800f4a4 <ff_wtoupper+0x110>)
 800f3ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	1c9a      	adds	r2, r3, #2
 800f3b2:	617a      	str	r2, [r7, #20]
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f3b8:	8a7b      	ldrh	r3, [r7, #18]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d068      	beq.n	800f490 <ff_wtoupper+0xfc>
 800f3be:	88fa      	ldrh	r2, [r7, #6]
 800f3c0:	8a7b      	ldrh	r3, [r7, #18]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d364      	bcc.n	800f490 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	1c9a      	adds	r2, r3, #2
 800f3ca:	617a      	str	r2, [r7, #20]
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	823b      	strh	r3, [r7, #16]
 800f3d0:	8a3b      	ldrh	r3, [r7, #16]
 800f3d2:	0a1b      	lsrs	r3, r3, #8
 800f3d4:	81fb      	strh	r3, [r7, #14]
 800f3d6:	8a3b      	ldrh	r3, [r7, #16]
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f3dc:	88fa      	ldrh	r2, [r7, #6]
 800f3de:	8a79      	ldrh	r1, [r7, #18]
 800f3e0:	8a3b      	ldrh	r3, [r7, #16]
 800f3e2:	440b      	add	r3, r1
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	da49      	bge.n	800f47c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f3e8:	89fb      	ldrh	r3, [r7, #14]
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d84f      	bhi.n	800f48e <ff_wtoupper+0xfa>
 800f3ee:	a201      	add	r2, pc, #4	; (adr r2, 800f3f4 <ff_wtoupper+0x60>)
 800f3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f4:	0800f419 	.word	0x0800f419
 800f3f8:	0800f42b 	.word	0x0800f42b
 800f3fc:	0800f441 	.word	0x0800f441
 800f400:	0800f449 	.word	0x0800f449
 800f404:	0800f451 	.word	0x0800f451
 800f408:	0800f459 	.word	0x0800f459
 800f40c:	0800f461 	.word	0x0800f461
 800f410:	0800f469 	.word	0x0800f469
 800f414:	0800f471 	.word	0x0800f471
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f418:	88fa      	ldrh	r2, [r7, #6]
 800f41a:	8a7b      	ldrh	r3, [r7, #18]
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	005b      	lsls	r3, r3, #1
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	4413      	add	r3, r2
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	80fb      	strh	r3, [r7, #6]
 800f428:	e027      	b.n	800f47a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f42a:	88fa      	ldrh	r2, [r7, #6]
 800f42c:	8a7b      	ldrh	r3, [r7, #18]
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	b29b      	uxth	r3, r3
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	b29b      	uxth	r3, r3
 800f438:	88fa      	ldrh	r2, [r7, #6]
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	80fb      	strh	r3, [r7, #6]
 800f43e:	e01c      	b.n	800f47a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f440:	88fb      	ldrh	r3, [r7, #6]
 800f442:	3b10      	subs	r3, #16
 800f444:	80fb      	strh	r3, [r7, #6]
 800f446:	e018      	b.n	800f47a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f448:	88fb      	ldrh	r3, [r7, #6]
 800f44a:	3b20      	subs	r3, #32
 800f44c:	80fb      	strh	r3, [r7, #6]
 800f44e:	e014      	b.n	800f47a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f450:	88fb      	ldrh	r3, [r7, #6]
 800f452:	3b30      	subs	r3, #48	; 0x30
 800f454:	80fb      	strh	r3, [r7, #6]
 800f456:	e010      	b.n	800f47a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f458:	88fb      	ldrh	r3, [r7, #6]
 800f45a:	3b1a      	subs	r3, #26
 800f45c:	80fb      	strh	r3, [r7, #6]
 800f45e:	e00c      	b.n	800f47a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f460:	88fb      	ldrh	r3, [r7, #6]
 800f462:	3308      	adds	r3, #8
 800f464:	80fb      	strh	r3, [r7, #6]
 800f466:	e008      	b.n	800f47a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f468:	88fb      	ldrh	r3, [r7, #6]
 800f46a:	3b50      	subs	r3, #80	; 0x50
 800f46c:	80fb      	strh	r3, [r7, #6]
 800f46e:	e004      	b.n	800f47a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f470:	88fb      	ldrh	r3, [r7, #6]
 800f472:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f476:	80fb      	strh	r3, [r7, #6]
 800f478:	bf00      	nop
			}
			break;
 800f47a:	e008      	b.n	800f48e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f47c:	89fb      	ldrh	r3, [r7, #14]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d195      	bne.n	800f3ae <ff_wtoupper+0x1a>
 800f482:	8a3b      	ldrh	r3, [r7, #16]
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	4413      	add	r3, r2
 800f48a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f48c:	e78f      	b.n	800f3ae <ff_wtoupper+0x1a>
			break;
 800f48e:	bf00      	nop
	}

	return chr;
 800f490:	88fb      	ldrh	r3, [r7, #6]
}
 800f492:	4618      	mov	r0, r3
 800f494:	371c      	adds	r7, #28
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	08010098 	.word	0x08010098
 800f4a4:	0801028c 	.word	0x0801028c

0800f4a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	490e      	ldr	r1, [pc, #56]	; (800f4e8 <MX_USB_HOST_Init+0x40>)
 800f4b0:	480e      	ldr	r0, [pc, #56]	; (800f4ec <MX_USB_HOST_Init+0x44>)
 800f4b2:	f7fb f9af 	bl	800a814 <USBH_Init>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f4bc:	f7f2 f9b0 	bl	8001820 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f4c0:	490b      	ldr	r1, [pc, #44]	; (800f4f0 <MX_USB_HOST_Init+0x48>)
 800f4c2:	480a      	ldr	r0, [pc, #40]	; (800f4ec <MX_USB_HOST_Init+0x44>)
 800f4c4:	f7fb fa34 	bl	800a930 <USBH_RegisterClass>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f4ce:	f7f2 f9a7 	bl	8001820 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f4d2:	4806      	ldr	r0, [pc, #24]	; (800f4ec <MX_USB_HOST_Init+0x44>)
 800f4d4:	f7fb fab8 	bl	800aa48 <USBH_Start>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d001      	beq.n	800f4e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f4de:	f7f2 f99f 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f4e2:	bf00      	nop
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	0800f509 	.word	0x0800f509
 800f4ec:	20001df4 	.word	0x20001df4
 800f4f0:	20000048 	.word	0x20000048

0800f4f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f4f8:	4802      	ldr	r0, [pc, #8]	; (800f504 <MX_USB_HOST_Process+0x10>)
 800f4fa:	f7fb fab5 	bl	800aa68 <USBH_Process>
}
 800f4fe:	bf00      	nop
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	20001df4 	.word	0x20001df4

0800f508 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f514:	78fb      	ldrb	r3, [r7, #3]
 800f516:	3b01      	subs	r3, #1
 800f518:	2b04      	cmp	r3, #4
 800f51a:	d819      	bhi.n	800f550 <USBH_UserProcess+0x48>
 800f51c:	a201      	add	r2, pc, #4	; (adr r2, 800f524 <USBH_UserProcess+0x1c>)
 800f51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f522:	bf00      	nop
 800f524:	0800f551 	.word	0x0800f551
 800f528:	0800f541 	.word	0x0800f541
 800f52c:	0800f551 	.word	0x0800f551
 800f530:	0800f549 	.word	0x0800f549
 800f534:	0800f539 	.word	0x0800f539
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f538:	4b09      	ldr	r3, [pc, #36]	; (800f560 <USBH_UserProcess+0x58>)
 800f53a:	2203      	movs	r2, #3
 800f53c:	701a      	strb	r2, [r3, #0]
  break;
 800f53e:	e008      	b.n	800f552 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f540:	4b07      	ldr	r3, [pc, #28]	; (800f560 <USBH_UserProcess+0x58>)
 800f542:	2202      	movs	r2, #2
 800f544:	701a      	strb	r2, [r3, #0]
  break;
 800f546:	e004      	b.n	800f552 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f548:	4b05      	ldr	r3, [pc, #20]	; (800f560 <USBH_UserProcess+0x58>)
 800f54a:	2201      	movs	r2, #1
 800f54c:	701a      	strb	r2, [r3, #0]
  break;
 800f54e:	e000      	b.n	800f552 <USBH_UserProcess+0x4a>

  default:
  break;
 800f550:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	200021cc 	.word	0x200021cc

0800f564 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b08a      	sub	sp, #40	; 0x28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f56c:	f107 0314 	add.w	r3, r7, #20
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	605a      	str	r2, [r3, #4]
 800f576:	609a      	str	r2, [r3, #8]
 800f578:	60da      	str	r2, [r3, #12]
 800f57a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f584:	d147      	bne.n	800f616 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f586:	2300      	movs	r3, #0
 800f588:	613b      	str	r3, [r7, #16]
 800f58a:	4b25      	ldr	r3, [pc, #148]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f58e:	4a24      	ldr	r2, [pc, #144]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f590:	f043 0301 	orr.w	r3, r3, #1
 800f594:	6313      	str	r3, [r2, #48]	; 0x30
 800f596:	4b22      	ldr	r3, [pc, #136]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f59a:	f003 0301 	and.w	r3, r3, #1
 800f59e:	613b      	str	r3, [r7, #16]
 800f5a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f5a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5b0:	f107 0314 	add.w	r3, r7, #20
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	481b      	ldr	r0, [pc, #108]	; (800f624 <HAL_HCD_MspInit+0xc0>)
 800f5b8:	f7f3 fb02 	bl	8002bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f5bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f5c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f5ce:	230a      	movs	r3, #10
 800f5d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5d2:	f107 0314 	add.w	r3, r7, #20
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4812      	ldr	r0, [pc, #72]	; (800f624 <HAL_HCD_MspInit+0xc0>)
 800f5da:	f7f3 faf1 	bl	8002bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f5de:	4b10      	ldr	r3, [pc, #64]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e2:	4a0f      	ldr	r2, [pc, #60]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e8:	6353      	str	r3, [r2, #52]	; 0x34
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60fb      	str	r3, [r7, #12]
 800f5ee:	4b0c      	ldr	r3, [pc, #48]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5f2:	4a0b      	ldr	r2, [pc, #44]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f5f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f5f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f5fa:	4b09      	ldr	r3, [pc, #36]	; (800f620 <HAL_HCD_MspInit+0xbc>)
 800f5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f602:	60fb      	str	r3, [r7, #12]
 800f604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f606:	2200      	movs	r2, #0
 800f608:	2100      	movs	r1, #0
 800f60a:	2043      	movs	r0, #67	; 0x43
 800f60c:	f7f2 fe70 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f610:	2043      	movs	r0, #67	; 0x43
 800f612:	f7f2 fe89 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f616:	bf00      	nop
 800f618:	3728      	adds	r7, #40	; 0x28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	40023800 	.word	0x40023800
 800f624:	40020000 	.word	0x40020000

0800f628 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f636:	4618      	mov	r0, r3
 800f638:	f7fb fde9 	bl	800b20e <USBH_LL_IncTimer>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f652:	4618      	mov	r0, r3
 800f654:	f7fb fe21 	bl	800b29a <USBH_LL_Connect>
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fb fe2a 	bl	800b2c8 <USBH_LL_Disconnect>
}
 800f674:	bf00      	nop
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	460b      	mov	r3, r1
 800f686:	70fb      	strb	r3, [r7, #3]
 800f688:	4613      	mov	r3, r2
 800f68a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fb fddb 	bl	800b262 <USBH_LL_PortEnabled>
}
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fb fddb 	bl	800b27e <USBH_LL_PortDisabled>
}
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d12a      	bne.n	800f738 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f6e2:	4a18      	ldr	r2, [pc, #96]	; (800f744 <USBH_LL_Init+0x74>)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	4a15      	ldr	r2, [pc, #84]	; (800f744 <USBH_LL_Init+0x74>)
 800f6ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6f2:	4b14      	ldr	r3, [pc, #80]	; (800f744 <USBH_LL_Init+0x74>)
 800f6f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f6f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f6fa:	4b12      	ldr	r3, [pc, #72]	; (800f744 <USBH_LL_Init+0x74>)
 800f6fc:	2208      	movs	r2, #8
 800f6fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f700:	4b10      	ldr	r3, [pc, #64]	; (800f744 <USBH_LL_Init+0x74>)
 800f702:	2201      	movs	r2, #1
 800f704:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f706:	4b0f      	ldr	r3, [pc, #60]	; (800f744 <USBH_LL_Init+0x74>)
 800f708:	2200      	movs	r2, #0
 800f70a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f70c:	4b0d      	ldr	r3, [pc, #52]	; (800f744 <USBH_LL_Init+0x74>)
 800f70e:	2202      	movs	r2, #2
 800f710:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f712:	4b0c      	ldr	r3, [pc, #48]	; (800f744 <USBH_LL_Init+0x74>)
 800f714:	2200      	movs	r2, #0
 800f716:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f718:	480a      	ldr	r0, [pc, #40]	; (800f744 <USBH_LL_Init+0x74>)
 800f71a:	f7f3 fd1b 	bl	8003154 <HAL_HCD_Init>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f724:	f7f2 f87c 	bl	8001820 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f728:	4806      	ldr	r0, [pc, #24]	; (800f744 <USBH_LL_Init+0x74>)
 800f72a:	f7f4 f8fe 	bl	800392a <HAL_HCD_GetCurrentFrame>
 800f72e:	4603      	mov	r3, r0
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7fb fd5c 	bl	800b1f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f738:	2300      	movs	r3, #0
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	200021d0 	.word	0x200021d0

0800f748 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f4 f86d 	bl	800383e <HAL_HCD_Start>
 800f764:	4603      	mov	r3, r0
 800f766:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f768:	7bfb      	ldrb	r3, [r7, #15]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f000 f98c 	bl	800fa88 <USBH_Get_USB_Status>
 800f770:	4603      	mov	r3, r0
 800f772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f774:	7bbb      	ldrb	r3, [r7, #14]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f786:	2300      	movs	r3, #0
 800f788:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f78a:	2300      	movs	r3, #0
 800f78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f794:	4618      	mov	r0, r3
 800f796:	f7f4 f875 	bl	8003884 <HAL_HCD_Stop>
 800f79a:	4603      	mov	r3, r0
 800f79c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 f971 	bl	800fa88 <USBH_Get_USB_Status>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7f4 f8bd 	bl	8003946 <HAL_HCD_GetCurrentSpeed>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	d00c      	beq.n	800f7ec <USBH_LL_GetSpeed+0x38>
 800f7d2:	2b02      	cmp	r3, #2
 800f7d4:	d80d      	bhi.n	800f7f2 <USBH_LL_GetSpeed+0x3e>
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d002      	beq.n	800f7e0 <USBH_LL_GetSpeed+0x2c>
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d003      	beq.n	800f7e6 <USBH_LL_GetSpeed+0x32>
 800f7de:	e008      	b.n	800f7f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e4:	e008      	b.n	800f7f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f7ea:	e005      	b.n	800f7f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f7f0:	e002      	b.n	800f7f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7f6:	bf00      	nop
  }
  return  speed;
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f80e:	2300      	movs	r3, #0
 800f810:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f818:	4618      	mov	r0, r3
 800f81a:	f7f4 f850 	bl	80038be <HAL_HCD_ResetPort>
 800f81e:	4603      	mov	r3, r0
 800f820:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f822:	7bfb      	ldrb	r3, [r7, #15]
 800f824:	4618      	mov	r0, r3
 800f826:	f000 f92f 	bl	800fa88 <USBH_Get_USB_Status>
 800f82a:	4603      	mov	r3, r0
 800f82c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f84a:	78fa      	ldrb	r2, [r7, #3]
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f4 f857 	bl	8003902 <HAL_HCD_HC_GetXferCount>
 800f854:	4603      	mov	r3, r0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3708      	adds	r7, #8
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f85e:	b590      	push	{r4, r7, lr}
 800f860:	b089      	sub	sp, #36	; 0x24
 800f862:	af04      	add	r7, sp, #16
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	4608      	mov	r0, r1
 800f868:	4611      	mov	r1, r2
 800f86a:	461a      	mov	r2, r3
 800f86c:	4603      	mov	r3, r0
 800f86e:	70fb      	strb	r3, [r7, #3]
 800f870:	460b      	mov	r3, r1
 800f872:	70bb      	strb	r3, [r7, #2]
 800f874:	4613      	mov	r3, r2
 800f876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f878:	2300      	movs	r3, #0
 800f87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f886:	787c      	ldrb	r4, [r7, #1]
 800f888:	78ba      	ldrb	r2, [r7, #2]
 800f88a:	78f9      	ldrb	r1, [r7, #3]
 800f88c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f88e:	9302      	str	r3, [sp, #8]
 800f890:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f894:	9301      	str	r3, [sp, #4]
 800f896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	4623      	mov	r3, r4
 800f89e:	f7f3 fcbb 	bl	8003218 <HAL_HCD_HC_Init>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 f8ed 	bl	800fa88 <USBH_Get_USB_Status>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd90      	pop	{r4, r7, pc}

0800f8bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f8d6:	78fa      	ldrb	r2, [r7, #3]
 800f8d8:	4611      	mov	r1, r2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7f3 fd2b 	bl	8003336 <HAL_HCD_HC_Halt>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 f8ce 	bl	800fa88 <USBH_Get_USB_Status>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3710      	adds	r7, #16
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f8fa:	b590      	push	{r4, r7, lr}
 800f8fc:	b089      	sub	sp, #36	; 0x24
 800f8fe:	af04      	add	r7, sp, #16
 800f900:	6078      	str	r0, [r7, #4]
 800f902:	4608      	mov	r0, r1
 800f904:	4611      	mov	r1, r2
 800f906:	461a      	mov	r2, r3
 800f908:	4603      	mov	r3, r0
 800f90a:	70fb      	strb	r3, [r7, #3]
 800f90c:	460b      	mov	r3, r1
 800f90e:	70bb      	strb	r3, [r7, #2]
 800f910:	4613      	mov	r3, r2
 800f912:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f914:	2300      	movs	r3, #0
 800f916:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f922:	787c      	ldrb	r4, [r7, #1]
 800f924:	78ba      	ldrb	r2, [r7, #2]
 800f926:	78f9      	ldrb	r1, [r7, #3]
 800f928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f92c:	9303      	str	r3, [sp, #12]
 800f92e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f930:	9302      	str	r3, [sp, #8]
 800f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	4623      	mov	r3, r4
 800f93e:	f7f3 fd1d 	bl	800337c <HAL_HCD_HC_SubmitRequest>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	4618      	mov	r0, r3
 800f94a:	f000 f89d 	bl	800fa88 <USBH_Get_USB_Status>
 800f94e:	4603      	mov	r3, r0
 800f950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f952:	7bbb      	ldrb	r3, [r7, #14]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd90      	pop	{r4, r7, pc}

0800f95c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f96e:	78fa      	ldrb	r2, [r7, #3]
 800f970:	4611      	mov	r1, r2
 800f972:	4618      	mov	r0, r3
 800f974:	f7f3 ffb1 	bl	80038da <HAL_HCD_HC_GetURBState>
 800f978:	4603      	mov	r3, r0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
 800f98a:	460b      	mov	r3, r1
 800f98c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f994:	2b01      	cmp	r3, #1
 800f996:	d103      	bne.n	800f9a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f998:	78fb      	ldrb	r3, [r7, #3]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 f8a0 	bl	800fae0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f9a0:	20c8      	movs	r0, #200	; 0xc8
 800f9a2:	f7f2 fbc9 	bl	8002138 <HAL_Delay>
  return USBH_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f9c8:	78fb      	ldrb	r3, [r7, #3]
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	212c      	movs	r1, #44	; 0x2c
 800f9ce:	fb01 f303 	mul.w	r3, r1, r3
 800f9d2:	4413      	add	r3, r2
 800f9d4:	333b      	adds	r3, #59	; 0x3b
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d009      	beq.n	800f9f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f9dc:	78fb      	ldrb	r3, [r7, #3]
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	212c      	movs	r1, #44	; 0x2c
 800f9e2:	fb01 f303 	mul.w	r3, r1, r3
 800f9e6:	4413      	add	r3, r2
 800f9e8:	3354      	adds	r3, #84	; 0x54
 800f9ea:	78ba      	ldrb	r2, [r7, #2]
 800f9ec:	701a      	strb	r2, [r3, #0]
 800f9ee:	e008      	b.n	800fa02 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	212c      	movs	r1, #44	; 0x2c
 800f9f6:	fb01 f303 	mul.w	r3, r1, r3
 800f9fa:	4413      	add	r3, r2
 800f9fc:	3355      	adds	r3, #85	; 0x55
 800f9fe:	78ba      	ldrb	r2, [r7, #2]
 800fa00:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3714      	adds	r7, #20
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b085      	sub	sp, #20
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800fa26:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800fa28:	78fb      	ldrb	r3, [r7, #3]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	212c      	movs	r1, #44	; 0x2c
 800fa2e:	fb01 f303 	mul.w	r3, r1, r3
 800fa32:	4413      	add	r3, r2
 800fa34:	333b      	adds	r3, #59	; 0x3b
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d009      	beq.n	800fa50 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	212c      	movs	r1, #44	; 0x2c
 800fa42:	fb01 f303 	mul.w	r3, r1, r3
 800fa46:	4413      	add	r3, r2
 800fa48:	3354      	adds	r3, #84	; 0x54
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	73fb      	strb	r3, [r7, #15]
 800fa4e:	e008      	b.n	800fa62 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fa50:	78fb      	ldrb	r3, [r7, #3]
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	212c      	movs	r1, #44	; 0x2c
 800fa56:	fb01 f303 	mul.w	r3, r1, r3
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3355      	adds	r3, #85	; 0x55
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3714      	adds	r7, #20
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7f2 fb5d 	bl	8002138 <HAL_Delay>
}
 800fa7e:	bf00      	nop
 800fa80:	3708      	adds	r7, #8
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa96:	79fb      	ldrb	r3, [r7, #7]
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d817      	bhi.n	800facc <USBH_Get_USB_Status+0x44>
 800fa9c:	a201      	add	r2, pc, #4	; (adr r2, 800faa4 <USBH_Get_USB_Status+0x1c>)
 800fa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa2:	bf00      	nop
 800faa4:	0800fab5 	.word	0x0800fab5
 800faa8:	0800fabb 	.word	0x0800fabb
 800faac:	0800fac1 	.word	0x0800fac1
 800fab0:	0800fac7 	.word	0x0800fac7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fab4:	2300      	movs	r3, #0
 800fab6:	73fb      	strb	r3, [r7, #15]
    break;
 800fab8:	e00b      	b.n	800fad2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800faba:	2302      	movs	r3, #2
 800fabc:	73fb      	strb	r3, [r7, #15]
    break;
 800fabe:	e008      	b.n	800fad2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fac0:	2301      	movs	r3, #1
 800fac2:	73fb      	strb	r3, [r7, #15]
    break;
 800fac4:	e005      	b.n	800fad2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fac6:	2302      	movs	r3, #2
 800fac8:	73fb      	strb	r3, [r7, #15]
    break;
 800faca:	e002      	b.n	800fad2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800facc:	2302      	movs	r3, #2
 800face:	73fb      	strb	r3, [r7, #15]
    break;
 800fad0:	bf00      	nop
  }
  return usb_status;
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	4603      	mov	r3, r0
 800fae8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800faee:	79fb      	ldrb	r3, [r7, #7]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800faf4:	2301      	movs	r3, #1
 800faf6:	73fb      	strb	r3, [r7, #15]
 800faf8:	e001      	b.n	800fafe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fafa:	2300      	movs	r3, #0
 800fafc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800fafe:	7bfb      	ldrb	r3, [r7, #15]
 800fb00:	461a      	mov	r2, r3
 800fb02:	2101      	movs	r1, #1
 800fb04:	4803      	ldr	r0, [pc, #12]	; (800fb14 <MX_DriverVbusFS+0x34>)
 800fb06:	f7f3 faf3 	bl	80030f0 <HAL_GPIO_WritePin>
}
 800fb0a:	bf00      	nop
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	40020800 	.word	0x40020800

0800fb18 <__errno>:
 800fb18:	4b01      	ldr	r3, [pc, #4]	; (800fb20 <__errno+0x8>)
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	20000068 	.word	0x20000068

0800fb24 <__libc_init_array>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4d0d      	ldr	r5, [pc, #52]	; (800fb5c <__libc_init_array+0x38>)
 800fb28:	4c0d      	ldr	r4, [pc, #52]	; (800fb60 <__libc_init_array+0x3c>)
 800fb2a:	1b64      	subs	r4, r4, r5
 800fb2c:	10a4      	asrs	r4, r4, #2
 800fb2e:	2600      	movs	r6, #0
 800fb30:	42a6      	cmp	r6, r4
 800fb32:	d109      	bne.n	800fb48 <__libc_init_array+0x24>
 800fb34:	4d0b      	ldr	r5, [pc, #44]	; (800fb64 <__libc_init_array+0x40>)
 800fb36:	4c0c      	ldr	r4, [pc, #48]	; (800fb68 <__libc_init_array+0x44>)
 800fb38:	f000 f966 	bl	800fe08 <_init>
 800fb3c:	1b64      	subs	r4, r4, r5
 800fb3e:	10a4      	asrs	r4, r4, #2
 800fb40:	2600      	movs	r6, #0
 800fb42:	42a6      	cmp	r6, r4
 800fb44:	d105      	bne.n	800fb52 <__libc_init_array+0x2e>
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb4c:	4798      	blx	r3
 800fb4e:	3601      	adds	r6, #1
 800fb50:	e7ee      	b.n	800fb30 <__libc_init_array+0xc>
 800fb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb56:	4798      	blx	r3
 800fb58:	3601      	adds	r6, #1
 800fb5a:	e7f2      	b.n	800fb42 <__libc_init_array+0x1e>
 800fb5c:	08010350 	.word	0x08010350
 800fb60:	08010350 	.word	0x08010350
 800fb64:	08010350 	.word	0x08010350
 800fb68:	08010354 	.word	0x08010354

0800fb6c <malloc>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	; (800fb78 <malloc+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f000 b88d 	b.w	800fc90 <_malloc_r>
 800fb76:	bf00      	nop
 800fb78:	20000068 	.word	0x20000068

0800fb7c <free>:
 800fb7c:	4b02      	ldr	r3, [pc, #8]	; (800fb88 <free+0xc>)
 800fb7e:	4601      	mov	r1, r0
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	f000 b819 	b.w	800fbb8 <_free_r>
 800fb86:	bf00      	nop
 800fb88:	20000068 	.word	0x20000068

0800fb8c <memcpy>:
 800fb8c:	440a      	add	r2, r1
 800fb8e:	4291      	cmp	r1, r2
 800fb90:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb94:	d100      	bne.n	800fb98 <memcpy+0xc>
 800fb96:	4770      	bx	lr
 800fb98:	b510      	push	{r4, lr}
 800fb9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fba2:	4291      	cmp	r1, r2
 800fba4:	d1f9      	bne.n	800fb9a <memcpy+0xe>
 800fba6:	bd10      	pop	{r4, pc}

0800fba8 <memset>:
 800fba8:	4402      	add	r2, r0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d100      	bne.n	800fbb2 <memset+0xa>
 800fbb0:	4770      	bx	lr
 800fbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbb6:	e7f9      	b.n	800fbac <memset+0x4>

0800fbb8 <_free_r>:
 800fbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbba:	2900      	cmp	r1, #0
 800fbbc:	d044      	beq.n	800fc48 <_free_r+0x90>
 800fbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc2:	9001      	str	r0, [sp, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbca:	bfb8      	it	lt
 800fbcc:	18e4      	addlt	r4, r4, r3
 800fbce:	f000 f90d 	bl	800fdec <__malloc_lock>
 800fbd2:	4a1e      	ldr	r2, [pc, #120]	; (800fc4c <_free_r+0x94>)
 800fbd4:	9801      	ldr	r0, [sp, #4]
 800fbd6:	6813      	ldr	r3, [r2, #0]
 800fbd8:	b933      	cbnz	r3, 800fbe8 <_free_r+0x30>
 800fbda:	6063      	str	r3, [r4, #4]
 800fbdc:	6014      	str	r4, [r2, #0]
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe4:	f000 b908 	b.w	800fdf8 <__malloc_unlock>
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	d908      	bls.n	800fbfe <_free_r+0x46>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf01      	itttt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	1949      	addeq	r1, r1, r5
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	e7ed      	b.n	800fbda <_free_r+0x22>
 800fbfe:	461a      	mov	r2, r3
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b10b      	cbz	r3, 800fc08 <_free_r+0x50>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d9fa      	bls.n	800fbfe <_free_r+0x46>
 800fc08:	6811      	ldr	r1, [r2, #0]
 800fc0a:	1855      	adds	r5, r2, r1
 800fc0c:	42a5      	cmp	r5, r4
 800fc0e:	d10b      	bne.n	800fc28 <_free_r+0x70>
 800fc10:	6824      	ldr	r4, [r4, #0]
 800fc12:	4421      	add	r1, r4
 800fc14:	1854      	adds	r4, r2, r1
 800fc16:	42a3      	cmp	r3, r4
 800fc18:	6011      	str	r1, [r2, #0]
 800fc1a:	d1e0      	bne.n	800fbde <_free_r+0x26>
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	6053      	str	r3, [r2, #4]
 800fc22:	4421      	add	r1, r4
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	e7da      	b.n	800fbde <_free_r+0x26>
 800fc28:	d902      	bls.n	800fc30 <_free_r+0x78>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e7d6      	b.n	800fbde <_free_r+0x26>
 800fc30:	6825      	ldr	r5, [r4, #0]
 800fc32:	1961      	adds	r1, r4, r5
 800fc34:	428b      	cmp	r3, r1
 800fc36:	bf04      	itt	eq
 800fc38:	6819      	ldreq	r1, [r3, #0]
 800fc3a:	685b      	ldreq	r3, [r3, #4]
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	bf04      	itt	eq
 800fc40:	1949      	addeq	r1, r1, r5
 800fc42:	6021      	streq	r1, [r4, #0]
 800fc44:	6054      	str	r4, [r2, #4]
 800fc46:	e7ca      	b.n	800fbde <_free_r+0x26>
 800fc48:	b003      	add	sp, #12
 800fc4a:	bd30      	pop	{r4, r5, pc}
 800fc4c:	200024d4 	.word	0x200024d4

0800fc50 <sbrk_aligned>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	4e0e      	ldr	r6, [pc, #56]	; (800fc8c <sbrk_aligned+0x3c>)
 800fc54:	460c      	mov	r4, r1
 800fc56:	6831      	ldr	r1, [r6, #0]
 800fc58:	4605      	mov	r5, r0
 800fc5a:	b911      	cbnz	r1, 800fc62 <sbrk_aligned+0x12>
 800fc5c:	f000 f88c 	bl	800fd78 <_sbrk_r>
 800fc60:	6030      	str	r0, [r6, #0]
 800fc62:	4621      	mov	r1, r4
 800fc64:	4628      	mov	r0, r5
 800fc66:	f000 f887 	bl	800fd78 <_sbrk_r>
 800fc6a:	1c43      	adds	r3, r0, #1
 800fc6c:	d00a      	beq.n	800fc84 <sbrk_aligned+0x34>
 800fc6e:	1cc4      	adds	r4, r0, #3
 800fc70:	f024 0403 	bic.w	r4, r4, #3
 800fc74:	42a0      	cmp	r0, r4
 800fc76:	d007      	beq.n	800fc88 <sbrk_aligned+0x38>
 800fc78:	1a21      	subs	r1, r4, r0
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f000 f87c 	bl	800fd78 <_sbrk_r>
 800fc80:	3001      	adds	r0, #1
 800fc82:	d101      	bne.n	800fc88 <sbrk_aligned+0x38>
 800fc84:	f04f 34ff 	mov.w	r4, #4294967295
 800fc88:	4620      	mov	r0, r4
 800fc8a:	bd70      	pop	{r4, r5, r6, pc}
 800fc8c:	200024d8 	.word	0x200024d8

0800fc90 <_malloc_r>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	1ccd      	adds	r5, r1, #3
 800fc96:	f025 0503 	bic.w	r5, r5, #3
 800fc9a:	3508      	adds	r5, #8
 800fc9c:	2d0c      	cmp	r5, #12
 800fc9e:	bf38      	it	cc
 800fca0:	250c      	movcc	r5, #12
 800fca2:	2d00      	cmp	r5, #0
 800fca4:	4607      	mov	r7, r0
 800fca6:	db01      	blt.n	800fcac <_malloc_r+0x1c>
 800fca8:	42a9      	cmp	r1, r5
 800fcaa:	d905      	bls.n	800fcb8 <_malloc_r+0x28>
 800fcac:	230c      	movs	r3, #12
 800fcae:	603b      	str	r3, [r7, #0]
 800fcb0:	2600      	movs	r6, #0
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	4e2e      	ldr	r6, [pc, #184]	; (800fd74 <_malloc_r+0xe4>)
 800fcba:	f000 f897 	bl	800fdec <__malloc_lock>
 800fcbe:	6833      	ldr	r3, [r6, #0]
 800fcc0:	461c      	mov	r4, r3
 800fcc2:	bb34      	cbnz	r4, 800fd12 <_malloc_r+0x82>
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f7ff ffc2 	bl	800fc50 <sbrk_aligned>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	4604      	mov	r4, r0
 800fcd0:	d14d      	bne.n	800fd6e <_malloc_r+0xde>
 800fcd2:	6834      	ldr	r4, [r6, #0]
 800fcd4:	4626      	mov	r6, r4
 800fcd6:	2e00      	cmp	r6, #0
 800fcd8:	d140      	bne.n	800fd5c <_malloc_r+0xcc>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4638      	mov	r0, r7
 800fce0:	eb04 0803 	add.w	r8, r4, r3
 800fce4:	f000 f848 	bl	800fd78 <_sbrk_r>
 800fce8:	4580      	cmp	r8, r0
 800fcea:	d13a      	bne.n	800fd62 <_malloc_r+0xd2>
 800fcec:	6821      	ldr	r1, [r4, #0]
 800fcee:	3503      	adds	r5, #3
 800fcf0:	1a6d      	subs	r5, r5, r1
 800fcf2:	f025 0503 	bic.w	r5, r5, #3
 800fcf6:	3508      	adds	r5, #8
 800fcf8:	2d0c      	cmp	r5, #12
 800fcfa:	bf38      	it	cc
 800fcfc:	250c      	movcc	r5, #12
 800fcfe:	4629      	mov	r1, r5
 800fd00:	4638      	mov	r0, r7
 800fd02:	f7ff ffa5 	bl	800fc50 <sbrk_aligned>
 800fd06:	3001      	adds	r0, #1
 800fd08:	d02b      	beq.n	800fd62 <_malloc_r+0xd2>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	442b      	add	r3, r5
 800fd0e:	6023      	str	r3, [r4, #0]
 800fd10:	e00e      	b.n	800fd30 <_malloc_r+0xa0>
 800fd12:	6822      	ldr	r2, [r4, #0]
 800fd14:	1b52      	subs	r2, r2, r5
 800fd16:	d41e      	bmi.n	800fd56 <_malloc_r+0xc6>
 800fd18:	2a0b      	cmp	r2, #11
 800fd1a:	d916      	bls.n	800fd4a <_malloc_r+0xba>
 800fd1c:	1961      	adds	r1, r4, r5
 800fd1e:	42a3      	cmp	r3, r4
 800fd20:	6025      	str	r5, [r4, #0]
 800fd22:	bf18      	it	ne
 800fd24:	6059      	strne	r1, [r3, #4]
 800fd26:	6863      	ldr	r3, [r4, #4]
 800fd28:	bf08      	it	eq
 800fd2a:	6031      	streq	r1, [r6, #0]
 800fd2c:	5162      	str	r2, [r4, r5]
 800fd2e:	604b      	str	r3, [r1, #4]
 800fd30:	4638      	mov	r0, r7
 800fd32:	f104 060b 	add.w	r6, r4, #11
 800fd36:	f000 f85f 	bl	800fdf8 <__malloc_unlock>
 800fd3a:	f026 0607 	bic.w	r6, r6, #7
 800fd3e:	1d23      	adds	r3, r4, #4
 800fd40:	1af2      	subs	r2, r6, r3
 800fd42:	d0b6      	beq.n	800fcb2 <_malloc_r+0x22>
 800fd44:	1b9b      	subs	r3, r3, r6
 800fd46:	50a3      	str	r3, [r4, r2]
 800fd48:	e7b3      	b.n	800fcb2 <_malloc_r+0x22>
 800fd4a:	6862      	ldr	r2, [r4, #4]
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	bf0c      	ite	eq
 800fd50:	6032      	streq	r2, [r6, #0]
 800fd52:	605a      	strne	r2, [r3, #4]
 800fd54:	e7ec      	b.n	800fd30 <_malloc_r+0xa0>
 800fd56:	4623      	mov	r3, r4
 800fd58:	6864      	ldr	r4, [r4, #4]
 800fd5a:	e7b2      	b.n	800fcc2 <_malloc_r+0x32>
 800fd5c:	4634      	mov	r4, r6
 800fd5e:	6876      	ldr	r6, [r6, #4]
 800fd60:	e7b9      	b.n	800fcd6 <_malloc_r+0x46>
 800fd62:	230c      	movs	r3, #12
 800fd64:	603b      	str	r3, [r7, #0]
 800fd66:	4638      	mov	r0, r7
 800fd68:	f000 f846 	bl	800fdf8 <__malloc_unlock>
 800fd6c:	e7a1      	b.n	800fcb2 <_malloc_r+0x22>
 800fd6e:	6025      	str	r5, [r4, #0]
 800fd70:	e7de      	b.n	800fd30 <_malloc_r+0xa0>
 800fd72:	bf00      	nop
 800fd74:	200024d4 	.word	0x200024d4

0800fd78 <_sbrk_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_sbrk_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f1 ff6a 	bl	8001c5c <_sbrk>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_sbrk_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_sbrk_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	200024dc 	.word	0x200024dc

0800fd98 <strncpy>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	3901      	subs	r1, #1
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	b132      	cbz	r2, 800fdae <strncpy+0x16>
 800fda0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fda4:	f803 4b01 	strb.w	r4, [r3], #1
 800fda8:	3a01      	subs	r2, #1
 800fdaa:	2c00      	cmp	r4, #0
 800fdac:	d1f7      	bne.n	800fd9e <strncpy+0x6>
 800fdae:	441a      	add	r2, r3
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d100      	bne.n	800fdb8 <strncpy+0x20>
 800fdb6:	bd10      	pop	{r4, pc}
 800fdb8:	f803 1b01 	strb.w	r1, [r3], #1
 800fdbc:	e7f9      	b.n	800fdb2 <strncpy+0x1a>

0800fdbe <strstr>:
 800fdbe:	780a      	ldrb	r2, [r1, #0]
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	b96a      	cbnz	r2, 800fde0 <strstr+0x22>
 800fdc4:	bd70      	pop	{r4, r5, r6, pc}
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d109      	bne.n	800fdde <strstr+0x20>
 800fdca:	460c      	mov	r4, r1
 800fdcc:	4605      	mov	r5, r0
 800fdce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d0f6      	beq.n	800fdc4 <strstr+0x6>
 800fdd6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fdda:	429e      	cmp	r6, r3
 800fddc:	d0f7      	beq.n	800fdce <strstr+0x10>
 800fdde:	3001      	adds	r0, #1
 800fde0:	7803      	ldrb	r3, [r0, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1ef      	bne.n	800fdc6 <strstr+0x8>
 800fde6:	4618      	mov	r0, r3
 800fde8:	e7ec      	b.n	800fdc4 <strstr+0x6>
	...

0800fdec <__malloc_lock>:
 800fdec:	4801      	ldr	r0, [pc, #4]	; (800fdf4 <__malloc_lock+0x8>)
 800fdee:	f000 b809 	b.w	800fe04 <__retarget_lock_acquire_recursive>
 800fdf2:	bf00      	nop
 800fdf4:	200024e0 	.word	0x200024e0

0800fdf8 <__malloc_unlock>:
 800fdf8:	4801      	ldr	r0, [pc, #4]	; (800fe00 <__malloc_unlock+0x8>)
 800fdfa:	f000 b804 	b.w	800fe06 <__retarget_lock_release_recursive>
 800fdfe:	bf00      	nop
 800fe00:	200024e0 	.word	0x200024e0

0800fe04 <__retarget_lock_acquire_recursive>:
 800fe04:	4770      	bx	lr

0800fe06 <__retarget_lock_release_recursive>:
 800fe06:	4770      	bx	lr

0800fe08 <_init>:
 800fe08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0a:	bf00      	nop
 800fe0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe0e:	bc08      	pop	{r3}
 800fe10:	469e      	mov	lr, r3
 800fe12:	4770      	bx	lr

0800fe14 <_fini>:
 800fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe16:	bf00      	nop
 800fe18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe1a:	bc08      	pop	{r3}
 800fe1c:	469e      	mov	lr, r3
 800fe1e:	4770      	bx	lr
